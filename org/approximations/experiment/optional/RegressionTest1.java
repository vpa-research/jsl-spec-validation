package org.approximations.experiment.optional;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        java.io.Serializable serializable16 = serializableOptional11.orElse((java.io.Serializable) 100L);
        boolean boolean17 = serializableOptional11.isPresent();
        java.io.Serializable serializable18 = serializableOptional11.orElseThrow();
        java.io.Serializable serializable19 = serializableOptional11.orElseThrow();
        boolean boolean20 = serializableOptional11.isEmpty();
        java.lang.Class<?> wildcardClass21 = serializableOptional11.getClass();
        boolean boolean22 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.io.Serializable serializable23 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.lang.String str5 = serializableOptional1.toString();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional8.stream();
        java.io.Serializable serializable16 = serializableOptional8.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional8.stream();
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) serializableStream17);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableStreamOptional0);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (byte) 100);
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable11 = serializableOptional10.get();
        java.io.Serializable serializable12 = serializableOptional10.get();
        java.io.Serializable serializable13 = serializableOptional10.get();
        java.io.Serializable serializable15 = serializableOptional10.orElse((java.io.Serializable) 100L);
        boolean boolean16 = serializableOptional10.isPresent();
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean18 = serializableOptional10.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        boolean boolean10 = serializableOptional1.isPresent();
        boolean boolean11 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.lang.String str19 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Optional[1]" + "'", str19, "Optional[1]");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.lang.String str10 = serializableOptional8.toString();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.lang.String str13 = serializableOptional8.toString();
        java.io.Serializable serializable14 = serializableOptional8.get();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializable14);
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional1.stream();
        java.lang.String str17 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Optional[1]" + "'", str17, "Optional[1]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        boolean boolean7 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass12 = serializableStream11.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional13 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass12);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional14 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass12);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional15 = java.util.Optional.ofNullable(wildcardClass12);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass12);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass18 = serializableStream17.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional19 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass18);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeOptional13);
        org.junit.Assert.assertNotNull(annotatedElementOptional14);
        org.junit.Assert.assertNotNull(wildcardClassOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(annotatedElementOptional19);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = null;
        java.io.Serializable serializable7 = serializableOptional1.orElse(serializable6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertNotNull(serializableStream6);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable11 = serializableOptional1.get();
        java.io.Serializable serializable12 = serializableOptional1.get();
        boolean boolean13 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.ofNullable("");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional11.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(serializableStream20);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        boolean boolean7 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        boolean boolean1 = serializableOptional0.isPresent();
        boolean boolean2 = serializableOptional0.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.lang.String str4 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        java.io.Serializable serializable8 = serializableOptional6.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional6.stream();
        java.io.Serializable serializable10 = null;
        java.io.Serializable serializable11 = serializableOptional6.orElse(serializable10);
        boolean boolean12 = serializableOptional6.isPresent();
        java.util.Optional<java.lang.Object> objOptional13 = java.util.Optional.ofNullable((java.lang.Object) serializableOptional6);
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional6);
        java.io.Serializable serializable15 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[1]" + "'", str4, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objOptional13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        boolean boolean10 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional1.stream();
        boolean boolean12 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable18 = serializableOptional17.get();
        java.io.Serializable serializable19 = serializableOptional17.get();
        java.io.Serializable serializable20 = serializableOptional17.get();
        java.io.Serializable serializable22 = serializableOptional17.orElse((java.io.Serializable) 100L);
        boolean boolean23 = serializableOptional17.isPresent();
        boolean boolean24 = serializableOptional17.isPresent();
        boolean boolean25 = serializableOptional17.isPresent();
        java.lang.Class<?> wildcardClass26 = serializableOptional17.getClass();
        java.io.Serializable serializable27 = serializableOptional8.orElse((java.io.Serializable) wildcardClass26);
        java.lang.Class<?> wildcardClass28 = serializableOptional8.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional8.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable16 = serializableOptional8.orElseThrow();
        java.io.Serializable serializable17 = serializableOptional8.get();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        boolean boolean23 = serializableOptional8.equals((java.lang.Object) serializableStream22);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional24 = java.util.Optional.ofNullable(serializableStream22);
        java.lang.Class<?> wildcardClass25 = serializableStreamOptional24.getClass();
        boolean boolean26 = serializableOptional1.equals((java.lang.Object) wildcardClass25);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional27 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass25);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableStreamOptional24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(annotatedElementOptional27);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean16 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(serializableStream18);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        boolean boolean29 = serializableOptional7.isEmpty();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional30 = java.util.Optional.of(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptionalOptional30);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.Optional<java.lang.String> strOptional0 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass1 = strOptional0.getClass();
        org.junit.Assert.assertNotNull(strOptional0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional9 = java.util.Optional.ofNullable((java.lang.AutoCloseable) serializableStream8);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional10 = java.util.Optional.of(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(autoCloseableOptional9);
        org.junit.Assert.assertNotNull(serializableStreamOptional10);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.lang.String str5 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional7 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(autoCloseableOptional7);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) "");
        java.lang.String str7 = serializableOptional1.toString();
        boolean boolean8 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(strComparableOptional0);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.lang.String str9 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.lang.String str16 = serializableOptional11.toString();
        java.lang.Class<?> wildcardClass17 = serializableOptional11.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional18 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass17);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) constableOptional18);
        boolean boolean20 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(constableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(wildcardClassOptional0);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional12.stream();
        boolean boolean14 = serializableOptional12.isPresent();
        boolean boolean15 = serializableOptional12.isPresent();
        java.io.Serializable serializable16 = serializableOptional12.get();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional18.isPresent();
        java.io.Serializable serializable21 = serializableOptional18.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable22 = serializableOptional18.get();
        java.lang.String str23 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional18.stream();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean27 = serializableOptional26.isPresent();
        java.io.Serializable serializable29 = serializableOptional26.orElse((java.io.Serializable) (byte) 10);
        boolean boolean30 = serializableOptional18.equals((java.lang.Object) serializable29);
        java.lang.Class<?> wildcardClass31 = serializableOptional18.getClass();
        java.io.Serializable serializable32 = serializableOptional12.orElse((java.io.Serializable) wildcardClass31);
        java.io.Serializable serializable33 = serializableOptional1.orElse((java.io.Serializable) wildcardClass31);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Optional[1]" + "'", str23, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.lang.Class<?> wildcardClass7 = serializableOptional1.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional8 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass7);
        java.util.Optional<java.lang.constant.Constable> constableOptional9 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass7);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional10 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass7);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeOptional8);
        org.junit.Assert.assertNotNull(constableOptional9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional10);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.orElseThrow();
        java.lang.Class<?> wildcardClass14 = serializable13.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional15 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass14);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean20 = serializableOptional18.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional18.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional22 = java.util.Optional.empty();
        boolean boolean23 = serializableOptional18.equals((java.lang.Object) strComparableOptional22);
        java.util.Optional<java.io.Serializable> serializableOptional25 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream26 = serializableOptional25.stream();
        java.io.Serializable serializable28 = serializableOptional25.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional25.stream();
        boolean boolean30 = serializableOptional18.equals((java.lang.Object) serializableStream29);
        java.util.Optional<java.io.Serializable> serializableOptional32 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableOptional32.stream();
        java.lang.Class<?> wildcardClass34 = serializableStream33.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional35 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass34);
        java.io.Serializable serializable36 = serializableOptional18.orElse((java.io.Serializable) wildcardClass34);
        boolean boolean37 = serializableOptional1.equals((java.lang.Object) serializableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream40 = serializableOptional39.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional41 = java.util.Optional.ofNullable(serializableOptional39);
        java.util.Optional<java.io.Serializable> serializableOptional43 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean44 = serializableOptional43.isPresent();
        java.io.Serializable serializable46 = serializableOptional43.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable47 = serializableOptional43.get();
        java.lang.String str48 = serializableOptional43.toString();
        java.io.Serializable serializable49 = serializableOptional43.orElseThrow();
        java.io.Serializable serializable50 = serializableOptional43.orElseThrow();
        boolean boolean51 = serializableOptional43.isEmpty();
        java.io.Serializable serializable52 = serializableOptional43.get();
        java.lang.Class<?> wildcardClass53 = serializable52.getClass();
        java.io.Serializable serializable54 = serializableOptional39.orElse((java.io.Serializable) wildcardClass53);
        boolean boolean55 = serializableOptional1.equals((java.lang.Object) wildcardClass53);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(strComparableOptional22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableOptional25);
        org.junit.Assert.assertNotNull(serializableStream26);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serializableOptional32);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeOptional35);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertNotNull(serializableStream40);
        org.junit.Assert.assertNotNull(serializableOptionalOptional41);
        org.junit.Assert.assertNotNull(serializableOptional43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Optional[1]" + "'", str48, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (byte) 1 + "'", serializable49, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (byte) 1 + "'", serializable52, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (byte) 1 + "'", serializable54, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        boolean boolean19 = serializableOptional15.isEmpty();
        java.io.Serializable serializable20 = serializableOptional15.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional15.stream();
        java.lang.Class<?> wildcardClass22 = serializableStream21.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional23 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass22);
        java.io.Serializable serializable24 = serializableOptional1.orElse((java.io.Serializable) wildcardClass22);
        java.util.Optional<java.lang.constant.Constable> constableOptional25 = java.util.Optional.of((java.lang.constant.Constable) wildcardClass22);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(genericDeclarationOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(constableOptional25);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.get();
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isEmpty();
        boolean boolean9 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.io.Serializable serializable11 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        boolean boolean10 = serializableOptional1.isPresent();
        java.io.Serializable serializable11 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable9 = serializableOptional7.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        boolean boolean16 = serializableOptional7.equals((java.lang.Object) serializableOptional11);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional7.stream();
        java.lang.Class<?> wildcardClass19 = serializableOptional7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.util.Optional<java.lang.constant.Constable> constableOptional1 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass2 = constableOptional1.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional3 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass2);
        org.junit.Assert.assertNotNull(constableOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeOptional3);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.lang.CharSequence> charSequenceOptional8 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass9 = charSequenceOptional8.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional10 = java.util.Optional.of(wildcardClass9);
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) wildcardClass9);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional13 = java.util.Optional.ofNullable((java.lang.AutoCloseable) serializableStream12);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(charSequenceOptional8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClassOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(autoCloseableOptional13);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        boolean boolean4 = serializableOptional1.isPresent();
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional7 = java.util.Optional.of(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptionalOptional7);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable6 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.lang.String str7 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional16.stream();
        java.io.Serializable serializable19 = serializableOptional16.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable20 = serializableOptional16.get();
        boolean boolean21 = serializableOptional16.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional16.stream();
        boolean boolean23 = serializableOptional8.equals((java.lang.Object) serializableOptional16);
        java.util.Optional<java.io.Serializable> serializableOptional25 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean27 = serializableOptional25.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional25.stream();
        java.io.Serializable serializable29 = serializableOptional25.orElseThrow();
        java.io.Serializable serializable30 = serializableOptional25.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional25.stream();
        java.io.Serializable serializable32 = serializableOptional25.orElseThrow();
        boolean boolean33 = serializableOptional16.equals((java.lang.Object) serializableOptional25);
        boolean boolean34 = serializableOptional25.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(serializableOptional25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.lang.String str5 = serializableOptional1.toString();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = null;
        java.io.Serializable serializable9 = serializableOptional1.orElse(serializable8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.orElse((java.io.Serializable) (-1.0f));
        java.lang.Class<?> wildcardClass11 = serializable10.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional1.stream();
        java.lang.String str15 = serializableOptional1.toString();
        java.lang.Object obj16 = null;
        boolean boolean17 = serializableOptional1.equals(obj16);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.util.Optional<java.lang.reflect.Type> typeOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(typeOptional0);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableOptionalOptional0);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.lang.String str9 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        boolean boolean10 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "Optional[1]");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        boolean boolean11 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.ofNullable("Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional9 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream8);
        java.lang.Class<?> wildcardClass10 = serializableBaseStreamOptional9.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.lang.String str5 = serializableOptional1.toString();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional8.isPresent();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (byte) 10);
        boolean boolean12 = serializableOptional8.isPresent();
        boolean boolean13 = serializableOptional8.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional8.stream();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass20 = serializableOptional17.getClass();
        java.io.Serializable serializable21 = serializableOptional8.orElse((java.io.Serializable) wildcardClass20);
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass20);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        boolean boolean26 = serializableOptional24.isEmpty();
        java.io.Serializable serializable27 = serializableOptional24.orElseThrow();
        boolean boolean28 = serializableOptional24.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional30 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean31 = serializableOptional30.isPresent();
        java.io.Serializable serializable32 = serializableOptional30.orElseThrow();
        java.io.Serializable serializable33 = serializableOptional30.orElseThrow();
        boolean boolean34 = serializableOptional30.isEmpty();
        boolean boolean35 = serializableOptional24.equals((java.lang.Object) serializableOptional30);
        java.util.Optional<java.io.Serializable> serializableOptional37 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean39 = serializableOptional37.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass40 = serializableOptional37.getClass();
        java.io.Serializable serializable41 = serializableOptional24.orElse((java.io.Serializable) wildcardClass40);
        java.io.Serializable serializable42 = serializableOptional1.orElse(serializable41);
        java.io.Serializable serializable43 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(serializableOptional30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(serializableOptional37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.io.Serializable serializable13 = serializableOptional1.orElseThrow();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional14 = java.util.Optional.of(serializableOptional1);
        boolean boolean15 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass2 = charSequenceOptional1.getClass();
        org.junit.Assert.assertNotNull(charSequenceOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        java.lang.String str8 = serializableOptional7.toString();
        java.lang.Class<?> wildcardClass9 = serializableOptional7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[class java.util.Optional]" + "'", str8, "Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional6 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass7 = strComparableOptional6.getClass();
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) wildcardClass7);
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        boolean boolean10 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(strComparableOptional6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.of((java.lang.constant.ConstantDesc) 10);
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        java.lang.String str11 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional16 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass17 = strComparableOptional16.getClass();
        java.io.Serializable serializable18 = serializableOptional11.orElse((java.io.Serializable) wildcardClass17);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializable18);
        java.lang.String str20 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(strComparableOptional16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Optional[1]" + "'", str20, "Optional[1]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(annotatedElementOptional0);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.ofNullable((java.io.Serializable) 10.0f);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional5 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable6 = serializableOptional5.get();
        java.io.Serializable serializable7 = serializableOptional5.get();
        java.io.Serializable serializable8 = serializableOptional5.get();
        boolean boolean9 = serializableOptional5.isEmpty();
        java.lang.String str10 = serializableOptional5.toString();
        boolean boolean11 = serializableOptional5.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional5.stream();
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional14.stream();
        boolean boolean16 = serializableOptional14.isEmpty();
        java.lang.Class<?> wildcardClass17 = serializableOptional14.getClass();
        java.io.Serializable serializable18 = serializableOptional5.orElse((java.io.Serializable) wildcardClass17);
        java.io.Serializable serializable19 = serializableOptional1.orElse(serializable18);
        boolean boolean20 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + 10.0f + "'", serializable2, 10.0f);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[10.0]" + "'", str3, "Optional[10.0]");
        org.junit.Assert.assertNotNull(serializableOptional5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + 10.0f + "'", serializable19, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional8.isPresent();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable12 = serializableOptional8.get();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional13 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass14 = strComparableOptional13.getClass();
        java.io.Serializable serializable15 = serializableOptional8.orElse((java.io.Serializable) wildcardClass14);
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.lang.String str17 = serializableOptional8.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertNotNull(strComparableOptional13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Optional[1]" + "'", str17, "Optional[1]");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional19.stream();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable27 = serializableOptional26.get();
        java.io.Serializable serializable28 = serializableOptional26.get();
        java.io.Serializable serializable29 = serializableOptional26.get();
        java.io.Serializable serializable31 = serializableOptional26.orElse((java.io.Serializable) 100L);
        boolean boolean32 = serializableOptional26.isPresent();
        boolean boolean33 = serializableOptional26.isPresent();
        java.io.Serializable serializable34 = serializableOptional26.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional26.stream();
        boolean boolean36 = serializableOptional19.equals((java.lang.Object) serializableOptional26);
        boolean boolean37 = serializableOptional26.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable40 = serializableOptional39.get();
        java.io.Serializable serializable41 = serializableOptional39.get();
        java.io.Serializable serializable42 = serializableOptional39.get();
        boolean boolean43 = serializableOptional39.isEmpty();
        java.io.Serializable serializable44 = serializableOptional39.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream45 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream46 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional39.stream();
        boolean boolean48 = serializableOptional26.equals((java.lang.Object) serializableStream47);
        boolean boolean49 = serializableOptional10.equals((java.lang.Object) serializableOptional26);
        java.io.Serializable serializable50 = serializableOptional26.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional52 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean54 = serializableOptional52.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream55 = serializableOptional52.stream();
        java.io.Serializable serializable56 = serializableOptional52.get();
        java.io.Serializable serializable57 = serializableOptional52.orElseThrow();
        boolean boolean58 = serializableOptional52.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream59 = serializableOptional52.stream();
        java.io.Serializable serializable60 = serializableOptional52.get();
        boolean boolean61 = serializableOptional26.equals((java.lang.Object) serializable60);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream45);
        org.junit.Assert.assertNotNull(serializableStream46);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableStream55);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (byte) 1 + "'", serializable56, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (byte) 1 + "'", serializable57, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(serializableStream59);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (byte) 1 + "'", serializable60, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        boolean boolean11 = serializableOptional1.isPresent();
        java.io.Serializable serializable12 = serializableOptional1.get();
        java.io.Serializable serializable13 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable11 = serializableOptional10.get();
        java.io.Serializable serializable12 = serializableOptional10.get();
        java.io.Serializable serializable13 = serializableOptional10.get();
        boolean boolean14 = serializableOptional10.isEmpty();
        java.io.Serializable serializable15 = serializableOptional10.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass17 = serializableStream16.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional18 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass17);
        java.io.Serializable serializable19 = serializableOptional1.orElse((java.io.Serializable) wildcardClass17);
        java.lang.String str20 = serializableOptional1.toString();
        java.lang.Class<?> wildcardClass21 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(genericDeclarationOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Optional[1]" + "'", str20, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional9.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional11 = java.util.Optional.ofNullable(serializableOptional9);
        boolean boolean12 = serializableOptional9.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional14.stream();
        boolean boolean16 = serializableOptional14.isEmpty();
        java.io.Serializable serializable17 = serializableOptional14.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.get();
        java.lang.Class<?> wildcardClass24 = serializableOptional19.getClass();
        java.io.Serializable serializable25 = serializableOptional14.orElse((java.io.Serializable) wildcardClass24);
        boolean boolean26 = serializableOptional9.equals((java.lang.Object) wildcardClass24);
        java.util.Optional<java.io.Serializable> serializableOptional28 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional28.stream();
        java.io.Serializable serializable31 = serializableOptional28.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional28.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional33 = java.util.Optional.ofNullable(serializableStream32);
        java.lang.Class<?> wildcardClass34 = serializableStreamOptional33.getClass();
        java.io.Serializable serializable35 = serializableOptional9.orElse((java.io.Serializable) wildcardClass34);
        java.io.Serializable serializable36 = serializableOptional1.orElse(serializable35);
        java.io.Serializable serializable37 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(serializableOptionalOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableOptional28);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(serializableStreamOptional33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional0);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional1 = java.util.Optional.of((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(strComparableOptional1);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        java.io.Serializable serializable13 = serializableOptional8.orElse((java.io.Serializable) 100L);
        boolean boolean14 = serializableOptional8.isPresent();
        boolean boolean15 = serializableOptional8.isPresent();
        java.io.Serializable serializable16 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional8.stream();
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable19 = serializableOptional8.get();
        boolean boolean20 = serializableOptional8.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.ofNullable((java.io.Serializable) false);
        java.io.Serializable serializable2 = serializableOptional1.orElseThrow();
        java.lang.Class<?> wildcardClass3 = serializable2.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + false + "'", serializable2, false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.util.Optional<java.lang.constant.Constable> constableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(constableOptional0);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        boolean boolean19 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.lang.Class<?> wildcardClass9 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional0 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass1 = charSequenceOptional0.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional2 = java.util.Optional.ofNullable(wildcardClass1);
        org.junit.Assert.assertNotNull(charSequenceOptional0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClassOptional2);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.lang.String str10 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream11);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional9 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean10 = serializableOptional1.isPresent();
        boolean boolean11 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        java.io.Serializable serializable14 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional17.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional21 = java.util.Optional.empty();
        boolean boolean22 = serializableOptional17.equals((java.lang.Object) strComparableOptional21);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        java.io.Serializable serializable27 = serializableOptional24.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional24.stream();
        boolean boolean29 = serializableOptional17.equals((java.lang.Object) serializableStream28);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        java.lang.Class<?> wildcardClass33 = serializableStream32.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional34 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass33);
        java.io.Serializable serializable35 = serializableOptional17.orElse((java.io.Serializable) wildcardClass33);
        java.io.Serializable serializable36 = serializableOptional1.orElse(serializable35);
        boolean boolean37 = serializableOptional1.isEmpty();
        boolean boolean38 = serializableOptional1.isEmpty();
        boolean boolean39 = serializableOptional1.isEmpty();
        java.lang.Class<?> wildcardClass40 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(strComparableOptional21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeOptional34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        boolean boolean29 = serializableOptional14.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream30 = serializableOptional14.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(serializableStream30);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        java.lang.String str4 = serializableOptional1.toString();
        java.lang.String str5 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[1]" + "'", str4, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        boolean boolean11 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable11 = serializableOptional10.get();
        java.io.Serializable serializable12 = serializableOptional10.get();
        java.io.Serializable serializable13 = serializableOptional10.get();
        boolean boolean14 = serializableOptional10.isEmpty();
        java.lang.String str15 = serializableOptional10.toString();
        java.lang.Class<?> wildcardClass16 = serializableOptional10.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional17 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass16);
        java.io.Serializable serializable18 = serializableOptional1.orElse((java.io.Serializable) wildcardClass16);
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean22 = serializableOptional20.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional20.stream();
        java.io.Serializable serializable24 = serializableOptional20.get();
        java.lang.Class<?> wildcardClass25 = serializableOptional20.getClass();
        boolean boolean26 = serializableOptional1.equals((java.lang.Object) serializableOptional20);
        java.io.Serializable serializable27 = serializableOptional20.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(constableOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional9.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional9.stream();
        java.io.Serializable serializable13 = serializableOptional9.get();
        boolean boolean14 = serializableOptional7.equals((java.lang.Object) serializableOptional9);
        java.lang.Class<?> wildcardClass15 = serializableOptional7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        java.lang.String str4 = serializableOptional1.toString();
        boolean boolean5 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[1]" + "'", str4, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.lang.Object> objOptional6 = java.util.Optional.of((java.lang.Object) serializableOptional1);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional8.stream();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional17.stream();
        boolean boolean19 = serializableOptional17.isEmpty();
        java.lang.Class<?> wildcardClass20 = serializableOptional17.getClass();
        java.io.Serializable serializable21 = serializableOptional8.orElse((java.io.Serializable) wildcardClass20);
        java.io.Serializable serializable22 = serializableOptional1.orElse(serializable21);
        java.io.Serializable serializable23 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(objOptional6);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass3 = serializableStream2.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional4 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass3);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional5 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass3);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional6 = java.util.Optional.ofNullable(wildcardClass3);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass3);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass3);
        java.io.Serializable serializable9 = serializableOptional8.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeOptional4);
        org.junit.Assert.assertNotNull(annotatedElementOptional5);
        org.junit.Assert.assertNotNull(wildcardClassOptional6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializable9);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.io.Serializable serializable19 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional7.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable11 = serializableOptional7.orElse((java.io.Serializable) '#');
        java.lang.String str12 = serializableOptional7.toString();
        boolean boolean13 = serializableOptional7.isEmpty();
        java.io.Serializable serializable14 = serializableOptional7.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable17 = serializableOptional16.get();
        java.io.Serializable serializable18 = serializableOptional16.get();
        java.io.Serializable serializable19 = serializableOptional16.get();
        boolean boolean20 = serializableOptional16.isEmpty();
        java.io.Serializable serializable21 = serializableOptional16.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional16.stream();
        java.lang.Class<?> wildcardClass23 = serializableStream22.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional24 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass23);
        java.io.Serializable serializable25 = serializableOptional7.orElse((java.io.Serializable) wildcardClass23);
        java.io.Serializable serializable26 = serializableOptional1.orElse(serializable25);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(genericDeclarationOptional24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.lang.String str13 = serializableOptional8.toString();
        java.lang.Class<?> wildcardClass14 = serializableOptional8.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional15 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass14);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.ofNullable(serializable16);
        java.io.Serializable serializable18 = serializableOptional17.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional1 = java.util.Optional.of((java.lang.Comparable<java.lang.String>) "Optional[1]");
        org.junit.Assert.assertNotNull(strComparableOptional1);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional8 = java.util.Optional.ofNullable(serializableStream7);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional9 = java.util.Optional.of((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream7);
        java.lang.Class<?> wildcardClass10 = serializableBaseStreamOptional9.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStreamOptional8);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional1 = java.util.Optional.ofNullable((java.lang.Comparable<java.lang.String>) "Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(strComparableOptional1);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass15 = serializableStream14.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional16 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.io.Serializable serializable18 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        boolean boolean19 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean24 = serializableOptional22.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable26 = serializableOptional22.orElse((java.io.Serializable) '#');
        java.lang.String str27 = serializableOptional22.toString();
        java.util.Optional<java.io.Serializable> serializableOptional29 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean30 = serializableOptional29.isPresent();
        java.io.Serializable serializable32 = serializableOptional29.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable33 = serializableOptional29.get();
        java.lang.String str34 = serializableOptional29.toString();
        java.lang.Class<?> wildcardClass35 = serializableOptional29.getClass();
        java.io.Serializable serializable36 = serializableOptional22.orElse((java.io.Serializable) wildcardClass35);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional37 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass35);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional38 = java.util.Optional.of(wildcardClass35);
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass35);
        java.util.Optional<java.io.Serializable> serializableOptional41 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean42 = serializableOptional41.isPresent();
        java.io.Serializable serializable44 = serializableOptional41.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable45 = serializableOptional41.get();
        java.lang.String str46 = serializableOptional41.toString();
        java.io.Serializable serializable47 = serializableOptional41.orElseThrow();
        java.util.Optional<java.lang.constant.Constable> constableOptional49 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass50 = constableOptional49.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional51 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass50);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional52 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass50);
        java.io.Serializable serializable53 = serializableOptional41.orElse((java.io.Serializable) wildcardClass50);
        boolean boolean54 = serializableOptional39.equals((java.lang.Object) wildcardClass50);
        java.io.Serializable serializable55 = serializableOptional1.orElse((java.io.Serializable) boolean54);
        java.util.Optional<java.io.Serializable> serializableOptional57 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean59 = serializableOptional57.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream60 = serializableOptional57.stream();
        java.io.Serializable serializable61 = serializableOptional57.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream62 = serializableOptional57.stream();
        java.lang.Class<?> wildcardClass63 = serializableStream62.getClass();
        java.io.Serializable serializable64 = serializableOptional1.orElse((java.io.Serializable) wildcardClass63);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeDescriptorOptional16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Optional[1]" + "'", str34, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional37);
        org.junit.Assert.assertNotNull(wildcardClassOptional38);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertNotNull(serializableOptional41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Optional[1]" + "'", str46, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertNotNull(constableOptional49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeOptional51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional52);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (byte) 1 + "'", serializable53, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (byte) 1 + "'", serializable55, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(serializableStream60);
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (byte) 1 + "'", serializable61, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (byte) 1 + "'", serializable64, (byte) 1);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = null;
        java.io.Serializable serializable7 = serializableOptional1.orElse(serializable6);
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.String str16 = serializableOptional11.toString();
        java.io.Serializable serializable17 = serializableOptional11.orElseThrow();
        java.io.Serializable serializable18 = serializableOptional11.orElseThrow();
        boolean boolean19 = serializableOptional11.isEmpty();
        java.io.Serializable serializable20 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass21 = serializable20.getClass();
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass21);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.get();
        boolean boolean11 = serializableOptional1.isPresent();
        java.io.Serializable serializable12 = null;
        java.io.Serializable serializable13 = serializableOptional1.orElse(serializable12);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        java.io.Serializable serializable20 = serializableOptional15.orElse((java.io.Serializable) 100L);
        boolean boolean21 = serializableOptional15.isPresent();
        boolean boolean22 = serializableOptional15.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        java.io.Serializable serializable27 = serializableOptional24.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable28 = serializableOptional24.get();
        boolean boolean29 = serializableOptional24.isPresent();
        boolean boolean30 = serializableOptional15.equals((java.lang.Object) serializableOptional24);
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional15.stream();
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean35 = serializableOptional33.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable37 = serializableOptional33.orElse((java.io.Serializable) '#');
        java.lang.String str38 = serializableOptional33.toString();
        java.lang.Class<?> wildcardClass39 = serializableOptional33.getClass();
        java.io.Serializable serializable40 = serializableOptional15.orElse((java.io.Serializable) wildcardClass39);
        boolean boolean41 = serializableOptional1.equals((java.lang.Object) wildcardClass39);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Optional[1]" + "'", str38, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(strComparableOptional0);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        java.lang.Class<?> wildcardClass8 = serializableStream7.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional9 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass8);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional10 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass8);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional11 = java.util.Optional.ofNullable(wildcardClass8);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional12 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass8);
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) wildcardClass8);
        java.lang.String str14 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeOptional9);
        org.junit.Assert.assertNotNull(annotatedElementOptional10);
        org.junit.Assert.assertNotNull(wildcardClassOptional11);
        org.junit.Assert.assertNotNull(genericDeclarationOptional12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.get();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional7.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional7.stream();
        java.io.Serializable serializable11 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable12 = serializableOptional7.orElseThrow();
        java.lang.Class<?> wildcardClass13 = serializable12.getClass();
        java.io.Serializable serializable14 = serializableOptional1.orElse((java.io.Serializable) wildcardClass13);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional16 = java.util.Optional.of(serializableStream15);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(serializableStreamOptional16);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.lang.String str10 = serializableOptional1.toString();
        java.io.Serializable serializable11 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional11 = java.util.Optional.of(serializableOptional8);
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional14 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass13);
        java.io.Serializable serializable15 = serializableOptional8.orElse((java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass13);
        java.util.Optional<java.lang.reflect.Type> typeOptional17 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass13);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional18 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass13);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationOptional14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(typeOptional17);
        org.junit.Assert.assertNotNull(typeDescriptorOptional18);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) "hi!");
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        boolean boolean13 = serializableOptional11.isEmpty();
        java.io.Serializable serializable14 = serializableOptional11.orElseThrow();
        boolean boolean15 = serializableOptional11.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean18 = serializableOptional17.isPresent();
        java.io.Serializable serializable19 = serializableOptional17.orElseThrow();
        java.io.Serializable serializable20 = serializableOptional17.orElseThrow();
        boolean boolean21 = serializableOptional17.isEmpty();
        boolean boolean22 = serializableOptional11.equals((java.lang.Object) serializableOptional17);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional17.stream();
        boolean boolean24 = serializableOptional1.equals((java.lang.Object) serializableStream23);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional0);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable9 = serializableOptional7.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        boolean boolean16 = serializableOptional7.equals((java.lang.Object) serializableOptional11);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional7.stream();
        java.lang.Class<?> wildcardClass19 = serializableStream18.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.util.Optional<java.lang.reflect.Type> typeOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(typeOptional0);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        boolean boolean4 = serializableOptional1.isPresent();
        java.io.Serializable serializable5 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass9 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional0);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean16 = serializableOptional1.isEmpty();
        java.io.Serializable serializable17 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable20 = serializableOptional19.get();
        java.io.Serializable serializable21 = serializableOptional19.get();
        java.io.Serializable serializable22 = serializableOptional19.get();
        boolean boolean23 = serializableOptional19.isEmpty();
        java.io.Serializable serializable24 = serializableOptional19.orElseThrow();
        boolean boolean26 = serializableOptional19.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable27 = serializableOptional19.orElseThrow();
        java.io.Serializable serializable28 = serializableOptional19.get();
        java.lang.Class<?> wildcardClass29 = serializableOptional19.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional30 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass29);
        java.lang.Class<?> wildcardClass31 = serializableOptional30.getClass();
        java.io.Serializable serializable32 = serializableOptional1.orElse((java.io.Serializable) wildcardClass31);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(serializableOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        java.lang.String str4 = serializableOptional1.toString();
        boolean boolean5 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[1]" + "'", str4, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional19.stream();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable27 = serializableOptional26.get();
        java.io.Serializable serializable28 = serializableOptional26.get();
        java.io.Serializable serializable29 = serializableOptional26.get();
        java.io.Serializable serializable31 = serializableOptional26.orElse((java.io.Serializable) 100L);
        boolean boolean32 = serializableOptional26.isPresent();
        boolean boolean33 = serializableOptional26.isPresent();
        java.io.Serializable serializable34 = serializableOptional26.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional26.stream();
        boolean boolean36 = serializableOptional19.equals((java.lang.Object) serializableOptional26);
        boolean boolean37 = serializableOptional26.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable40 = serializableOptional39.get();
        java.io.Serializable serializable41 = serializableOptional39.get();
        java.io.Serializable serializable42 = serializableOptional39.get();
        boolean boolean43 = serializableOptional39.isEmpty();
        java.io.Serializable serializable44 = serializableOptional39.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream45 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream46 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional39.stream();
        boolean boolean48 = serializableOptional26.equals((java.lang.Object) serializableStream47);
        boolean boolean49 = serializableOptional10.equals((java.lang.Object) serializableOptional26);
        java.io.Serializable serializable50 = serializableOptional26.orElseThrow();
        boolean boolean51 = serializableOptional26.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream45);
        org.junit.Assert.assertNotNull(serializableStream46);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        boolean boolean10 = serializableOptional7.equals((java.lang.Object) false);
        java.lang.String str11 = serializableOptional7.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional7.stream();
        java.io.Serializable serializable13 = serializableOptional7.orElseThrow();
        boolean boolean14 = serializableOptional7.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        boolean boolean16 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        java.io.Serializable serializable21 = serializableOptional18.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional18.stream();
        java.lang.Class<?> wildcardClass23 = serializableStream22.getClass();
        java.io.Serializable serializable24 = serializableOptional1.orElse((java.io.Serializable) wildcardClass23);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        java.util.stream.Stream<java.io.Serializable> serializableStream1 = serializableOptional0.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable2 = serializableOptional0.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertNotNull(serializableStream1);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass6);
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional12.stream();
        java.lang.Class<?> wildcardClass14 = serializableStream13.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional15 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass14);
        boolean boolean16 = serializableOptional10.equals((java.lang.Object) wildcardClass14);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass14);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional18 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass14);
        java.util.Optional<java.lang.reflect.Type> typeOptional19 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass14);
        java.io.Serializable serializable20 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeOptional15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertNotNull(annotatedElementOptional18);
        org.junit.Assert.assertNotNull(typeOptional19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.lang.String str9 = serializableOptional1.toString();
        java.io.Serializable serializable10 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(autoCloseableOptional0);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable16 = serializableOptional11.orElse((java.io.Serializable) "");
        java.io.Serializable serializable17 = serializableOptional11.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional19.stream();
        java.io.Serializable serializable22 = serializableOptional19.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional19.stream();
        java.lang.String str24 = serializableOptional19.toString();
        java.io.Serializable serializable25 = serializableOptional19.get();
        boolean boolean26 = serializableOptional11.equals((java.lang.Object) serializable25);
        java.lang.Class<?> wildcardClass27 = serializableOptional11.getClass();
        boolean boolean28 = serializableOptional1.equals((java.lang.Object) wildcardClass27);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Optional[1]" + "'", str24, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        java.util.Optional<java.io.Serializable> serializableOptional5 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean6 = serializableOptional5.isPresent();
        java.io.Serializable serializable8 = serializableOptional5.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable9 = serializableOptional5.get();
        java.lang.String str10 = serializableOptional5.toString();
        java.io.Serializable serializable11 = serializableOptional5.orElseThrow();
        java.io.Serializable serializable12 = serializableOptional5.orElseThrow();
        boolean boolean13 = serializableOptional5.isEmpty();
        java.io.Serializable serializable14 = serializableOptional5.get();
        java.lang.Class<?> wildcardClass15 = serializable14.getClass();
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean20 = serializableOptional18.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional18.stream();
        java.lang.Class<?> wildcardClass22 = serializableOptional18.getClass();
        java.io.Serializable serializable23 = serializableOptional1.orElse((java.io.Serializable) wildcardClass22);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertNotNull(serializableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.io.Serializable serializable11 = serializableOptional9.get();
        java.io.Serializable serializable12 = serializableOptional9.get();
        boolean boolean13 = serializableOptional9.isPresent();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional9);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable17 = serializableOptional16.get();
        java.io.Serializable serializable18 = serializableOptional16.get();
        java.io.Serializable serializable19 = serializableOptional16.get();
        boolean boolean20 = serializableOptional16.isEmpty();
        java.lang.String str21 = serializableOptional16.toString();
        boolean boolean22 = serializableOptional16.isPresent();
        boolean boolean24 = serializableOptional16.equals((java.lang.Object) (short) 0);
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable27 = serializableOptional26.get();
        java.io.Serializable serializable28 = serializableOptional26.get();
        java.io.Serializable serializable29 = serializableOptional26.get();
        boolean boolean30 = serializableOptional26.isEmpty();
        java.io.Serializable serializable31 = serializableOptional26.get();
        boolean boolean32 = serializableOptional16.equals((java.lang.Object) serializableOptional26);
        boolean boolean33 = serializableOptional26.isPresent();
        boolean boolean34 = serializableOptional9.equals((java.lang.Object) boolean33);
        boolean boolean35 = serializableOptional9.isPresent();
        java.lang.Class<?> wildcardClass36 = serializableOptional9.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Optional[1]" + "'", str21, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.lang.Object> objOptional9 = java.util.Optional.of((java.lang.Object) serializableStream8);
        java.lang.Class<?> wildcardClass10 = objOptional9.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(objOptional9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(strComparableOptional0);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.String str8 = serializableOptional1.toString();
        java.io.Serializable serializable9 = null;
        java.io.Serializable serializable10 = serializableOptional1.orElse(serializable9);
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable13 = serializableOptional12.get();
        java.io.Serializable serializable14 = serializableOptional12.get();
        java.io.Serializable serializable15 = serializableOptional12.get();
        boolean boolean16 = serializableOptional12.isEmpty();
        java.io.Serializable serializable17 = serializableOptional12.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional12.stream();
        java.lang.Class<?> wildcardClass19 = serializableStream18.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional20 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass19);
        java.io.Serializable serializable21 = serializableOptional1.orElse((java.io.Serializable) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeDescriptorOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional7 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass6);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional8 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional7);
        org.junit.Assert.assertNotNull(genericDeclarationOptional8);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional7 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(autoCloseableOptional7);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.util.Optional<java.lang.Object> objOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(objOptional0);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional6 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.lang.Class<?> wildcardClass9 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean21 = serializableOptional18.equals((java.lang.Object) false);
        java.lang.String str22 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) serializableOptional18);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional8.stream();
        java.util.Optional<java.io.Serializable> serializableOptional27 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable28 = serializableOptional27.get();
        java.io.Serializable serializable29 = serializableOptional27.get();
        boolean boolean30 = serializableOptional27.isPresent();
        java.io.Serializable serializable31 = serializableOptional27.get();
        boolean boolean32 = serializableOptional27.isPresent();
        boolean boolean33 = serializableOptional27.isPresent();
        boolean boolean34 = serializableOptional8.equals((java.lang.Object) boolean33);
        java.io.Serializable serializable35 = serializableOptional8.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertNotNull(serializableOptional27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.io.Serializable serializable7 = serializableOptional1.get();
        boolean boolean8 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable26 = serializableOptional21.orElse((java.io.Serializable) "");
        boolean boolean27 = serializableOptional21.isPresent();
        boolean boolean28 = serializableOptional1.equals((java.lang.Object) serializableOptional21);
        java.util.Optional<java.lang.Object> objOptional29 = java.util.Optional.of((java.lang.Object) serializableOptional1);
        boolean boolean30 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objOptional29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.ofNullable((java.io.Serializable) 10.0f);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        boolean boolean4 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional8 = java.util.Optional.ofNullable(serializableOptional6);
        boolean boolean9 = serializableOptional6.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        boolean boolean13 = serializableOptional11.isEmpty();
        java.io.Serializable serializable14 = serializableOptional11.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean18 = serializableOptional16.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional16.stream();
        java.io.Serializable serializable20 = serializableOptional16.get();
        java.lang.Class<?> wildcardClass21 = serializableOptional16.getClass();
        java.io.Serializable serializable22 = serializableOptional11.orElse((java.io.Serializable) wildcardClass21);
        boolean boolean23 = serializableOptional6.equals((java.lang.Object) wildcardClass21);
        java.util.Optional<java.io.Serializable> serializableOptional25 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream26 = serializableOptional25.stream();
        java.io.Serializable serializable28 = serializableOptional25.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional25.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional30 = java.util.Optional.ofNullable(serializableStream29);
        java.lang.Class<?> wildcardClass31 = serializableStreamOptional30.getClass();
        java.io.Serializable serializable32 = serializableOptional6.orElse((java.io.Serializable) wildcardClass31);
        boolean boolean33 = serializableOptional6.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional6.stream();
        boolean boolean35 = serializableOptional1.equals((java.lang.Object) serializableOptional6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + 10.0f + "'", serializable2, 10.0f);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[10.0]" + "'", str3, "Optional[10.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableOptionalOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableOptional25);
        org.junit.Assert.assertNotNull(serializableStream26);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertNotNull(serializableStreamOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        java.util.Optional<java.lang.Object> objOptional11 = java.util.Optional.ofNullable((java.lang.Object) serializableOptional1);
        java.util.Optional<java.lang.Object> objOptional12 = java.util.Optional.of((java.lang.Object) serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(objOptional11);
        org.junit.Assert.assertNotNull(objOptional12);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        java.util.Optional<java.lang.constant.Constable> constableOptional29 = java.util.Optional.empty();
        boolean boolean30 = serializableOptional7.equals((java.lang.Object) constableOptional29);
        boolean boolean31 = serializableOptional7.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable34 = serializableOptional33.get();
        java.lang.String str35 = serializableOptional33.toString();
        java.lang.String str36 = serializableOptional33.toString();
        boolean boolean37 = serializableOptional7.equals((java.lang.Object) str36);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(constableOptional29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Optional[1]" + "'", str35, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Optional[1]" + "'", str36, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.lang.String str11 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(wildcardClassOptional0);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        java.io.Serializable serializable13 = serializableOptional8.orElse((java.io.Serializable) 100L);
        boolean boolean14 = serializableOptional8.isPresent();
        boolean boolean15 = serializableOptional8.isPresent();
        java.io.Serializable serializable16 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional8.stream();
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean19 = serializableOptional8.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable22 = serializableOptional21.get();
        java.io.Serializable serializable23 = serializableOptional21.get();
        java.io.Serializable serializable24 = serializableOptional21.get();
        boolean boolean25 = serializableOptional21.isEmpty();
        java.io.Serializable serializable26 = serializableOptional21.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional21.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional21.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional21.stream();
        boolean boolean30 = serializableOptional8.equals((java.lang.Object) serializableStream29);
        boolean boolean31 = serializableOptional8.isEmpty();
        java.io.Serializable serializable32 = serializableOptional8.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.of("Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional5 = java.util.Optional.ofNullable((java.lang.AutoCloseable) serializableStream4);
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional6 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(autoCloseableOptional5);
        org.junit.Assert.assertNotNull(autoCloseableOptional6);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional4 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean5 = serializableOptional4.isPresent();
        java.io.Serializable serializable7 = serializableOptional4.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable8 = serializableOptional4.get();
        java.lang.String str9 = serializableOptional4.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional4.stream();
        java.io.Serializable serializable11 = serializableOptional4.orElseThrow();
        java.io.Serializable serializable12 = serializableOptional4.get();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableOptional4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(serializableOptional4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional10.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional10.stream();
        java.lang.String str14 = serializableOptional10.toString();
        java.lang.Class<?> wildcardClass15 = serializableOptional10.getClass();
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        boolean boolean17 = serializableOptional1.isPresent();
        boolean boolean18 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional22.stream();
        java.lang.Class<?> wildcardClass24 = serializableStream23.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional25 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass24);
        boolean boolean26 = serializableOptional20.equals((java.lang.Object) wildcardClass24);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional27 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass24);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional28 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass24);
        java.io.Serializable serializable29 = serializableOptional1.orElse((java.io.Serializable) wildcardClass24);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeOptional25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional27);
        org.junit.Assert.assertNotNull(annotatedElementOptional28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.lang.String str11 = serializableOptional9.toString();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional12 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass13 = strComparableOptional12.getClass();
        java.io.Serializable serializable14 = serializableOptional9.orElse((java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = serializableOptional1.orElse(serializable14);
        java.io.Serializable serializable16 = serializableOptional1.get();
        java.io.Serializable serializable17 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional19.stream();
        java.io.Serializable serializable21 = serializableOptional19.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional22 = java.util.Optional.of(serializableOptional19);
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional25 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass24);
        java.io.Serializable serializable26 = serializableOptional19.orElse((java.io.Serializable) wildcardClass24);
        java.io.Serializable serializable27 = serializableOptional19.get();
        boolean boolean28 = serializableOptional1.equals((java.lang.Object) serializableOptional19);
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
        org.junit.Assert.assertNotNull(strComparableOptional12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(genericDeclarationOptional25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(serializableStream29);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        boolean boolean10 = serializableOptional6.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional12.isPresent();
        java.io.Serializable serializable14 = serializableOptional12.orElseThrow();
        java.io.Serializable serializable15 = serializableOptional12.orElseThrow();
        boolean boolean16 = serializableOptional12.isEmpty();
        boolean boolean17 = serializableOptional6.equals((java.lang.Object) serializableOptional12);
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional23 = java.util.Optional.empty();
        boolean boolean24 = serializableOptional19.equals((java.lang.Object) strComparableOptional23);
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional26.stream();
        java.io.Serializable serializable29 = serializableOptional26.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream30 = serializableOptional26.stream();
        boolean boolean31 = serializableOptional19.equals((java.lang.Object) serializableStream30);
        java.lang.String str32 = serializableOptional19.toString();
        boolean boolean33 = serializableOptional12.equals((java.lang.Object) serializableOptional19);
        boolean boolean34 = serializableOptional12.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional36 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean38 = serializableOptional36.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable40 = serializableOptional36.orElse((java.io.Serializable) '#');
        java.lang.String str41 = serializableOptional36.toString();
        boolean boolean42 = serializableOptional36.isEmpty();
        java.lang.Class<?> wildcardClass43 = serializableOptional36.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional44 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass43);
        java.util.Optional<java.lang.constant.Constable> constableOptional45 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass43);
        java.io.Serializable serializable46 = serializableOptional12.orElse((java.io.Serializable) wildcardClass43);
        java.io.Serializable serializable47 = serializableOptional1.orElse(serializable46);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(strComparableOptional23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Optional[1]" + "'", str32, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(serializableOptional36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Optional[1]" + "'", str41, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional44);
        org.junit.Assert.assertNotNull(constableOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        boolean boolean19 = serializableOptional15.isEmpty();
        java.io.Serializable serializable20 = serializableOptional15.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional15.stream();
        java.lang.Class<?> wildcardClass22 = serializableStream21.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional23 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass22);
        java.io.Serializable serializable24 = serializableOptional1.orElse((java.io.Serializable) wildcardClass22);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional27 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional27.stream();
        java.io.Serializable serializable30 = serializableOptional27.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable31 = serializableOptional27.get();
        boolean boolean32 = serializableOptional27.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableOptional27.stream();
        java.io.Serializable serializable34 = serializableOptional27.orElseThrow();
        java.lang.String str35 = serializableOptional27.toString();
        boolean boolean36 = serializableOptional1.equals((java.lang.Object) serializableOptional27);
        java.util.Optional<java.io.Serializable> serializableOptional38 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable39 = serializableOptional38.get();
        java.io.Serializable serializable40 = serializableOptional38.get();
        java.io.Serializable serializable41 = serializableOptional38.get();
        boolean boolean42 = serializableOptional38.isEmpty();
        java.lang.String str43 = serializableOptional38.toString();
        java.lang.Class<?> wildcardClass44 = serializableOptional38.getClass();
        java.io.Serializable serializable45 = serializableOptional27.orElse((java.io.Serializable) wildcardClass44);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional46 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass44);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(genericDeclarationOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertNotNull(serializableOptional27);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Optional[1]" + "'", str35, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(serializableOptional38);
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (byte) 1 + "'", serializable39, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Optional[1]" + "'", str43, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional46);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable9 = serializableOptional7.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        boolean boolean16 = serializableOptional7.equals((java.lang.Object) serializableOptional11);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional19.stream();
        boolean boolean21 = serializableOptional19.isEmpty();
        java.io.Serializable serializable22 = serializableOptional19.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional19.stream();
        java.io.Serializable serializable24 = serializableOptional19.get();
        boolean boolean25 = serializableOptional1.equals((java.lang.Object) serializableOptional19);
        boolean boolean26 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable10 = serializableOptional7.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable12 = serializableOptional7.orElse((java.io.Serializable) "");
        java.lang.String str13 = serializableOptional7.toString();
        boolean boolean14 = serializableOptional7.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) true);
        java.lang.Class<?> wildcardClass2 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional20.stream();
        java.io.Serializable serializable23 = serializableOptional20.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional20.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional25 = java.util.Optional.ofNullable(serializableStream24);
        java.lang.Class<?> wildcardClass26 = serializableStreamOptional25.getClass();
        java.io.Serializable serializable27 = serializableOptional1.orElse((java.io.Serializable) wildcardClass26);
        java.lang.String str28 = serializableOptional1.toString();
        java.lang.String str29 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableStreamOptional25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Optional[1]" + "'", str28, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Optional[1]" + "'", str29, "Optional[1]");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        boolean boolean14 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean17 = serializableOptional16.isPresent();
        java.io.Serializable serializable19 = serializableOptional16.orElse((java.io.Serializable) (byte) 10);
        boolean boolean20 = serializableOptional16.isPresent();
        java.io.Serializable serializable22 = serializableOptional16.orElse((java.io.Serializable) (-1L));
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean26 = serializableOptional24.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional24.stream();
        java.io.Serializable serializable28 = serializableOptional24.get();
        boolean boolean29 = serializableOptional24.isPresent();
        boolean boolean30 = serializableOptional24.isEmpty();
        boolean boolean31 = serializableOptional16.equals((java.lang.Object) boolean30);
        java.lang.String str32 = serializableOptional16.toString();
        boolean boolean33 = serializableOptional1.equals((java.lang.Object) serializableOptional16);
        java.lang.String str34 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Optional[1]" + "'", str32, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Optional[1]" + "'", str34, "Optional[1]");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.lang.String str11 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.lang.String str9 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.lang.String str16 = serializableOptional11.toString();
        java.lang.Class<?> wildcardClass17 = serializableOptional11.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional18 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass17);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) constableOptional18);
        boolean boolean20 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(constableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.util.Optional<java.lang.constant.Constable> constableOptional9 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass10 = constableOptional9.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional11 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass10);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional12 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass10);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass10);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        boolean boolean19 = serializableOptional15.isEmpty();
        java.io.Serializable serializable20 = serializableOptional15.orElseThrow();
        boolean boolean22 = serializableOptional15.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable23 = serializableOptional15.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional15.stream();
        java.io.Serializable serializable25 = serializableOptional15.get();
        java.lang.Class<?> wildcardClass26 = serializableOptional15.getClass();
        java.io.Serializable serializable27 = serializableOptional1.orElse((java.io.Serializable) wildcardClass26);
        java.util.Optional<java.io.Serializable> serializableOptional29 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean31 = serializableOptional29.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable33 = serializableOptional29.orElse((java.io.Serializable) '#');
        java.lang.String str34 = serializableOptional29.toString();
        boolean boolean35 = serializableOptional29.isEmpty();
        java.lang.Class<?> wildcardClass36 = serializableOptional29.getClass();
        java.io.Serializable serializable37 = serializableOptional1.orElse((java.io.Serializable) wildcardClass36);
        java.lang.String str38 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(constableOptional9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(typeOptional11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Optional[1]" + "'", str34, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Optional[1]" + "'", str38, "Optional[1]");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.of("");
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        boolean boolean19 = serializableOptional15.isEmpty();
        java.io.Serializable serializable20 = serializableOptional15.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional15.stream();
        java.lang.Class<?> wildcardClass22 = serializableStream21.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional23 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass22);
        java.io.Serializable serializable24 = serializableOptional1.orElse((java.io.Serializable) wildcardClass22);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional27 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional27.stream();
        java.io.Serializable serializable30 = serializableOptional27.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable31 = serializableOptional27.get();
        boolean boolean32 = serializableOptional27.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableOptional27.stream();
        java.io.Serializable serializable34 = serializableOptional27.orElseThrow();
        java.lang.String str35 = serializableOptional27.toString();
        boolean boolean36 = serializableOptional1.equals((java.lang.Object) serializableOptional27);
        boolean boolean37 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional41 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream42 = serializableOptional41.stream();
        java.lang.Class<?> wildcardClass43 = serializableStream42.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional44 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass43);
        boolean boolean45 = serializableOptional39.equals((java.lang.Object) wildcardClass43);
        java.io.Serializable serializable46 = serializableOptional1.orElse((java.io.Serializable) wildcardClass43);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(genericDeclarationOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertNotNull(serializableOptional27);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Optional[1]" + "'", str35, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertNotNull(serializableOptional41);
        org.junit.Assert.assertNotNull(serializableStream42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeOptional44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable11 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (-1L));
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass6);
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional9 = java.util.Optional.ofNullable(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClassOptional9);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional7 = java.util.Optional.of(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptionalOptional7);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        boolean boolean18 = serializableOptional11.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable19 = serializableOptional11.orElseThrow();
        java.io.Serializable serializable20 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass21 = serializableOptional11.getClass();
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass21);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable4 = serializableOptional3.get();
        java.io.Serializable serializable5 = serializableOptional3.get();
        java.io.Serializable serializable6 = serializableOptional3.get();
        boolean boolean7 = serializableOptional3.isEmpty();
        java.io.Serializable serializable8 = serializableOptional3.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional3.stream();
        boolean boolean10 = serializableOptional1.equals((java.lang.Object) serializableOptional3);
        boolean boolean11 = serializableOptional3.isPresent();
        boolean boolean12 = serializableOptional3.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        java.io.Serializable serializable11 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional11 = java.util.Optional.of(serializableOptional8);
        boolean boolean12 = serializableOptional8.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.lang.Class<?> wildcardClass18 = serializableStream17.getClass();
        java.io.Serializable serializable19 = serializableOptional8.orElse((java.io.Serializable) wildcardClass18);
        java.io.Serializable serializable20 = serializableOptional1.orElse(serializable19);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.lang.Class<?> wildcardClass10 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.ofNullable("Optional[1]");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        java.io.Serializable serializable29 = serializableOptional7.get();
        java.io.Serializable serializable30 = serializableOptional7.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(strComparableOptional0);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.ofNullable((java.lang.constant.ConstantDesc) 10);
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = null;
        java.io.Serializable serializable8 = serializableOptional1.orElse(serializable7);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        java.io.Serializable serializable14 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional17.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional21 = java.util.Optional.empty();
        boolean boolean22 = serializableOptional17.equals((java.lang.Object) strComparableOptional21);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        java.io.Serializable serializable27 = serializableOptional24.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional24.stream();
        boolean boolean29 = serializableOptional17.equals((java.lang.Object) serializableStream28);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        java.lang.Class<?> wildcardClass33 = serializableStream32.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional34 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass33);
        java.io.Serializable serializable35 = serializableOptional17.orElse((java.io.Serializable) wildcardClass33);
        java.io.Serializable serializable36 = serializableOptional1.orElse(serializable35);
        boolean boolean37 = serializableOptional1.isEmpty();
        boolean boolean38 = serializableOptional1.isEmpty();
        boolean boolean39 = serializableOptional1.isEmpty();
        java.io.Serializable serializable40 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional42 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean43 = serializableOptional42.isPresent();
        java.io.Serializable serializable45 = serializableOptional42.orElse((java.io.Serializable) (byte) 10);
        boolean boolean46 = serializableOptional42.isPresent();
        java.io.Serializable serializable47 = serializableOptional42.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional49 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable50 = serializableOptional49.get();
        java.io.Serializable serializable51 = serializableOptional49.get();
        java.io.Serializable serializable52 = serializableOptional49.get();
        boolean boolean53 = serializableOptional49.isEmpty();
        java.lang.String str54 = serializableOptional49.toString();
        java.lang.Class<?> wildcardClass55 = serializableOptional49.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional56 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass55);
        java.io.Serializable serializable57 = serializableOptional42.orElse((java.io.Serializable) wildcardClass55);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional58 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass55);
        boolean boolean59 = serializableOptional1.equals((java.lang.Object) annotatedElementOptional58);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(strComparableOptional21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeOptional34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (byte) 1 + "'", serializable51, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (byte) 1 + "'", serializable52, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Optional[1]" + "'", str54, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(constableOptional56);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (byte) 1 + "'", serializable57, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.of((java.lang.constant.ConstantDesc) 1.0f);
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        boolean boolean14 = serializableOptional1.isPresent();
        java.io.Serializable serializable15 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) (-1.0d));
        java.util.Optional<java.io.Serializable> serializableOptional13 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional15.stream();
        java.lang.Class<?> wildcardClass17 = serializableStream16.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional18 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass17);
        boolean boolean19 = serializableOptional13.equals((java.lang.Object) wildcardClass17);
        java.io.Serializable serializable20 = serializableOptional13.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional13.stream();
        java.lang.Class<?> wildcardClass22 = serializableStream21.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional23 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass22);
        java.io.Serializable serializable24 = serializableOptional1.orElse((java.io.Serializable) wildcardClass22);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional13);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(typeOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional12.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional14 = java.util.Optional.ofNullable(serializableOptional12);
        boolean boolean15 = serializableOptional12.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional17.stream();
        boolean boolean19 = serializableOptional17.isEmpty();
        java.io.Serializable serializable20 = serializableOptional17.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean24 = serializableOptional22.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional22.stream();
        java.io.Serializable serializable26 = serializableOptional22.get();
        java.lang.Class<?> wildcardClass27 = serializableOptional22.getClass();
        java.io.Serializable serializable28 = serializableOptional17.orElse((java.io.Serializable) wildcardClass27);
        boolean boolean29 = serializableOptional12.equals((java.lang.Object) wildcardClass27);
        boolean boolean30 = serializableOptional8.equals((java.lang.Object) wildcardClass27);
        boolean boolean31 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional8.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertNotNull(serializableOptionalOptional14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(serializableStream32);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean16 = serializableOptional8.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional1.stream();
        java.io.Serializable serializable12 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.io.Serializable serializable20 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable23 = serializableOptional22.get();
        java.io.Serializable serializable24 = serializableOptional22.get();
        java.io.Serializable serializable25 = serializableOptional22.get();
        boolean boolean26 = serializableOptional22.isEmpty();
        java.io.Serializable serializable27 = serializableOptional22.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional22.stream();
        java.lang.Class<?> wildcardClass29 = serializableStream28.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional30 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass29);
        java.io.Serializable serializable31 = serializableOptional1.orElse((java.io.Serializable) wildcardClass29);
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional33.stream();
        java.lang.Class<?> wildcardClass35 = serializableStream34.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional36 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass35);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional37 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass35);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional38 = java.util.Optional.ofNullable(wildcardClass35);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional39 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass35);
        java.util.Optional<java.io.Serializable> serializableOptional40 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass35);
        java.io.Serializable serializable41 = serializableOptional1.orElse((java.io.Serializable) wildcardClass35);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeDescriptorOptional30);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(typeOptional36);
        org.junit.Assert.assertNotNull(annotatedElementOptional37);
        org.junit.Assert.assertNotNull(wildcardClassOptional38);
        org.junit.Assert.assertNotNull(genericDeclarationOptional39);
        org.junit.Assert.assertNotNull(serializableOptional40);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional5 = java.util.Optional.ofNullable(serializableStream4);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional6 = java.util.Optional.ofNullable(serializableStream4);
        java.lang.Class<?> wildcardClass7 = serializableStream4.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(serializableStreamOptional5);
        org.junit.Assert.assertNotNull(serializableStreamOptional6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable23 = serializableOptional19.orElse((java.io.Serializable) '#');
        java.lang.String str24 = serializableOptional19.toString();
        java.lang.Class<?> wildcardClass25 = serializableOptional19.getClass();
        java.io.Serializable serializable26 = serializableOptional1.orElse((java.io.Serializable) wildcardClass25);
        java.io.Serializable serializable27 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Optional[1]" + "'", str24, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.lang.String str10 = serializableOptional1.toString();
        boolean boolean11 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable15 = serializableOptional11.orElse((java.io.Serializable) '#');
        java.lang.String str16 = serializableOptional11.toString();
        boolean boolean17 = serializableOptional11.isEmpty();
        java.io.Serializable serializable18 = serializableOptional11.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable21 = serializableOptional20.get();
        java.io.Serializable serializable22 = serializableOptional20.get();
        java.io.Serializable serializable23 = serializableOptional20.get();
        boolean boolean24 = serializableOptional20.isEmpty();
        java.io.Serializable serializable25 = serializableOptional20.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream26 = serializableOptional20.stream();
        java.lang.Class<?> wildcardClass27 = serializableStream26.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional28 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass27);
        java.io.Serializable serializable29 = serializableOptional11.orElse((java.io.Serializable) wildcardClass27);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional33 = java.util.Optional.ofNullable(serializableOptional31);
        boolean boolean34 = serializableOptional31.isPresent();
        boolean boolean35 = serializableOptional31.isPresent();
        java.io.Serializable serializable37 = serializableOptional31.orElse((java.io.Serializable) (byte) 100);
        java.io.Serializable serializable38 = serializableOptional31.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional40 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable41 = serializableOptional40.get();
        java.io.Serializable serializable42 = serializableOptional40.get();
        java.io.Serializable serializable43 = serializableOptional40.get();
        java.io.Serializable serializable45 = serializableOptional40.orElse((java.io.Serializable) 100L);
        boolean boolean46 = serializableOptional40.isPresent();
        boolean boolean47 = serializableOptional31.equals((java.lang.Object) serializableOptional40);
        java.io.Serializable serializable48 = serializableOptional31.orElseThrow();
        java.lang.Class<?> wildcardClass49 = serializableOptional31.getClass();
        java.io.Serializable serializable50 = serializableOptional11.orElse((java.io.Serializable) wildcardClass49);
        java.io.Serializable serializable51 = serializableOptional1.orElse((java.io.Serializable) wildcardClass49);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(genericDeclarationOptional28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(serializableOptionalOptional33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (byte) 1 + "'", serializable38, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional40);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (byte) 1 + "'", serializable48, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (byte) 1 + "'", serializable51, (byte) 1);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.lang.String str20 = serializableOptional11.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Optional[1]" + "'", str20, "Optional[1]");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass10 = serializableStream9.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional11 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass10);
        boolean boolean12 = serializableOptional6.equals((java.lang.Object) wildcardClass10);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass10);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(typeOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        boolean boolean6 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.String str8 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional19.stream();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable27 = serializableOptional26.get();
        java.io.Serializable serializable28 = serializableOptional26.get();
        java.io.Serializable serializable29 = serializableOptional26.get();
        java.io.Serializable serializable31 = serializableOptional26.orElse((java.io.Serializable) 100L);
        boolean boolean32 = serializableOptional26.isPresent();
        boolean boolean33 = serializableOptional26.isPresent();
        java.io.Serializable serializable34 = serializableOptional26.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional26.stream();
        boolean boolean36 = serializableOptional19.equals((java.lang.Object) serializableOptional26);
        boolean boolean37 = serializableOptional26.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable40 = serializableOptional39.get();
        java.io.Serializable serializable41 = serializableOptional39.get();
        java.io.Serializable serializable42 = serializableOptional39.get();
        boolean boolean43 = serializableOptional39.isEmpty();
        java.io.Serializable serializable44 = serializableOptional39.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream45 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream46 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional39.stream();
        boolean boolean48 = serializableOptional26.equals((java.lang.Object) serializableStream47);
        boolean boolean49 = serializableOptional10.equals((java.lang.Object) serializableOptional26);
        java.lang.String str50 = serializableOptional26.toString();
        java.util.Optional<java.lang.Object> objOptional51 = java.util.Optional.of((java.lang.Object) serializableOptional26);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream45);
        org.junit.Assert.assertNotNull(serializableStream46);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Optional[1]" + "'", str50, "Optional[1]");
        org.junit.Assert.assertNotNull(objOptional51);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional5 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional5);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.lang.Class<?> wildcardClass7 = serializableOptional1.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional8 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass7);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional9 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass7);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(constableOptional8);
        org.junit.Assert.assertNotNull(annotatedElementOptional9);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean21 = serializableOptional18.equals((java.lang.Object) false);
        java.lang.String str22 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) serializableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional26.stream();
        boolean boolean28 = serializableOptional26.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional26.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream30 = serializableOptional26.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional31 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream30);
        java.lang.Class<?> wildcardClass32 = autoCloseableOptional31.getClass();
        java.io.Serializable serializable33 = serializableOptional18.orElse((java.io.Serializable) wildcardClass32);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertNotNull(serializableStream30);
        org.junit.Assert.assertNotNull(autoCloseableOptional31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable6 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional8.equals((java.lang.Object) 100.0d);
        boolean boolean16 = serializableOptional8.isPresent();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional17 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass18 = strComparableOptional17.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional19 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass18);
        java.io.Serializable serializable20 = serializableOptional8.orElse((java.io.Serializable) wildcardClass18);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional21 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass18);
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass18);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableOptional17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(annotatedElementOptional19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(genericDeclarationOptional21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional14 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream12);
        java.lang.Class<?> wildcardClass15 = serializableStream12.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional16 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass15);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(annotatedElementOptional16);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.orElseThrow();
        java.lang.String str14 = serializableOptional11.toString();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional15 = java.util.Optional.of(serializableOptional11);
        boolean boolean16 = serializableOptional11.isPresent();
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) boolean16);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptionalOptional15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.isEmpty();
        boolean boolean9 = serializableOptional1.isPresent();
        java.lang.Class<?> wildcardClass10 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass3 = serializableStream2.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional4 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass3);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional5 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass3);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional6 = java.util.Optional.ofNullable(wildcardClass3);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass3);
        java.util.Optional<java.lang.constant.Constable> constableOptional8 = java.util.Optional.of((java.lang.constant.Constable) wildcardClass3);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeOptional4);
        org.junit.Assert.assertNotNull(annotatedElementOptional5);
        org.junit.Assert.assertNotNull(wildcardClassOptional6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertNotNull(constableOptional8);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        java.io.Serializable serializable14 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional17.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional21 = java.util.Optional.empty();
        boolean boolean22 = serializableOptional17.equals((java.lang.Object) strComparableOptional21);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        java.io.Serializable serializable27 = serializableOptional24.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional24.stream();
        boolean boolean29 = serializableOptional17.equals((java.lang.Object) serializableStream28);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        java.lang.Class<?> wildcardClass33 = serializableStream32.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional34 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass33);
        java.io.Serializable serializable35 = serializableOptional17.orElse((java.io.Serializable) wildcardClass33);
        java.io.Serializable serializable36 = serializableOptional1.orElse(serializable35);
        boolean boolean37 = serializableOptional1.isEmpty();
        boolean boolean38 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional40 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean42 = serializableOptional40.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable44 = serializableOptional40.orElse((java.io.Serializable) '#');
        java.lang.String str45 = serializableOptional40.toString();
        boolean boolean46 = serializableOptional40.isEmpty();
        java.io.Serializable serializable47 = serializableOptional40.get();
        java.util.Optional<java.io.Serializable> serializableOptional49 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional51 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableOptional51.stream();
        java.lang.Class<?> wildcardClass53 = serializableStream52.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional54 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass53);
        boolean boolean55 = serializableOptional49.equals((java.lang.Object) wildcardClass53);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional56 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass53);
        java.util.Optional<java.lang.constant.Constable> constableOptional57 = java.util.Optional.of((java.lang.constant.Constable) wildcardClass53);
        boolean boolean58 = serializableOptional40.equals((java.lang.Object) wildcardClass53);
        java.io.Serializable serializable59 = serializableOptional1.orElse((java.io.Serializable) wildcardClass53);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional60 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass53);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(strComparableOptional21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeOptional34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(serializableOptional40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Optional[1]" + "'", str45, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional49);
        org.junit.Assert.assertNotNull(serializableOptional51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(typeOptional54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional56);
        org.junit.Assert.assertNotNull(constableOptional57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (byte) 1 + "'", serializable59, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional60);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional7.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional7.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional11 = java.util.Optional.empty();
        boolean boolean12 = serializableOptional7.equals((java.lang.Object) strComparableOptional11);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional14.stream();
        java.io.Serializable serializable17 = serializableOptional14.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional14.stream();
        boolean boolean19 = serializableOptional7.equals((java.lang.Object) serializableStream18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable22 = serializableOptional21.get();
        java.io.Serializable serializable23 = serializableOptional21.get();
        java.io.Serializable serializable24 = serializableOptional21.get();
        boolean boolean25 = serializableOptional21.isEmpty();
        java.io.Serializable serializable26 = serializableOptional21.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional21.stream();
        java.lang.Class<?> wildcardClass28 = serializableStream27.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional29 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass28);
        java.io.Serializable serializable30 = serializableOptional7.orElse((java.io.Serializable) wildcardClass28);
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional7.stream();
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional33.stream();
        java.io.Serializable serializable36 = serializableOptional33.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable37 = serializableOptional33.get();
        boolean boolean38 = serializableOptional33.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream39 = serializableOptional33.stream();
        java.io.Serializable serializable40 = serializableOptional33.orElseThrow();
        java.lang.String str41 = serializableOptional33.toString();
        boolean boolean42 = serializableOptional7.equals((java.lang.Object) serializableOptional33);
        java.util.Optional<java.io.Serializable> serializableOptional44 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable45 = serializableOptional44.get();
        java.io.Serializable serializable46 = serializableOptional44.get();
        java.io.Serializable serializable47 = serializableOptional44.get();
        boolean boolean48 = serializableOptional44.isEmpty();
        java.lang.String str49 = serializableOptional44.toString();
        java.lang.Class<?> wildcardClass50 = serializableOptional44.getClass();
        java.io.Serializable serializable51 = serializableOptional33.orElse((java.io.Serializable) wildcardClass50);
        java.io.Serializable serializable52 = serializableOptional1.orElse(serializable51);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(strComparableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(genericDeclarationOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(serializableStream39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Optional[1]" + "'", str41, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(serializableOptional44);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Optional[1]" + "'", str49, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (byte) 1 + "'", serializable51, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (byte) 1 + "'", serializable52, (byte) 1);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass12 = serializableStream11.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional13 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass12);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional14 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass12);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional15 = java.util.Optional.ofNullable(wildcardClass12);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass12);
        java.util.Optional<java.lang.Object> objOptional17 = java.util.Optional.empty();
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) objOptional17);
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable21 = serializableOptional20.get();
        java.io.Serializable serializable22 = serializableOptional20.get();
        java.io.Serializable serializable23 = serializableOptional20.get();
        boolean boolean24 = serializableOptional20.isEmpty();
        java.io.Serializable serializable25 = serializableOptional20.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream26 = serializableOptional20.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional20.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional20.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional20.stream();
        java.lang.Class<?> wildcardClass30 = serializableStream29.getClass();
        java.io.Serializable serializable31 = serializableOptional1.orElse((java.io.Serializable) wildcardClass30);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeOptional13);
        org.junit.Assert.assertNotNull(annotatedElementOptional14);
        org.junit.Assert.assertNotNull(wildcardClassOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(objOptional17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream26);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional0);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        java.util.stream.Stream<java.io.Serializable> serializableStream1 = serializableOptional0.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable2 = serializableOptional0.get();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertNotNull(serializableStream1);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable16 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable17 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream18);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        boolean boolean4 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (-1L));
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable12 = serializableOptional10.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional10.stream();
        java.io.Serializable serializable14 = null;
        java.io.Serializable serializable15 = serializableOptional10.orElse(serializable14);
        boolean boolean16 = serializableOptional10.isPresent();
        java.io.Serializable serializable17 = serializableOptional10.get();
        java.io.Serializable serializable18 = serializableOptional10.get();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional19 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass20 = strComparableOptional19.getClass();
        java.io.Serializable serializable21 = serializableOptional10.orElse((java.io.Serializable) wildcardClass20);
        boolean boolean22 = serializableOptional10.isPresent();
        boolean boolean23 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertNotNull(strComparableOptional19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.util.Optional<java.lang.Object> objOptional10 = java.util.Optional.of((java.lang.Object) serializableStream9);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional11 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream9);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(objOptional10);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional11);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.io.Serializable serializable6 = serializableOptional1.get();
        java.lang.String str7 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.ofNullable((java.io.Serializable) false);
        java.util.Optional<java.io.Serializable> serializableOptional13 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional13.stream();
        java.io.Serializable serializable16 = serializableOptional13.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional13.stream();
        java.lang.Class<?> wildcardClass18 = serializableOptional13.getClass();
        boolean boolean19 = serializableOptional11.equals((java.lang.Object) wildcardClass18);
        boolean boolean20 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableOptional13);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.lang.String str7 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional5 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream4);
        java.lang.Class<?> wildcardClass6 = serializableStream4.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(autoCloseableOptional5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableOptionalOptional0);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass15 = serializableStream14.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional16 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.io.Serializable serializable18 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        boolean boolean19 = serializableOptional1.isEmpty();
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional20 = java.util.Optional.empty();
        boolean boolean21 = serializableOptional1.equals((java.lang.Object) constantDescOptional20);
        java.io.Serializable serializable22 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable23 = serializableOptional1.get();
        java.io.Serializable serializable24 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeDescriptorOptional16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(constantDescOptional20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional10 = java.util.Optional.ofNullable(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptionalOptional10);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        java.util.stream.Stream<java.io.Serializable> serializableStream1 = serializableOptional0.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional2 = java.util.Optional.ofNullable(serializableStream1);
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertNotNull(serializableStream1);
        org.junit.Assert.assertNotNull(serializableStreamOptional2);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable11 = serializableOptional1.get();
        java.io.Serializable serializable12 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.lang.String str7 = serializableOptional1.toString();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional10.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable14 = serializableOptional10.orElse((java.io.Serializable) '#');
        java.lang.String str15 = serializableOptional10.toString();
        boolean boolean16 = serializableOptional10.isEmpty();
        java.lang.Class<?> wildcardClass17 = serializableOptional10.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional18 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass17);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional19 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass17);
        boolean boolean20 = serializableOptional1.equals((java.lang.Object) typeDescriptorOptional19);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional18);
        org.junit.Assert.assertNotNull(typeDescriptorOptional19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional19.stream();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable27 = serializableOptional26.get();
        java.io.Serializable serializable28 = serializableOptional26.get();
        java.io.Serializable serializable29 = serializableOptional26.get();
        java.io.Serializable serializable31 = serializableOptional26.orElse((java.io.Serializable) 100L);
        boolean boolean32 = serializableOptional26.isPresent();
        boolean boolean33 = serializableOptional26.isPresent();
        java.io.Serializable serializable34 = serializableOptional26.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional26.stream();
        boolean boolean36 = serializableOptional19.equals((java.lang.Object) serializableOptional26);
        boolean boolean37 = serializableOptional26.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable40 = serializableOptional39.get();
        java.io.Serializable serializable41 = serializableOptional39.get();
        java.io.Serializable serializable42 = serializableOptional39.get();
        boolean boolean43 = serializableOptional39.isEmpty();
        java.io.Serializable serializable44 = serializableOptional39.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream45 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream46 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional39.stream();
        boolean boolean48 = serializableOptional26.equals((java.lang.Object) serializableStream47);
        boolean boolean49 = serializableOptional10.equals((java.lang.Object) serializableOptional26);
        java.io.Serializable serializable50 = serializableOptional26.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream45);
        org.junit.Assert.assertNotNull(serializableStream46);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        boolean boolean5 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        boolean boolean7 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.Optional<java.lang.Object> objOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(objOptional0);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.io.Serializable serializable18 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.lang.Class<?> wildcardClass2 = serializableOptional1.getClass();
        java.util.Optional<java.lang.Object> objOptional3 = java.util.Optional.of((java.lang.Object) serializableOptional1);
        java.lang.Class<?> wildcardClass4 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objOptional3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.ofNullable((java.lang.CharSequence) "");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.lang.String str7 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional6 = java.util.Optional.ofNullable(serializableOptional1);
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableOptional0);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        java.io.Serializable serializable11 = serializableOptional1.orElseThrow();
        java.lang.String str12 = serializableOptional1.toString();
        java.lang.Object obj13 = null;
        boolean boolean14 = serializableOptional1.equals(obj13);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional9.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional11 = java.util.Optional.ofNullable(serializableOptional9);
        java.lang.String str12 = serializableOptional9.toString();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) str12);
        boolean boolean14 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(serializableOptionalOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable10 = serializableOptional7.orElse((java.io.Serializable) (byte) 10);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional7.stream();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional14 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream13);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertNotNull(autoCloseableOptional14);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.lang.String str9 = serializableOptional1.toString();
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) (short) 1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        java.lang.Class<?> wildcardClass16 = serializableStream15.getClass();
        java.io.Serializable serializable17 = serializableOptional1.orElse((java.io.Serializable) wildcardClass16);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional18 = java.util.Optional.ofNullable(wildcardClass16);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClassOptional18);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.lang.String str10 = serializableOptional1.toString();
        java.io.Serializable serializable11 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional9.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional9.stream();
        java.io.Serializable serializable13 = serializableOptional9.get();
        boolean boolean14 = serializableOptional7.equals((java.lang.Object) serializableOptional9);
        java.lang.String str15 = serializableOptional9.toString();
        java.lang.String str16 = serializableOptional9.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.ofNullable((java.lang.constant.ConstantDesc) "Optional[1]");
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) 0.0d);
        boolean boolean12 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.lang.String str14 = serializableOptional1.toString();
        java.io.Serializable serializable15 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional17.stream();
        java.io.Serializable serializable20 = serializableOptional17.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable21 = serializableOptional17.get();
        java.util.Optional<java.io.Serializable> serializableOptional23 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional23.stream();
        java.io.Serializable serializable25 = serializableOptional23.get();
        java.util.Optional<java.io.Serializable> serializableOptional27 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional27.stream();
        java.io.Serializable serializable30 = serializableOptional27.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional27.stream();
        boolean boolean32 = serializableOptional23.equals((java.lang.Object) serializableOptional27);
        boolean boolean33 = serializableOptional17.equals((java.lang.Object) serializableOptional23);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional23.stream();
        boolean boolean35 = serializableOptional23.isPresent();
        boolean boolean36 = serializableOptional1.equals((java.lang.Object) boolean35);
        boolean boolean37 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional27);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        boolean boolean14 = serializableOptional1.isPresent();
        java.io.Serializable serializable15 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream16);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.equals((java.lang.Object) (short) 0);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        boolean boolean15 = serializableOptional11.isPresent();
        boolean boolean16 = serializableOptional11.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        java.lang.Class<?> wildcardClass18 = serializableOptional11.getClass();
        java.io.Serializable serializable19 = serializableOptional1.orElse((java.io.Serializable) wildcardClass18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean23 = serializableOptional21.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional21.stream();
        java.lang.String str25 = serializableOptional21.toString();
        java.lang.String str26 = serializableOptional21.toString();
        boolean boolean27 = serializableOptional1.equals((java.lang.Object) str26);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Optional[1]" + "'", str25, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Optional[1]" + "'", str26, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.ofNullable("Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        java.io.Serializable serializable17 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable18 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass6);
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) wildcardClass6);
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable18 = serializableOptional17.get();
        java.io.Serializable serializable19 = serializableOptional17.get();
        java.io.Serializable serializable20 = serializableOptional17.get();
        java.io.Serializable serializable22 = serializableOptional17.orElse((java.io.Serializable) 100L);
        boolean boolean23 = serializableOptional17.isPresent();
        boolean boolean24 = serializableOptional17.isPresent();
        boolean boolean25 = serializableOptional17.isPresent();
        java.lang.Class<?> wildcardClass26 = serializableOptional17.getClass();
        java.io.Serializable serializable27 = serializableOptional8.orElse((java.io.Serializable) wildcardClass26);
        java.io.Serializable serializable28 = serializableOptional8.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass6);
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) wildcardClass6);
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional15 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream14);
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableBaseStreamOptional15);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) (-1.0d));
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional1.stream();
        boolean boolean13 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.lang.String str4 = serializableOptional1.toString();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional5 = java.util.Optional.of(serializableOptional1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[1]" + "'", str4, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptionalOptional5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.lang.String str5 = serializableOptional1.toString();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable8 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional6 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream5);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional6);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional1.stream();
        java.lang.String str21 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional23 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional23.stream();
        boolean boolean26 = serializableOptional23.equals((java.lang.Object) false);
        java.lang.String str27 = serializableOptional23.toString();
        java.io.Serializable serializable28 = serializableOptional23.orElseThrow();
        java.io.Serializable serializable29 = serializableOptional23.get();
        java.util.Optional<java.lang.CharSequence> charSequenceOptional30 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass31 = charSequenceOptional30.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional32 = java.util.Optional.of(wildcardClass31);
        java.io.Serializable serializable33 = serializableOptional23.orElse((java.io.Serializable) wildcardClass31);
        boolean boolean34 = serializableOptional1.equals((java.lang.Object) serializableOptional23);
        java.lang.String str35 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Optional[1]" + "'", str21, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertNotNull(charSequenceOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClassOptional32);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Optional[1]" + "'", str35, "Optional[1]");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable4 = serializableOptional3.get();
        java.io.Serializable serializable5 = serializableOptional3.get();
        java.io.Serializable serializable6 = serializableOptional3.get();
        boolean boolean7 = serializableOptional3.isEmpty();
        java.io.Serializable serializable8 = serializableOptional3.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional3.stream();
        boolean boolean10 = serializableOptional1.equals((java.lang.Object) serializableOptional3);
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional12.stream();
        java.io.Serializable serializable15 = serializableOptional12.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable16 = serializableOptional12.get();
        boolean boolean17 = serializableOptional12.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable23 = serializableOptional19.orElse((java.io.Serializable) '#');
        java.lang.String str24 = serializableOptional19.toString();
        boolean boolean25 = serializableOptional19.isEmpty();
        boolean boolean26 = serializableOptional12.equals((java.lang.Object) serializableOptional19);
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        boolean boolean29 = serializableOptional19.equals((java.lang.Object) wildcardClass28);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        boolean boolean33 = serializableOptional31.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional31.stream();
        java.lang.Class<?> wildcardClass35 = serializableOptional31.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional36 = java.util.Optional.of((java.lang.reflect.Type) wildcardClass35);
        java.io.Serializable serializable37 = serializableOptional19.orElse((java.io.Serializable) wildcardClass35);
        boolean boolean38 = serializableOptional3.equals((java.lang.Object) serializable37);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Optional[1]" + "'", str24, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(typeOptional36);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        java.util.Optional<java.lang.constant.Constable> constableOptional29 = java.util.Optional.empty();
        boolean boolean30 = serializableOptional7.equals((java.lang.Object) constableOptional29);
        boolean boolean31 = serializableOptional7.isPresent();
        boolean boolean32 = serializableOptional7.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(constableOptional29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional10.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass13 = serializableOptional10.getClass();
        java.io.Serializable serializable14 = serializableOptional1.orElse((java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) 100.0f);
        java.lang.String str17 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Optional[1]" + "'", str17, "Optional[1]");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.lang.String str10 = serializableOptional8.toString();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        boolean boolean13 = serializableOptional8.isEmpty();
        java.lang.String str14 = serializableOptional8.toString();
        java.io.Serializable serializable15 = serializableOptional8.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional8.getClass();
        java.io.Serializable serializable17 = serializableOptional1.orElse((java.io.Serializable) wildcardClass16);
        java.lang.Class<?> wildcardClass18 = serializable17.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        java.io.Serializable serializable18 = serializableOptional10.orElse((java.io.Serializable) (short) -1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional10.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream19);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional6 = java.util.Optional.ofNullable(serializableOptional1);
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.io.Serializable serializable11 = serializableOptional9.get();
        java.io.Serializable serializable12 = serializableOptional9.get();
        boolean boolean13 = serializableOptional9.isEmpty();
        java.io.Serializable serializable14 = serializableOptional9.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional9.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional9.stream();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        java.lang.Class<?> wildcardClass20 = serializableStream19.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional21 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass20);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional22 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass20);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional23 = java.util.Optional.ofNullable(wildcardClass20);
        java.io.Serializable serializable24 = serializableOptional9.orElse((java.io.Serializable) wildcardClass20);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional25 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass20);
        java.io.Serializable serializable26 = serializableOptional1.orElse((java.io.Serializable) wildcardClass20);
        java.io.Serializable serializable27 = serializableOptional1.get();
        java.lang.String str28 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(typeOptional21);
        org.junit.Assert.assertNotNull(annotatedElementOptional22);
        org.junit.Assert.assertNotNull(wildcardClassOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Optional[1]" + "'", str28, "Optional[1]");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass20 = serializableStream19.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        java.util.Optional<java.lang.Object> objOptional1 = java.util.Optional.ofNullable((java.lang.Object) serializableOptional0);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional0.stream();
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertNotNull(objOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional8.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable16 = serializableOptional8.orElseThrow();
        java.io.Serializable serializable17 = serializableOptional8.get();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        boolean boolean23 = serializableOptional8.equals((java.lang.Object) serializableStream22);
        boolean boolean24 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable25 = serializableOptional8.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.util.Optional<java.lang.constant.Constable> constableOptional9 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass10 = constableOptional9.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional11 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass10);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional12 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass10);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass10);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        boolean boolean19 = serializableOptional15.isEmpty();
        java.io.Serializable serializable20 = serializableOptional15.orElseThrow();
        boolean boolean22 = serializableOptional15.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable23 = serializableOptional15.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional15.stream();
        java.io.Serializable serializable25 = serializableOptional15.get();
        java.lang.Class<?> wildcardClass26 = serializableOptional15.getClass();
        java.io.Serializable serializable27 = serializableOptional1.orElse((java.io.Serializable) wildcardClass26);
        java.util.Optional<java.io.Serializable> serializableOptional29 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean31 = serializableOptional29.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable33 = serializableOptional29.orElse((java.io.Serializable) '#');
        java.lang.String str34 = serializableOptional29.toString();
        boolean boolean35 = serializableOptional29.isEmpty();
        java.lang.Class<?> wildcardClass36 = serializableOptional29.getClass();
        java.io.Serializable serializable37 = serializableOptional1.orElse((java.io.Serializable) wildcardClass36);
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean40 = serializableOptional39.isPresent();
        java.io.Serializable serializable42 = serializableOptional39.orElse((java.io.Serializable) (byte) 10);
        boolean boolean43 = serializableOptional39.isPresent();
        boolean boolean44 = serializableOptional39.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional46 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional46.stream();
        boolean boolean49 = serializableOptional46.equals((java.lang.Object) false);
        java.lang.String str50 = serializableOptional46.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableOptional46.stream();
        boolean boolean52 = serializableOptional39.equals((java.lang.Object) serializableOptional46);
        java.io.Serializable serializable53 = serializableOptional46.orElseThrow();
        boolean boolean54 = serializableOptional46.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional56 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream57 = serializableOptional56.stream();
        boolean boolean59 = serializableOptional56.equals((java.lang.Object) false);
        java.lang.String str60 = serializableOptional56.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream61 = serializableOptional56.stream();
        boolean boolean62 = serializableOptional46.equals((java.lang.Object) serializableOptional56);
        java.util.stream.Stream<java.io.Serializable> serializableStream63 = serializableOptional46.stream();
        java.util.Optional<java.io.Serializable> serializableOptional65 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable66 = serializableOptional65.get();
        java.io.Serializable serializable67 = serializableOptional65.get();
        boolean boolean68 = serializableOptional65.isPresent();
        java.io.Serializable serializable69 = serializableOptional65.get();
        boolean boolean70 = serializableOptional65.isPresent();
        boolean boolean71 = serializableOptional65.isPresent();
        boolean boolean72 = serializableOptional46.equals((java.lang.Object) boolean71);
        boolean boolean73 = serializableOptional1.equals((java.lang.Object) boolean71);
        java.lang.String str74 = serializableOptional1.toString();
        java.lang.String str75 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(constableOptional9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(typeOptional11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Optional[1]" + "'", str34, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(serializableOptional46);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Optional[1]" + "'", str50, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (byte) 1 + "'", serializable53, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableOptional56);
        org.junit.Assert.assertNotNull(serializableStream57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Optional[1]" + "'", str60, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(serializableStream63);
        org.junit.Assert.assertNotNull(serializableOptional65);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (byte) 1 + "'", serializable66, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (byte) 1 + "'", serializable67, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (byte) 1 + "'", serializable69, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Optional[1]" + "'", str74, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Optional[1]" + "'", str75, "Optional[1]");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable9 = serializableOptional7.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        boolean boolean16 = serializableOptional7.equals((java.lang.Object) serializableOptional11);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.lang.Class<?> wildcardClass18 = serializableOptional1.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional19 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass18);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(annotatedElementOptional19);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        java.util.Optional<java.io.Serializable> serializableOptional30 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean32 = serializableOptional30.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableOptional30.stream();
        java.io.Serializable serializable34 = serializableOptional30.orElseThrow();
        java.io.Serializable serializable35 = serializableOptional30.orElseThrow();
        boolean boolean36 = serializableOptional30.isPresent();
        boolean boolean37 = serializableOptional30.isEmpty();
        boolean boolean38 = serializableOptional14.equals((java.lang.Object) serializableOptional30);
        boolean boolean39 = serializableOptional14.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(serializableOptional30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional8.isPresent();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable12 = serializableOptional8.get();
        java.lang.String str13 = serializableOptional8.toString();
        java.lang.Class<?> wildcardClass14 = serializableOptional8.getClass();
        java.io.Serializable serializable15 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional1.stream();
        boolean boolean17 = serializableOptional1.isEmpty();
        boolean boolean18 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.lang.String str9 = serializableOptional1.toString();
        boolean boolean10 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean4 = serializableOptional1.isPresent();
        java.lang.String str5 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional9.isPresent();
        java.io.Serializable serializable12 = serializableOptional9.orElse((java.io.Serializable) (byte) 10);
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializable12);
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional14 = java.util.Optional.ofNullable(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableOptionalOptional14);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable4 = serializableOptional3.get();
        java.io.Serializable serializable5 = serializableOptional3.get();
        java.io.Serializable serializable6 = serializableOptional3.get();
        boolean boolean7 = serializableOptional3.isEmpty();
        java.io.Serializable serializable8 = serializableOptional3.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional3.stream();
        boolean boolean10 = serializableOptional1.equals((java.lang.Object) serializableOptional3);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional3.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(serializableStream11);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.get();
        boolean boolean11 = serializableOptional1.isPresent();
        java.io.Serializable serializable12 = null;
        java.io.Serializable serializable13 = serializableOptional1.orElse(serializable12);
        java.io.Serializable serializable14 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional1.stream();
        java.lang.String str16 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional16.stream();
        java.io.Serializable serializable19 = serializableOptional16.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable20 = serializableOptional16.get();
        boolean boolean21 = serializableOptional16.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional16.stream();
        boolean boolean23 = serializableOptional8.equals((java.lang.Object) serializableOptional16);
        java.io.Serializable serializable24 = serializableOptional8.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean28 = serializableOptional26.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional26.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional30 = java.util.Optional.empty();
        boolean boolean31 = serializableOptional26.equals((java.lang.Object) strComparableOptional30);
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional33.stream();
        java.io.Serializable serializable36 = serializableOptional33.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream37 = serializableOptional33.stream();
        boolean boolean38 = serializableOptional26.equals((java.lang.Object) serializableStream37);
        java.util.stream.Stream<java.io.Serializable> serializableStream39 = serializableOptional26.stream();
        java.util.Optional<java.io.Serializable> serializableOptional41 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable42 = serializableOptional41.get();
        java.io.Serializable serializable43 = serializableOptional41.get();
        java.io.Serializable serializable44 = serializableOptional41.get();
        boolean boolean45 = serializableOptional41.isEmpty();
        java.io.Serializable serializable46 = serializableOptional41.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional41.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream48 = serializableOptional41.stream();
        java.util.Optional<java.io.Serializable> serializableOptional50 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableOptional50.stream();
        java.lang.Class<?> wildcardClass52 = serializableStream51.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional53 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass52);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional54 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass52);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional55 = java.util.Optional.ofNullable(wildcardClass52);
        java.io.Serializable serializable56 = serializableOptional41.orElse((java.io.Serializable) wildcardClass52);
        java.util.Optional<java.lang.Object> objOptional57 = java.util.Optional.empty();
        boolean boolean58 = serializableOptional41.equals((java.lang.Object) objOptional57);
        java.lang.Class<?> wildcardClass59 = objOptional57.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional60 = java.util.Optional.of((java.lang.reflect.Type) wildcardClass59);
        java.io.Serializable serializable61 = serializableOptional26.orElse((java.io.Serializable) wildcardClass59);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional62 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass59);
        java.io.Serializable serializable63 = serializableOptional8.orElse((java.io.Serializable) wildcardClass59);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertNotNull(strComparableOptional30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(serializableStream39);
        org.junit.Assert.assertNotNull(serializableOptional41);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertNotNull(serializableStream48);
        org.junit.Assert.assertNotNull(serializableOptional50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(typeOptional53);
        org.junit.Assert.assertNotNull(annotatedElementOptional54);
        org.junit.Assert.assertNotNull(wildcardClassOptional55);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (byte) 1 + "'", serializable56, (byte) 1);
        org.junit.Assert.assertNotNull(objOptional57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(typeOptional60);
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (byte) 1 + "'", serializable61, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional62);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + (byte) 1 + "'", serializable63, (byte) 1);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.orElseThrow();
        java.lang.Class<?> wildcardClass14 = serializable13.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional15 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass14);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        boolean boolean17 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableStream18);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.io.Serializable serializable20 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable23 = serializableOptional22.get();
        java.io.Serializable serializable24 = serializableOptional22.get();
        java.io.Serializable serializable25 = serializableOptional22.get();
        boolean boolean26 = serializableOptional22.isEmpty();
        java.io.Serializable serializable27 = serializableOptional22.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional22.stream();
        java.lang.Class<?> wildcardClass29 = serializableStream28.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional30 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass29);
        java.io.Serializable serializable31 = serializableOptional1.orElse((java.io.Serializable) wildcardClass29);
        java.lang.Class<?> wildcardClass32 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeDescriptorOptional30);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable7 = serializableOptional6.get();
        java.io.Serializable serializable8 = serializableOptional6.get();
        java.io.Serializable serializable9 = serializableOptional6.get();
        boolean boolean10 = serializableOptional6.isEmpty();
        java.io.Serializable serializable11 = serializableOptional6.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional6.stream();
        java.lang.Class<?> wildcardClass13 = serializableStream12.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional14 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass13);
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) typeDescriptorOptional14);
        java.io.Serializable serializable16 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeDescriptorOptional14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.lang.String str8 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream9);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        boolean boolean14 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean17 = serializableOptional16.isPresent();
        java.io.Serializable serializable19 = serializableOptional16.orElse((java.io.Serializable) (byte) 10);
        boolean boolean20 = serializableOptional16.isPresent();
        java.io.Serializable serializable22 = serializableOptional16.orElse((java.io.Serializable) (-1L));
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean26 = serializableOptional24.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional24.stream();
        java.io.Serializable serializable28 = serializableOptional24.get();
        boolean boolean29 = serializableOptional24.isPresent();
        boolean boolean30 = serializableOptional24.isEmpty();
        boolean boolean31 = serializableOptional16.equals((java.lang.Object) boolean30);
        java.lang.String str32 = serializableOptional16.toString();
        boolean boolean33 = serializableOptional1.equals((java.lang.Object) serializableOptional16);
        java.io.Serializable serializable34 = serializableOptional16.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Optional[1]" + "'", str32, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean21 = serializableOptional18.equals((java.lang.Object) false);
        java.lang.String str22 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) serializableOptional18);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional8.stream();
        java.io.Serializable serializable26 = serializableOptional8.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional0);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        java.util.stream.Stream<java.io.Serializable> serializableStream1 = serializableOptional0.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable2 = serializableOptional0.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertNotNull(serializableStream1);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional7.stream();
        java.lang.Class<?> wildcardClass14 = serializableStream13.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) "");
        java.lang.String str7 = serializableOptional1.toString();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional9.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional9.stream();
        java.io.Serializable serializable13 = serializableOptional9.get();
        boolean boolean14 = serializableOptional7.equals((java.lang.Object) serializableOptional9);
        java.lang.String str15 = serializableOptional9.toString();
        boolean boolean16 = serializableOptional9.isEmpty();
        boolean boolean17 = serializableOptional9.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional12 = java.util.Optional.of((java.lang.constant.ConstantDesc) (-1.0f));
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) (-1.0f));
        java.io.Serializable serializable14 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(constantDescOptional12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.io.Serializable serializable20 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional22.stream();
        java.lang.Class<?> wildcardClass24 = serializableStream23.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional25 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass24);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional26 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass24);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional27 = java.util.Optional.ofNullable(wildcardClass24);
        java.io.Serializable serializable28 = serializableOptional1.orElse((java.io.Serializable) wildcardClass24);
        java.io.Serializable serializable29 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeOptional25);
        org.junit.Assert.assertNotNull(annotatedElementOptional26);
        org.junit.Assert.assertNotNull(wildcardClassOptional27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.lang.Class<?> wildcardClass4 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional5 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass4);
        java.util.Optional<java.lang.constant.Constable> constableOptional7 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass8 = constableOptional7.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional9 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass8);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional10 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass8);
        java.io.Serializable serializable11 = serializableOptional5.orElse((java.io.Serializable) wildcardClass8);
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional13 = java.util.Optional.ofNullable((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = serializableOptional5.equals((java.lang.Object) strComparableOptional13);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(serializableOptional5);
        org.junit.Assert.assertNotNull(constableOptional7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeOptional9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional10);
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(strComparableOptional13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (byte) 100);
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional11.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional20.stream();
        java.lang.Class<?> wildcardClass22 = serializableStream21.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional23 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass22);
        boolean boolean24 = serializableOptional18.equals((java.lang.Object) wildcardClass22);
        java.io.Serializable serializable25 = serializableOptional18.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream26 = serializableOptional18.stream();
        java.lang.Class<?> wildcardClass27 = serializableStream26.getClass();
        java.io.Serializable serializable28 = serializableOptional11.orElse((java.io.Serializable) wildcardClass27);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional29 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass27);
        java.io.Serializable serializable30 = serializableOptional1.orElse((java.io.Serializable) wildcardClass27);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(typeOptional23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.lang.String str9 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.lang.String str16 = serializableOptional11.toString();
        java.lang.Class<?> wildcardClass17 = serializableOptional11.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional18 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass17);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) constableOptional18);
        java.io.Serializable serializable20 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(constableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean14 = serializableOptional12.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional12.stream();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableStream15);
        boolean boolean17 = serializableOptional1.isEmpty();
        java.io.Serializable serializable18 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional3.stream();
        java.lang.Class<?> wildcardClass5 = serializableStream4.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional6 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = serializableOptional1.equals((java.lang.Object) wildcardClass5);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional8 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass5);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional9 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass5);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional10 = java.util.Optional.ofNullable(wildcardClass5);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional8);
        org.junit.Assert.assertNotNull(annotatedElementOptional9);
        org.junit.Assert.assertNotNull(wildcardClassOptional10);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional1.isPresent();
        boolean boolean18 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass8 = serializableStream7.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional9 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass8);
        java.util.Optional<java.lang.Object> objOptional10 = java.util.Optional.ofNullable((java.lang.Object) wildcardClass8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(genericDeclarationOptional9);
        org.junit.Assert.assertNotNull(objOptional10);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>> wildcardClassOfField0 = null;
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional1 = java.util.Optional.ofNullable(wildcardClassOfField0);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional1);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.String str10 = serializableOptional1.toString();
        boolean boolean11 = serializableOptional1.isEmpty();
        boolean boolean12 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional9 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(constableOptional9);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass16 = serializableOptional1.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass16);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional17);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.lang.reflect.AnnotatedElement annotatedElement0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional1 = java.util.Optional.of(annotatedElement0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional8.isPresent();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable12 = serializableOptional8.get();
        java.lang.String str13 = serializableOptional8.toString();
        java.lang.Class<?> wildcardClass14 = serializableOptional8.getClass();
        java.io.Serializable serializable15 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass17 = serializableStream16.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.io.Serializable serializable10 = serializableOptional1.orElse((java.io.Serializable) 'a');
        java.io.Serializable serializable11 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional13 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean14 = serializableOptional13.isPresent();
        java.io.Serializable serializable16 = serializableOptional13.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable17 = serializableOptional13.get();
        java.lang.String str18 = serializableOptional13.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional13.stream();
        boolean boolean20 = serializableOptional13.isPresent();
        boolean boolean21 = serializableOptional13.isPresent();
        java.io.Serializable serializable22 = serializableOptional13.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional13.stream();
        boolean boolean24 = serializableOptional1.equals((java.lang.Object) serializableOptional13);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Optional[1]" + "'", str18, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        boolean boolean18 = serializableOptional11.isEmpty();
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) serializableOptional11);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional1.stream();
        java.lang.String str21 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional23 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional23.stream();
        boolean boolean26 = serializableOptional23.equals((java.lang.Object) false);
        java.lang.String str27 = serializableOptional23.toString();
        java.io.Serializable serializable28 = serializableOptional23.orElseThrow();
        java.io.Serializable serializable29 = serializableOptional23.get();
        java.util.Optional<java.lang.CharSequence> charSequenceOptional30 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass31 = charSequenceOptional30.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional32 = java.util.Optional.of(wildcardClass31);
        java.io.Serializable serializable33 = serializableOptional23.orElse((java.io.Serializable) wildcardClass31);
        boolean boolean34 = serializableOptional1.equals((java.lang.Object) serializableOptional23);
        java.lang.String str35 = serializableOptional23.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream36 = serializableOptional23.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Optional[1]" + "'", str21, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertNotNull(charSequenceOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClassOptional32);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Optional[1]" + "'", str35, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream36);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        java.io.Serializable serializable14 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional17.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional21 = java.util.Optional.empty();
        boolean boolean22 = serializableOptional17.equals((java.lang.Object) strComparableOptional21);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        java.io.Serializable serializable27 = serializableOptional24.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional24.stream();
        boolean boolean29 = serializableOptional17.equals((java.lang.Object) serializableStream28);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        java.lang.Class<?> wildcardClass33 = serializableStream32.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional34 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass33);
        java.io.Serializable serializable35 = serializableOptional17.orElse((java.io.Serializable) wildcardClass33);
        java.io.Serializable serializable36 = serializableOptional1.orElse(serializable35);
        boolean boolean37 = serializableOptional1.isEmpty();
        boolean boolean38 = serializableOptional1.isEmpty();
        boolean boolean39 = serializableOptional1.isEmpty();
        java.io.Serializable serializable40 = serializableOptional1.get();
        boolean boolean41 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(strComparableOptional21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeOptional34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional12 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass11);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass11);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional14 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor) wildcardClass11);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(genericDeclarationOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(typeDescriptorOptional14);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional0);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        boolean boolean29 = serializableOptional7.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean33 = serializableOptional31.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable35 = serializableOptional31.orElse((java.io.Serializable) '#');
        java.lang.String str36 = serializableOptional31.toString();
        boolean boolean37 = serializableOptional31.isEmpty();
        java.lang.Class<?> wildcardClass38 = serializableOptional31.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional39 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass38);
        java.util.Optional<java.lang.constant.Constable> constableOptional40 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass38);
        java.io.Serializable serializable41 = serializableOptional7.orElse((java.io.Serializable) wildcardClass38);
        java.io.Serializable serializable42 = serializableOptional7.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableOptional7.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Optional[1]" + "'", str36, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional39);
        org.junit.Assert.assertNotNull(constableOptional40);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream43);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) str15);
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean20 = serializableOptional18.isEmpty();
        java.io.Serializable serializable21 = serializableOptional18.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional18.stream();
        boolean boolean23 = serializableOptional1.equals((java.lang.Object) serializableStream22);
        boolean boolean24 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serializableStream25);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional12 = java.util.Optional.of((java.lang.constant.ConstantDesc) (-1.0f));
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) (-1.0f));
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean17 = serializableOptional15.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable19 = serializableOptional15.orElse((java.io.Serializable) '#');
        java.lang.String str20 = serializableOptional15.toString();
        boolean boolean21 = serializableOptional15.isEmpty();
        java.lang.Class<?> wildcardClass22 = serializableOptional15.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional23 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass22);
        java.io.Serializable serializable24 = serializableOptional1.orElse((java.io.Serializable) wildcardClass22);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(constantDescOptional12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Optional[1]" + "'", str20, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.ofNullable((java.lang.constant.ConstantDesc) (-1.0f));
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional8 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream7);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional8);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.lang.Class<?> wildcardClass4 = serializableOptional1.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional5 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass4);
        java.util.Optional<java.lang.constant.Constable> constableOptional6 = java.util.Optional.of((java.lang.constant.Constable) wildcardClass4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(annotatedElementOptional5);
        org.junit.Assert.assertNotNull(constableOptional6);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional9 = java.util.Optional.of((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional9);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional8.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable16 = serializableOptional8.orElseThrow();
        java.io.Serializable serializable17 = serializableOptional8.get();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        boolean boolean23 = serializableOptional8.equals((java.lang.Object) serializableStream22);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional24 = java.util.Optional.ofNullable(serializableStream22);
        java.lang.Class<?> wildcardClass25 = serializableStreamOptional24.getClass();
        boolean boolean26 = serializableOptional1.equals((java.lang.Object) wildcardClass25);
        java.lang.String str27 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableStreamOptional24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.io.Serializable serializable11 = serializableOptional9.get();
        java.io.Serializable serializable12 = serializableOptional9.get();
        boolean boolean13 = serializableOptional9.isEmpty();
        java.io.Serializable serializable14 = serializableOptional9.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional9.stream();
        java.lang.Class<?> wildcardClass16 = serializableStream15.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass16);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional18 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass16);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) typeDescriptorOptional18);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional20 = java.util.Optional.empty();
        boolean boolean21 = serializableOptional1.equals((java.lang.Object) serializableStreamOptional20);
        java.io.Serializable serializable22 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertNotNull(typeDescriptorOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStreamOptional20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.ofNullable((java.io.Serializable) 10.0f);
        java.lang.String str2 = serializableOptional1.toString();
        boolean boolean3 = serializableOptional1.isPresent();
        java.lang.String str4 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable7 = serializableOptional6.get();
        java.io.Serializable serializable8 = serializableOptional6.get();
        java.io.Serializable serializable9 = serializableOptional6.get();
        java.io.Serializable serializable11 = serializableOptional6.orElse((java.io.Serializable) 100L);
        boolean boolean12 = serializableOptional6.isPresent();
        java.io.Serializable serializable13 = serializableOptional6.orElseThrow();
        java.io.Serializable serializable14 = serializableOptional6.orElseThrow();
        boolean boolean15 = serializableOptional6.isEmpty();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Optional[10.0]" + "'", str2, "Optional[10.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[10.0]" + "'", str4, "Optional[10.0]");
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional9.isPresent();
        java.io.Serializable serializable12 = serializableOptional9.orElse((java.io.Serializable) (byte) 10);
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializable12);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.lang.String str5 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean21 = serializableOptional18.equals((java.lang.Object) false);
        java.lang.String str22 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) serializableOptional18);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional8.stream();
        boolean boolean26 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional28 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean30 = serializableOptional28.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional28.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional32 = java.util.Optional.empty();
        boolean boolean33 = serializableOptional28.equals((java.lang.Object) strComparableOptional32);
        java.util.Optional<java.io.Serializable> serializableOptional35 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream36 = serializableOptional35.stream();
        java.io.Serializable serializable38 = serializableOptional35.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream39 = serializableOptional35.stream();
        boolean boolean40 = serializableOptional28.equals((java.lang.Object) serializableStream39);
        java.util.Optional<java.io.Serializable> serializableOptional42 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable43 = serializableOptional42.get();
        java.io.Serializable serializable44 = serializableOptional42.get();
        java.io.Serializable serializable45 = serializableOptional42.get();
        boolean boolean46 = serializableOptional42.isEmpty();
        java.io.Serializable serializable47 = serializableOptional42.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream48 = serializableOptional42.stream();
        java.lang.Class<?> wildcardClass49 = serializableStream48.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional50 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass49);
        java.io.Serializable serializable51 = serializableOptional28.orElse((java.io.Serializable) wildcardClass49);
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableOptional28.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional53 = java.util.Optional.ofNullable((java.lang.AutoCloseable) serializableStream52);
        boolean boolean54 = serializableOptional8.equals((java.lang.Object) serializableStream52);
        java.util.stream.Stream<java.io.Serializable> serializableStream55 = serializableOptional8.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableOptional28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertNotNull(strComparableOptional32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(serializableOptional35);
        org.junit.Assert.assertNotNull(serializableStream36);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (byte) 1 + "'", serializable38, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(serializableOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(genericDeclarationOptional50);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (byte) 1 + "'", serializable51, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertNotNull(autoCloseableOptional53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableStream55);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        boolean boolean10 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional13 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional13.stream();
        java.lang.Class<?> wildcardClass15 = serializableStream14.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional16 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass15);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass15);
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional22.stream();
        java.lang.Class<?> wildcardClass24 = serializableStream23.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional25 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass24);
        boolean boolean26 = serializableOptional20.equals((java.lang.Object) wildcardClass24);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional27 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass24);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional28 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass24);
        java.util.Optional<java.lang.reflect.Type> typeOptional29 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass24);
        java.io.Serializable serializable30 = serializableOptional1.orElse((java.io.Serializable) wildcardClass24);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertNotNull(serializableOptional13);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeOptional16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeOptional25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional27);
        org.junit.Assert.assertNotNull(annotatedElementOptional28);
        org.junit.Assert.assertNotNull(typeOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional9.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional9.stream();
        java.io.Serializable serializable13 = serializableOptional9.get();
        boolean boolean14 = serializableOptional7.equals((java.lang.Object) serializableOptional9);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional9.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serializableStream15);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        boolean boolean4 = serializableOptional1.isPresent();
        java.lang.String str5 = serializableOptional1.toString();
        java.io.Serializable serializable6 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.lang.String str7 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional5 = java.util.Optional.of(serializableOptional1);
        boolean boolean6 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptionalOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isEmpty();
        boolean boolean11 = serializableOptional1.equals((java.lang.Object) "Optional[1]");
        java.io.Serializable serializable12 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional12.stream();
        java.lang.Class<?> wildcardClass14 = serializableStream13.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional15 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass14);
        boolean boolean16 = serializableOptional10.equals((java.lang.Object) wildcardClass14);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass14);
        java.util.Optional<java.lang.constant.Constable> constableOptional18 = java.util.Optional.of((java.lang.constant.Constable) wildcardClass14);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) wildcardClass14);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable23 = serializableOptional21.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional21.stream();
        java.io.Serializable serializable25 = null;
        java.io.Serializable serializable26 = serializableOptional21.orElse(serializable25);
        boolean boolean27 = serializableOptional21.isPresent();
        java.io.Serializable serializable28 = serializableOptional21.get();
        java.io.Serializable serializable29 = serializableOptional21.get();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional30 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass31 = strComparableOptional30.getClass();
        java.io.Serializable serializable32 = serializableOptional21.orElse((java.io.Serializable) wildcardClass31);
        java.io.Serializable serializable33 = serializableOptional1.orElse(serializable32);
        java.io.Serializable serializable34 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeOptional15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertNotNull(constableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertNotNull(strComparableOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) str15);
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean20 = serializableOptional18.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional18.stream();
        java.io.Serializable serializable22 = serializableOptional18.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional1.equals((java.lang.Object) serializableStream23);
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional25 = java.util.Optional.ofNullable((java.lang.AutoCloseable) serializableStream23);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(autoCloseableOptional25);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        boolean boolean8 = serializableOptional7.isPresent();
        java.lang.Class<?> wildcardClass9 = serializableOptional7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.lang.CharSequence> charSequenceOptional8 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass9 = charSequenceOptional8.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional10 = java.util.Optional.of(wildcardClass9);
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) wildcardClass9);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional14.stream();
        boolean boolean17 = serializableOptional14.equals((java.lang.Object) false);
        java.lang.String str18 = serializableOptional14.toString();
        java.io.Serializable serializable19 = serializableOptional14.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional14.stream();
        java.lang.Class<?> wildcardClass21 = serializableOptional14.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional22 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass21);
        boolean boolean23 = serializableOptional1.equals((java.lang.Object) wildcardClass21);
        java.io.Serializable serializable24 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(charSequenceOptional8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClassOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Optional[1]" + "'", str18, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(genericDeclarationOptional22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional5 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(autoCloseableOptional5);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (byte) 100);
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        boolean boolean18 = serializableOptional11.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable19 = serializableOptional11.orElseThrow();
        java.io.Serializable serializable20 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass21 = serializableOptional11.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional22 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass21);
        boolean boolean23 = serializableOptional1.equals((java.lang.Object) typeOptional22);
        java.util.Optional<java.io.Serializable> serializableOptional25 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean26 = serializableOptional25.isPresent();
        java.io.Serializable serializable28 = serializableOptional25.orElse((java.io.Serializable) (byte) 10);
        boolean boolean29 = serializableOptional25.isPresent();
        java.io.Serializable serializable31 = serializableOptional25.orElse((java.io.Serializable) (-1L));
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable34 = serializableOptional33.get();
        java.io.Serializable serializable35 = serializableOptional33.get();
        java.io.Serializable serializable36 = serializableOptional33.get();
        java.io.Serializable serializable38 = serializableOptional33.orElse((java.io.Serializable) 100L);
        boolean boolean39 = serializableOptional33.isPresent();
        boolean boolean40 = serializableOptional33.isPresent();
        boolean boolean41 = serializableOptional33.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional43 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable44 = serializableOptional43.get();
        java.io.Serializable serializable45 = serializableOptional43.orElseThrow();
        java.lang.Class<?> wildcardClass46 = serializable45.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional47 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass46);
        java.io.Serializable serializable48 = serializableOptional33.orElse((java.io.Serializable) wildcardClass46);
        boolean boolean49 = serializableOptional25.equals((java.lang.Object) serializableOptional33);
        boolean boolean50 = serializableOptional1.equals((java.lang.Object) serializableOptional33);
        boolean boolean51 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeOptional22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableOptional25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (byte) 1 + "'", serializable38, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(serializableOptional43);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableOptional47);
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (byte) 1 + "'", serializable48, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable9 = serializableOptional7.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        boolean boolean16 = serializableOptional7.equals((java.lang.Object) serializableOptional11);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.lang.CharSequence> charSequenceOptional18 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass19 = charSequenceOptional18.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional20 = java.util.Optional.of(wildcardClass19);
        java.lang.Class<?> wildcardClass21 = wildcardClassOptional20.getClass();
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass21);
        boolean boolean23 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceOptional18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClassOptional20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional5 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(annotatedElementOptional5);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.ofNullable((java.lang.CharSequence) "Optional[1]");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.get();
        boolean boolean11 = serializableOptional1.isPresent();
        java.io.Serializable serializable12 = null;
        java.io.Serializable serializable13 = serializableOptional1.orElse(serializable12);
        java.io.Serializable serializable14 = serializableOptional1.orElseThrow();
        boolean boolean15 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serializableStream16);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional9 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(annotatedElementOptional9);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        boolean boolean4 = serializableOptional1.isEmpty();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(typeDescriptorOptional0);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional9 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass8);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional10 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(genericDeclarationOptional9);
        org.junit.Assert.assertNotNull(annotatedElementOptional10);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        boolean boolean1 = serializableOptional0.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional10.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass13 = serializableOptional10.getClass();
        java.io.Serializable serializable14 = serializableOptional1.orElse((java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.lang.String str7 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream8);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional5 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream4);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional6 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream4);
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional7 = java.util.Optional.ofNullable((java.lang.AutoCloseable) serializableStream4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(autoCloseableOptional5);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional6);
        org.junit.Assert.assertNotNull(autoCloseableOptional7);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional4 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass5 = strComparableOptional4.getClass();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) wildcardClass5);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertNotNull(strComparableOptional4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(constantDescOptional0);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable7 = serializableOptional6.get();
        java.io.Serializable serializable8 = serializableOptional6.get();
        java.io.Serializable serializable9 = serializableOptional6.get();
        boolean boolean10 = serializableOptional6.isEmpty();
        java.io.Serializable serializable11 = serializableOptional6.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional6.stream();
        java.lang.Class<?> wildcardClass13 = serializableStream12.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional14 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass13);
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) typeDescriptorOptional14);
        java.lang.Class<?> wildcardClass16 = typeDescriptorOptional14.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeDescriptorOptional14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        boolean boolean6 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional10 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream9);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional11 = java.util.Optional.of((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream9);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(autoCloseableOptional10);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional11);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional1 = java.util.Optional.of((java.lang.Comparable<java.lang.String>) "Optional[class java.util.Optional]");
        org.junit.Assert.assertNotNull(strComparableOptional1);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.Object obj6 = null;
        boolean boolean7 = serializableOptional1.equals(obj6);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional3.stream();
        java.lang.Class<?> wildcardClass5 = serializableStream4.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional6 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = serializableOptional1.equals((java.lang.Object) wildcardClass5);
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass10 = serializableStream9.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional11 = java.util.Optional.ofNullable((java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(genericDeclarationOptional11);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable8 = serializableOptional7.get();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.lang.Class<?> wildcardClass10 = serializable9.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional11 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass10);
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) wildcardClass10);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(constableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.util.Optional<java.lang.CharSequence> charSequenceOptional1 = java.util.Optional.of((java.lang.CharSequence) "Optional[1]");
        org.junit.Assert.assertNotNull(charSequenceOptional1);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional10.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable14 = serializableOptional10.orElse((java.io.Serializable) '#');
        java.lang.String str15 = serializableOptional10.toString();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean18 = serializableOptional17.isPresent();
        java.io.Serializable serializable20 = serializableOptional17.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable21 = serializableOptional17.get();
        java.lang.String str22 = serializableOptional17.toString();
        java.lang.Class<?> wildcardClass23 = serializableOptional17.getClass();
        java.io.Serializable serializable24 = serializableOptional10.orElse((java.io.Serializable) wildcardClass23);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional25 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass23);
        java.io.Serializable serializable26 = serializableOptional1.orElse((java.io.Serializable) wildcardClass23);
        java.util.Optional<java.io.Serializable> serializableOptional28 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable29 = serializableOptional28.get();
        java.lang.String str30 = serializableOptional28.toString();
        java.io.Serializable serializable31 = serializableOptional28.get();
        boolean boolean32 = serializableOptional28.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional34 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean35 = serializableOptional34.isPresent();
        java.io.Serializable serializable37 = serializableOptional34.orElse((java.io.Serializable) (byte) 10);
        java.util.stream.Stream<java.io.Serializable> serializableStream38 = serializableOptional34.stream();
        boolean boolean39 = serializableOptional28.equals((java.lang.Object) serializableOptional34);
        java.util.stream.Stream<java.io.Serializable> serializableStream40 = serializableOptional28.stream();
        boolean boolean41 = serializableOptional1.equals((java.lang.Object) serializableOptional28);
        boolean boolean42 = serializableOptional28.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Optional[1]" + "'", str30, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableOptional34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(serializableStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.lang.String str5 = serializableOptional1.toString();
        boolean boolean6 = serializableOptional1.isEmpty();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional9.isPresent();
        java.io.Serializable serializable12 = serializableOptional9.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable13 = serializableOptional9.get();
        java.lang.String str14 = serializableOptional9.toString();
        java.io.Serializable serializable15 = serializableOptional9.orElseThrow();
        java.util.Optional<java.lang.constant.Constable> constableOptional17 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass18 = constableOptional17.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional19 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass18);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional20 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass18);
        java.io.Serializable serializable21 = serializableOptional9.orElse((java.io.Serializable) wildcardClass18);
        java.util.Optional<java.io.Serializable> serializableOptional23 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable24 = serializableOptional23.get();
        java.io.Serializable serializable25 = serializableOptional23.get();
        java.io.Serializable serializable26 = serializableOptional23.get();
        boolean boolean27 = serializableOptional23.isEmpty();
        java.io.Serializable serializable28 = serializableOptional23.orElseThrow();
        boolean boolean30 = serializableOptional23.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable31 = serializableOptional23.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional23.stream();
        java.io.Serializable serializable33 = serializableOptional23.get();
        java.lang.Class<?> wildcardClass34 = serializableOptional23.getClass();
        java.io.Serializable serializable35 = serializableOptional9.orElse((java.io.Serializable) wildcardClass34);
        java.util.Optional<java.io.Serializable> serializableOptional37 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean39 = serializableOptional37.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable41 = serializableOptional37.orElse((java.io.Serializable) '#');
        java.lang.String str42 = serializableOptional37.toString();
        boolean boolean43 = serializableOptional37.isEmpty();
        java.lang.Class<?> wildcardClass44 = serializableOptional37.getClass();
        java.io.Serializable serializable45 = serializableOptional9.orElse((java.io.Serializable) wildcardClass44);
        java.io.Serializable serializable46 = serializableOptional1.orElse(serializable45);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(constableOptional17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(typeOptional19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (byte) 1 + "'", serializable33, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Optional[1]" + "'", str42, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) (short) 10);
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional8 = java.util.Optional.of(serializableOptional1);
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableOptionalOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.Optional<java.lang.String> strOptional1 = java.util.Optional.of("hi!");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable17 = serializableOptional8.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.lang.CharSequence> charSequenceOptional8 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass9 = charSequenceOptional8.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional10 = java.util.Optional.of(wildcardClass9);
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) wildcardClass9);
        java.lang.String str12 = serializableOptional1.toString();
        java.lang.Object obj13 = null;
        boolean boolean14 = serializableOptional1.equals(obj13);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable17 = serializableOptional16.get();
        java.io.Serializable serializable18 = serializableOptional16.get();
        java.io.Serializable serializable19 = serializableOptional16.get();
        boolean boolean20 = serializableOptional16.isEmpty();
        java.io.Serializable serializable21 = serializableOptional16.orElseThrow();
        boolean boolean23 = serializableOptional16.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable24 = serializableOptional16.orElseThrow();
        java.io.Serializable serializable25 = serializableOptional16.get();
        java.lang.Class<?> wildcardClass26 = serializableOptional16.getClass();
        java.io.Serializable serializable27 = serializableOptional1.orElse((java.io.Serializable) wildcardClass26);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(charSequenceOptional8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClassOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.String str10 = serializableOptional1.toString();
        boolean boolean11 = serializableOptional1.isPresent();
        java.io.Serializable serializable12 = serializableOptional1.get();
        java.io.Serializable serializable13 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.io.Serializable serializable11 = serializableOptional9.get();
        java.io.Serializable serializable12 = serializableOptional9.get();
        boolean boolean13 = serializableOptional9.isPresent();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional9);
        java.lang.String str15 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional17.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional19 = java.util.Optional.ofNullable(serializableOptional17);
        boolean boolean20 = serializableOptional17.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional17.stream();
        java.lang.String str22 = serializableOptional17.toString();
        boolean boolean23 = serializableOptional1.equals((java.lang.Object) str22);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertNotNull(serializableOptionalOptional19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional11 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream10);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(autoCloseableOptional11);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.lang.String str8 = serializableOptional1.toString();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional11.stream();
        java.lang.Class<?> wildcardClass18 = serializableStream17.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional19 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass18);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional20 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass18);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional21 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass18);
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass18);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean26 = serializableOptional24.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional24.stream();
        java.io.Serializable serializable28 = serializableOptional24.get();
        java.io.Serializable serializable29 = serializableOptional24.orElseThrow();
        java.io.Serializable serializable30 = serializableOptional24.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional24.stream();
        java.util.Optional<java.io.Serializable> serializableOptional33 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean35 = serializableOptional33.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable37 = serializableOptional33.orElse((java.io.Serializable) '#');
        java.lang.String str38 = serializableOptional33.toString();
        java.util.Optional<java.io.Serializable> serializableOptional40 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean41 = serializableOptional40.isPresent();
        java.io.Serializable serializable43 = serializableOptional40.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable44 = serializableOptional40.get();
        java.lang.String str45 = serializableOptional40.toString();
        java.lang.Class<?> wildcardClass46 = serializableOptional40.getClass();
        java.io.Serializable serializable47 = serializableOptional33.orElse((java.io.Serializable) wildcardClass46);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional48 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass46);
        java.io.Serializable serializable49 = serializableOptional24.orElse((java.io.Serializable) wildcardClass46);
        java.util.Optional<java.io.Serializable> serializableOptional51 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable52 = serializableOptional51.get();
        java.lang.String str53 = serializableOptional51.toString();
        java.io.Serializable serializable54 = serializableOptional51.get();
        boolean boolean55 = serializableOptional51.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional57 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean58 = serializableOptional57.isPresent();
        java.io.Serializable serializable60 = serializableOptional57.orElse((java.io.Serializable) (byte) 10);
        java.util.stream.Stream<java.io.Serializable> serializableStream61 = serializableOptional57.stream();
        boolean boolean62 = serializableOptional51.equals((java.lang.Object) serializableOptional57);
        java.util.stream.Stream<java.io.Serializable> serializableStream63 = serializableOptional51.stream();
        boolean boolean64 = serializableOptional24.equals((java.lang.Object) serializableOptional51);
        boolean boolean65 = serializableOptional1.equals((java.lang.Object) serializableOptional51);
        java.util.Optional<java.io.Serializable> serializableOptional67 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean68 = serializableOptional67.isPresent();
        java.io.Serializable serializable69 = serializableOptional67.get();
        java.io.Serializable serializable70 = serializableOptional67.orElseThrow();
        boolean boolean71 = serializableOptional67.isEmpty();
        java.lang.Class<?> wildcardClass72 = serializableOptional67.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional73 = java.util.Optional.ofNullable((java.lang.reflect.GenericDeclaration) wildcardClass72);
        java.io.Serializable serializable74 = serializableOptional51.orElse((java.io.Serializable) wildcardClass72);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(genericDeclarationOptional19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional20);
        org.junit.Assert.assertNotNull(annotatedElementOptional21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertNotNull(serializableOptional33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Optional[1]" + "'", str38, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Optional[1]" + "'", str45, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional48);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (byte) 1 + "'", serializable49, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional51);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (byte) 1 + "'", serializable52, (byte) 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Optional[1]" + "'", str53, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (byte) 1 + "'", serializable54, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableOptional57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (byte) 1 + "'", serializable60, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(serializableStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableOptional67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (byte) 1 + "'", serializable69, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (byte) 1 + "'", serializable70, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(genericDeclarationOptional73);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (byte) 1 + "'", serializable74, (byte) 1);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = null;
        java.io.Serializable serializable7 = serializableOptional1.orElse(serializable6);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream8);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional7.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional7.stream();
        java.lang.Class<?> wildcardClass11 = serializableStream10.getClass();
        java.io.Serializable serializable12 = serializableOptional1.orElse((java.io.Serializable) wildcardClass11);
        java.io.Serializable serializable13 = serializableOptional1.orElseThrow();
        boolean boolean14 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        java.lang.String str6 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.lang.String str10 = serializableOptional1.toString();
        boolean boolean11 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        boolean boolean6 = serializableOptional1.isPresent();
        boolean boolean7 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.ofNullable((java.io.Serializable) 10.0f);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.Class<?> wildcardClass3 = serializable2.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + 10.0f + "'", serializable2, 10.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.lang.String str5 = serializableOptional1.toString();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean9 = serializableOptional8.isPresent();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (byte) 10);
        boolean boolean12 = serializableOptional8.isPresent();
        boolean boolean13 = serializableOptional8.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional8.stream();
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass20 = serializableOptional17.getClass();
        java.io.Serializable serializable21 = serializableOptional8.orElse((java.io.Serializable) wildcardClass20);
        java.io.Serializable serializable22 = serializableOptional1.orElse((java.io.Serializable) wildcardClass20);
        boolean boolean23 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional14.stream();
        java.lang.Class<?> wildcardClass16 = serializableStream15.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional17 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass16);
        boolean boolean18 = serializableOptional12.equals((java.lang.Object) wildcardClass16);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional19 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor) wildcardClass16);
        java.io.Serializable serializable20 = serializableOptional1.orElse((java.io.Serializable) wildcardClass16);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeOptional17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.util.Optional<java.io.Serializable> serializableOptional20 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional20.stream();
        java.io.Serializable serializable23 = serializableOptional20.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional20.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional25 = java.util.Optional.ofNullable(serializableStream24);
        java.lang.Class<?> wildcardClass26 = serializableStreamOptional25.getClass();
        java.io.Serializable serializable27 = serializableOptional1.orElse((java.io.Serializable) wildcardClass26);
        boolean boolean28 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional1.stream();
        java.io.Serializable serializable30 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableOptional20);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableStreamOptional25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream31);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.lang.String str5 = serializableOptional1.toString();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional8 = java.util.Optional.empty();
        boolean boolean9 = serializableOptional1.equals((java.lang.Object) constantDescOptional8);
        java.io.Serializable serializable10 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(constantDescOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional8 = java.util.Optional.of(serializableOptional1);
        boolean boolean9 = serializableOptional1.isPresent();
        boolean boolean10 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional12.stream();
        boolean boolean14 = serializableOptional12.isEmpty();
        java.lang.Class<?> wildcardClass15 = serializableOptional12.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional16 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass15);
        java.io.Serializable serializable17 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableOptionalOptional8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(annotatedElementOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.io.Serializable serializable9 = serializableOptional7.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional11.stream();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional11.stream();
        boolean boolean16 = serializableOptional7.equals((java.lang.Object) serializableOptional11);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional7.stream();
        boolean boolean19 = serializableOptional7.isPresent();
        boolean boolean20 = serializableOptional7.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass12 = serializableStream11.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional13 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass12);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional14 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass12);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional15 = java.util.Optional.ofNullable(wildcardClass12);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass12);
        java.io.Serializable serializable17 = serializableOptional1.orElseThrow();
        java.lang.String str18 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeOptional13);
        org.junit.Assert.assertNotNull(annotatedElementOptional14);
        org.junit.Assert.assertNotNull(wildcardClassOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Optional[1]" + "'", str18, "Optional[1]");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = null;
        java.io.Serializable serializable6 = serializableOptional1.orElse(serializable5);
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.lang.String str11 = serializableOptional1.toString();
        java.io.Serializable serializable12 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable11 = serializableOptional10.get();
        java.io.Serializable serializable12 = serializableOptional10.orElseThrow();
        java.lang.Class<?> wildcardClass13 = serializable12.getClass();
        java.io.Serializable serializable14 = serializableOptional1.orElse((java.io.Serializable) wildcardClass13);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional15 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass13);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional15);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.io.Serializable serializable8 = null;
        java.io.Serializable serializable9 = serializableOptional1.orElse(serializable8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable15 = serializableOptional11.orElse((java.io.Serializable) '#');
        java.lang.String str16 = serializableOptional11.toString();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional18.isPresent();
        java.io.Serializable serializable21 = serializableOptional18.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable22 = serializableOptional18.get();
        java.lang.String str23 = serializableOptional18.toString();
        java.lang.Class<?> wildcardClass24 = serializableOptional18.getClass();
        java.io.Serializable serializable25 = serializableOptional11.orElse((java.io.Serializable) wildcardClass24);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional26 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass24);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional27 = java.util.Optional.of(wildcardClass24);
        java.util.Optional<java.io.Serializable> serializableOptional28 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass24);
        java.io.Serializable serializable29 = serializableOptional28.get();
        java.io.Serializable serializable30 = serializableOptional1.orElse(serializable29);
        boolean boolean31 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Optional[1]" + "'", str23, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(annotatedElementOptional26);
        org.junit.Assert.assertNotNull(wildcardClassOptional27);
        org.junit.Assert.assertNotNull(serializableOptional28);
        org.junit.Assert.assertNotNull(serializable29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean7 = serializableOptional6.isPresent();
        java.io.Serializable serializable9 = serializableOptional6.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable10 = serializableOptional6.get();
        java.lang.String str11 = serializableOptional6.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional6.stream();
        java.lang.Class<?> wildcardClass13 = serializableOptional6.getClass();
        java.io.Serializable serializable14 = serializableOptional1.orElse((java.io.Serializable) wildcardClass13);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass16 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass15 = serializableStream14.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional16 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.io.Serializable serializable18 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        boolean boolean19 = serializableOptional1.isEmpty();
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional20 = java.util.Optional.empty();
        boolean boolean21 = serializableOptional1.equals((java.lang.Object) constantDescOptional20);
        boolean boolean22 = serializableOptional1.isEmpty();
        java.io.Serializable serializable23 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeDescriptorOptional16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(constantDescOptional20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) str15);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        boolean boolean18 = serializableOptional1.isEmpty();
        boolean boolean19 = serializableOptional1.isEmpty();
        java.io.Serializable serializable20 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable9 = serializableOptional7.orElseThrow();
        java.io.Serializable serializable10 = serializableOptional7.orElseThrow();
        boolean boolean11 = serializableOptional7.isEmpty();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean16 = serializableOptional14.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional14.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional18 = java.util.Optional.empty();
        boolean boolean19 = serializableOptional14.equals((java.lang.Object) strComparableOptional18);
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional21.stream();
        java.io.Serializable serializable24 = serializableOptional21.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional21.stream();
        boolean boolean26 = serializableOptional14.equals((java.lang.Object) serializableStream25);
        java.lang.String str27 = serializableOptional14.toString();
        boolean boolean28 = serializableOptional7.equals((java.lang.Object) serializableOptional14);
        boolean boolean29 = serializableOptional7.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean33 = serializableOptional31.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable35 = serializableOptional31.orElse((java.io.Serializable) '#');
        java.lang.String str36 = serializableOptional31.toString();
        boolean boolean37 = serializableOptional31.isEmpty();
        java.lang.Class<?> wildcardClass38 = serializableOptional31.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional39 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass38);
        java.util.Optional<java.lang.constant.Constable> constableOptional40 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass38);
        java.io.Serializable serializable41 = serializableOptional7.orElse((java.io.Serializable) wildcardClass38);
        boolean boolean42 = serializableOptional7.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional44 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream45 = serializableOptional44.stream();
        java.lang.Class<?> wildcardClass46 = serializableStream45.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional47 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass46);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional48 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass46);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional49 = java.util.Optional.ofNullable(wildcardClass46);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional50 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass46);
        java.util.Optional<java.io.Serializable> serializableOptional51 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass46);
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableOptional51.stream();
        boolean boolean53 = serializableOptional7.equals((java.lang.Object) serializableStream52);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(strComparableOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Optional[1]" + "'", str27, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Optional[1]" + "'", str36, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional39);
        org.junit.Assert.assertNotNull(constableOptional40);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableOptional44);
        org.junit.Assert.assertNotNull(serializableStream45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeOptional47);
        org.junit.Assert.assertNotNull(annotatedElementOptional48);
        org.junit.Assert.assertNotNull(wildcardClassOptional49);
        org.junit.Assert.assertNotNull(genericDeclarationOptional50);
        org.junit.Assert.assertNotNull(serializableOptional51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional9 = java.util.Optional.ofNullable(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableStreamOptional9);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional12 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable13 = serializableOptional12.get();
        java.io.Serializable serializable14 = serializableOptional12.get();
        boolean boolean15 = serializableOptional12.isPresent();
        java.io.Serializable serializable16 = serializableOptional12.get();
        boolean boolean17 = serializableOptional12.isPresent();
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) boolean17);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.io.Serializable serializable10 = serializableOptional1.get();
        boolean boolean11 = serializableOptional1.isEmpty();
        boolean boolean12 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean15 = serializableOptional14.isPresent();
        java.io.Serializable serializable17 = serializableOptional14.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable18 = serializableOptional14.get();
        java.lang.String str19 = serializableOptional14.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional14.stream();
        boolean boolean21 = serializableOptional14.isPresent();
        java.io.Serializable serializable22 = serializableOptional14.orElseThrow();
        boolean boolean23 = serializableOptional14.isEmpty();
        java.io.Serializable serializable24 = serializableOptional14.get();
        boolean boolean25 = serializableOptional1.equals((java.lang.Object) serializableOptional14);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Optional[1]" + "'", str19, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.io.Serializable serializable8 = null;
        java.io.Serializable serializable9 = serializableOptional1.orElse(serializable8);
        java.io.Serializable serializable11 = serializableOptional1.orElse((java.io.Serializable) "Optional.empty");
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable23 = serializableOptional19.orElse((java.io.Serializable) '#');
        java.lang.String str24 = serializableOptional19.toString();
        java.lang.Class<?> wildcardClass25 = serializableOptional19.getClass();
        java.io.Serializable serializable26 = serializableOptional1.orElse((java.io.Serializable) wildcardClass25);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional27 = java.util.Optional.ofNullable((java.lang.reflect.GenericDeclaration) wildcardClass25);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Optional[1]" + "'", str24, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertNotNull(genericDeclarationOptional27);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.of((java.lang.constant.ConstantDesc) 100L);
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        java.io.Serializable serializable14 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.lang.Class<?> wildcardClass16 = serializableOptional8.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertNotNull(serializableStream20);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional16.stream();
        java.io.Serializable serializable19 = serializableOptional16.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable20 = serializableOptional16.get();
        boolean boolean21 = serializableOptional16.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional16.stream();
        boolean boolean23 = serializableOptional8.equals((java.lang.Object) serializableOptional16);
        java.util.Optional<java.io.Serializable> serializableOptional25 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean27 = serializableOptional25.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional25.stream();
        java.io.Serializable serializable29 = serializableOptional25.orElseThrow();
        java.io.Serializable serializable30 = serializableOptional25.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableOptional25.stream();
        java.io.Serializable serializable32 = serializableOptional25.orElseThrow();
        boolean boolean33 = serializableOptional16.equals((java.lang.Object) serializableOptional25);
        java.lang.String str34 = serializableOptional25.toString();
        java.io.Serializable serializable35 = serializableOptional25.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(serializableOptional25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Optional[1]" + "'", str34, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.ofNullable((java.io.Serializable) 10.0f);
        java.lang.String str2 = serializableOptional1.toString();
        boolean boolean3 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Optional[10.0]" + "'", str2, "Optional[10.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + 10.0f + "'", serializable4, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass10 = serializableStream9.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional11 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass10);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional12 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass10);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional13 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass10);
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) genericDeclarationOptional13);
        java.io.Serializable serializable15 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(typeOptional11);
        org.junit.Assert.assertNotNull(typeDescriptorOptional12);
        org.junit.Assert.assertNotNull(genericDeclarationOptional13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional17.stream();
        boolean boolean19 = serializableOptional17.isEmpty();
        java.io.Serializable serializable20 = serializableOptional17.orElseThrow();
        boolean boolean21 = serializableOptional17.isPresent();
        boolean boolean22 = serializableOptional17.isEmpty();
        boolean boolean23 = serializableOptional17.isEmpty();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) boolean23);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable7 = serializableOptional6.get();
        java.io.Serializable serializable8 = serializableOptional6.get();
        java.io.Serializable serializable9 = serializableOptional6.get();
        boolean boolean10 = serializableOptional6.isEmpty();
        java.io.Serializable serializable11 = serializableOptional6.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional6.stream();
        java.lang.Class<?> wildcardClass13 = serializableStream12.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional14 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass13);
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) typeDescriptorOptional14);
        boolean boolean16 = serializableOptional1.isEmpty();
        java.io.Serializable serializable17 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeDescriptorOptional14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional0);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional7.isPresent();
        java.io.Serializable serializable10 = serializableOptional7.orElse((java.io.Serializable) (byte) 10);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional7.stream();
        boolean boolean12 = serializableOptional1.equals((java.lang.Object) serializableOptional7);
        java.io.Serializable serializable13 = serializableOptional7.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        boolean boolean11 = serializableOptional1.isEmpty();
        java.io.Serializable serializable12 = serializableOptional1.get();
        java.io.Serializable serializable13 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.io.Serializable serializable11 = serializableOptional9.get();
        java.io.Serializable serializable12 = serializableOptional9.get();
        boolean boolean13 = serializableOptional9.isEmpty();
        java.io.Serializable serializable14 = serializableOptional9.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional9.stream();
        java.lang.Class<?> wildcardClass16 = serializableStream15.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass16);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional18 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass16);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) typeDescriptorOptional18);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional20 = java.util.Optional.empty();
        boolean boolean21 = serializableOptional1.equals((java.lang.Object) serializableStreamOptional20);
        java.util.Optional<java.io.Serializable> serializableOptional23 = java.util.Optional.ofNullable((java.io.Serializable) 10.0f);
        java.io.Serializable serializable24 = serializableOptional23.get();
        java.lang.String str25 = serializableOptional23.toString();
        boolean boolean26 = serializableOptional1.equals((java.lang.Object) str25);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertNotNull(typeDescriptorOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStreamOptional20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + 10.0f + "'", serializable24, 10.0f);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Optional[10.0]" + "'", str25, "Optional[10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.lang.String str9 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream10);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) 1.0f);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable4 = serializableOptional3.get();
        java.io.Serializable serializable5 = serializableOptional3.get();
        java.io.Serializable serializable6 = serializableOptional3.get();
        java.io.Serializable serializable8 = serializableOptional3.orElse((java.io.Serializable) 100L);
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass12 = serializableStream11.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional13 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass12);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional14 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass12);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional15 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass12);
        boolean boolean16 = serializableOptional3.equals((java.lang.Object) genericDeclarationOptional15);
        boolean boolean17 = serializableOptional1.equals((java.lang.Object) genericDeclarationOptional15);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeOptional13);
        org.junit.Assert.assertNotNull(typeDescriptorOptional14);
        org.junit.Assert.assertNotNull(genericDeclarationOptional15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        boolean boolean6 = serializableOptional1.isEmpty();
        boolean boolean7 = serializableOptional1.isEmpty();
        java.io.Serializable serializable8 = serializableOptional1.get();
        boolean boolean9 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        boolean boolean8 = serializableOptional6.isEmpty();
        java.io.Serializable serializable9 = serializableOptional6.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional11.stream();
        java.io.Serializable serializable15 = serializableOptional11.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional11.getClass();
        java.io.Serializable serializable17 = serializableOptional6.orElse((java.io.Serializable) wildcardClass16);
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) wildcardClass16);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional20 = java.util.Optional.ofNullable(serializableOptional1);
        java.lang.Class<?> wildcardClass21 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertNotNull(serializableOptionalOptional20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.Optional<java.lang.reflect.Type> typeOptional0 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass1 = typeOptional0.getClass();
        org.junit.Assert.assertNotNull(typeOptional0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional5 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.lang.Class<?> wildcardClass9 = serializableStream8.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional10 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass9);
        boolean boolean11 = serializableOptional5.equals((java.lang.Object) wildcardClass9);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional12 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass9);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass9);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableOptional5);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeOptional10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(typeDescriptorOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.String str10 = serializableOptional1.toString();
        java.io.Serializable serializable11 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.Optional<java.io.Serializable> serializableOptional3 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional3.stream();
        java.lang.Class<?> wildcardClass5 = serializableStream4.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional6 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = serializableOptional1.equals((java.lang.Object) wildcardClass5);
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass10 = serializableStream9.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) wildcardClass10);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional3);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializableOptional11);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        boolean boolean10 = serializableOptional1.isPresent();
        java.lang.String str11 = serializableOptional1.toString();
        boolean boolean12 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass3 = serializableStream2.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional4 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass3);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional5 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass3);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional6 = java.util.Optional.ofNullable(wildcardClass3);
        java.util.Optional<java.lang.reflect.Type> typeOptional7 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeOptional4);
        org.junit.Assert.assertNotNull(annotatedElementOptional5);
        org.junit.Assert.assertNotNull(wildcardClassOptional6);
        org.junit.Assert.assertNotNull(typeOptional7);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) str15);
        java.lang.Class<?> wildcardClass17 = serializableOptional1.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional18 = java.util.Optional.of(wildcardClass17);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClassOptional18);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.get();
        boolean boolean7 = serializableOptional1.isPresent();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional16.stream();
        boolean boolean18 = serializableOptional16.isEmpty();
        java.io.Serializable serializable19 = serializableOptional16.orElseThrow();
        boolean boolean20 = serializableOptional16.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional22 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean23 = serializableOptional22.isPresent();
        java.io.Serializable serializable24 = serializableOptional22.orElseThrow();
        java.io.Serializable serializable25 = serializableOptional22.orElseThrow();
        boolean boolean26 = serializableOptional22.isEmpty();
        boolean boolean27 = serializableOptional16.equals((java.lang.Object) serializableOptional22);
        boolean boolean28 = serializableOptional22.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional22.stream();
        boolean boolean30 = serializableOptional1.equals((java.lang.Object) serializableStream29);
        java.io.Serializable serializable31 = serializableOptional1.get();
        java.io.Serializable serializable32 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(serializableOptional22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (byte) 1 + "'", serializable32, (byte) 1);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean16 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable20 = serializableOptional19.get();
        java.io.Serializable serializable21 = serializableOptional19.get();
        java.io.Serializable serializable22 = serializableOptional19.get();
        boolean boolean23 = serializableOptional19.isEmpty();
        java.io.Serializable serializable24 = serializableOptional19.orElseThrow();
        boolean boolean26 = serializableOptional19.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable27 = serializableOptional19.orElseThrow();
        java.io.Serializable serializable28 = serializableOptional19.get();
        java.util.Optional<java.io.Serializable> serializableOptional30 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean32 = serializableOptional30.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableOptional30.stream();
        boolean boolean34 = serializableOptional19.equals((java.lang.Object) serializableStream33);
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional35 = java.util.Optional.ofNullable(serializableStream33);
        java.lang.Class<?> wildcardClass36 = serializableStream33.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional37 = java.util.Optional.of((java.lang.constant.Constable) wildcardClass36);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional38 = java.util.Optional.ofNullable((java.lang.reflect.GenericDeclaration) wildcardClass36);
        boolean boolean39 = serializableOptional1.equals((java.lang.Object) genericDeclarationOptional38);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(serializableStreamOptional35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(constableOptional37);
        org.junit.Assert.assertNotNull(genericDeclarationOptional38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        java.io.Serializable serializable13 = serializableOptional8.orElse((java.io.Serializable) 100L);
        boolean boolean14 = serializableOptional8.isPresent();
        boolean boolean15 = serializableOptional8.isPresent();
        java.io.Serializable serializable16 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional8.stream();
        boolean boolean18 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean19 = serializableOptional8.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional21 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable22 = serializableOptional21.get();
        java.io.Serializable serializable23 = serializableOptional21.get();
        java.io.Serializable serializable24 = serializableOptional21.get();
        boolean boolean25 = serializableOptional21.isEmpty();
        java.io.Serializable serializable26 = serializableOptional21.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional21.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional21.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional21.stream();
        boolean boolean30 = serializableOptional8.equals((java.lang.Object) serializableStream29);
        java.util.Optional<java.io.Serializable> serializableOptional32 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean34 = serializableOptional32.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional32.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional36 = java.util.Optional.empty();
        boolean boolean37 = serializableOptional32.equals((java.lang.Object) strComparableOptional36);
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream40 = serializableOptional39.stream();
        java.io.Serializable serializable42 = serializableOptional39.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableOptional39.stream();
        boolean boolean44 = serializableOptional32.equals((java.lang.Object) serializableStream43);
        java.lang.String str45 = serializableOptional32.toString();
        java.io.Serializable serializable47 = serializableOptional32.orElse((java.io.Serializable) false);
        boolean boolean48 = serializableOptional32.isEmpty();
        java.lang.Class<?> wildcardClass49 = serializableOptional32.getClass();
        java.io.Serializable serializable50 = serializableOptional8.orElse((java.io.Serializable) wildcardClass49);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(serializableOptional21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (byte) 1 + "'", serializable24, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serializableOptional32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertNotNull(strComparableOptional36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertNotNull(serializableStream40);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Optional[1]" + "'", str45, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (byte) 1 + "'", serializable47, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 1 + "'", serializable50, (byte) 1);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.io.Serializable serializable11 = serializableOptional9.get();
        java.io.Serializable serializable12 = serializableOptional9.get();
        boolean boolean13 = serializableOptional9.isPresent();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional9);
        java.lang.String str15 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream16);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(serializableStream11);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        boolean boolean16 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        boolean boolean18 = serializableOptional1.isEmpty();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional19 = java.util.Optional.of(serializableOptional1);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableOptionalOptional19);
        org.junit.Assert.assertNotNull(serializableStream20);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass3 = serializableStream2.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional4 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass3);
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional5 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass3);
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional6 = java.util.Optional.ofNullable(wildcardClass3);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass3);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.ofNullable((java.io.Serializable) wildcardClass3);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable10 = serializableOptional8.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeOptional4);
        org.junit.Assert.assertNotNull(annotatedElementOptional5);
        org.junit.Assert.assertNotNull(wildcardClassOptional6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(serializable10);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        boolean boolean7 = serializableOptional1.isEmpty();
        boolean boolean8 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.util.Optional<java.lang.constant.Constable> constableOptional9 = java.util.Optional.of((java.lang.constant.Constable) 100);
        java.lang.Class<?> wildcardClass10 = constableOptional9.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional11 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass10);
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional12 = java.util.Optional.of((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass10);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass10);
        java.util.Optional<java.io.Serializable> serializableOptional15 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable16 = serializableOptional15.get();
        java.io.Serializable serializable17 = serializableOptional15.get();
        java.io.Serializable serializable18 = serializableOptional15.get();
        boolean boolean19 = serializableOptional15.isEmpty();
        java.io.Serializable serializable20 = serializableOptional15.orElseThrow();
        boolean boolean22 = serializableOptional15.equals((java.lang.Object) 100.0d);
        java.io.Serializable serializable23 = serializableOptional15.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional15.stream();
        java.io.Serializable serializable25 = serializableOptional15.get();
        java.lang.Class<?> wildcardClass26 = serializableOptional15.getClass();
        java.io.Serializable serializable27 = serializableOptional1.orElse((java.io.Serializable) wildcardClass26);
        java.util.Optional<java.io.Serializable> serializableOptional29 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream30 = serializableOptional29.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional31 = java.util.Optional.ofNullable(serializableOptional29);
        boolean boolean32 = serializableOptional29.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional34 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional34.stream();
        boolean boolean36 = serializableOptional34.isEmpty();
        java.io.Serializable serializable37 = serializableOptional34.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean41 = serializableOptional39.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream42 = serializableOptional39.stream();
        java.io.Serializable serializable43 = serializableOptional39.get();
        java.lang.Class<?> wildcardClass44 = serializableOptional39.getClass();
        java.io.Serializable serializable45 = serializableOptional34.orElse((java.io.Serializable) wildcardClass44);
        boolean boolean46 = serializableOptional29.equals((java.lang.Object) wildcardClass44);
        java.util.Optional<java.io.Serializable> serializableOptional48 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream49 = serializableOptional48.stream();
        java.io.Serializable serializable51 = serializableOptional48.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableOptional48.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional53 = java.util.Optional.ofNullable(serializableStream52);
        java.lang.Class<?> wildcardClass54 = serializableStreamOptional53.getClass();
        java.io.Serializable serializable55 = serializableOptional29.orElse((java.io.Serializable) wildcardClass54);
        java.lang.String str56 = serializableOptional29.toString();
        boolean boolean57 = serializableOptional1.equals((java.lang.Object) str56);
        boolean boolean58 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream59 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(constableOptional9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(typeOptional11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional29);
        org.junit.Assert.assertNotNull(serializableStream30);
        org.junit.Assert.assertNotNull(serializableOptionalOptional31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(serializableOptional34);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serializableStream42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (byte) 1 + "'", serializable45, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serializableOptional48);
        org.junit.Assert.assertNotNull(serializableStream49);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (byte) 1 + "'", serializable51, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertNotNull(serializableStreamOptional53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (byte) 1 + "'", serializable55, (byte) 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Optional[1]" + "'", str56, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(serializableStream59);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isEmpty();
        boolean boolean18 = serializableOptional10.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass20 = serializableStream19.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional6 = java.util.Optional.ofNullable(serializableOptional1);
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable8 = serializableOptional1.get();
        java.lang.String str9 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Optional[1]" + "'", str9, "Optional[1]");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.util.Optional<java.io.Serializable> serializableOptional0 = java.util.Optional.empty();
        java.util.stream.Stream<java.io.Serializable> serializableStream1 = serializableOptional0.stream();
        java.lang.String str2 = serializableOptional0.toString();
        java.lang.String str3 = serializableOptional0.toString();
        org.junit.Assert.assertNotNull(serializableOptional0);
        org.junit.Assert.assertNotNull(serializableStream1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Optional.empty" + "'", str2, "Optional.empty");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional.empty" + "'", str3, "Optional.empty");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>> serializableBaseStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional1 = java.util.Optional.of(serializableBaseStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>> wildcardClassOfField0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional1 = java.util.Optional.of(wildcardClassOfField0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isEmpty();
        java.io.Serializable serializable10 = serializableOptional1.get();
        boolean boolean11 = serializableOptional1.isEmpty();
        boolean boolean12 = serializableOptional1.isEmpty();
        java.lang.String str13 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        java.io.Serializable serializable14 = serializableOptional8.orElseThrow();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean19 = serializableOptional17.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional17.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional21 = java.util.Optional.empty();
        boolean boolean22 = serializableOptional17.equals((java.lang.Object) strComparableOptional21);
        java.util.Optional<java.io.Serializable> serializableOptional24 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableOptional24.stream();
        java.io.Serializable serializable27 = serializableOptional24.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional24.stream();
        boolean boolean29 = serializableOptional17.equals((java.lang.Object) serializableStream28);
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional31.stream();
        java.lang.Class<?> wildcardClass33 = serializableStream32.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional34 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass33);
        java.io.Serializable serializable35 = serializableOptional17.orElse((java.io.Serializable) wildcardClass33);
        java.io.Serializable serializable36 = serializableOptional1.orElse(serializable35);
        java.util.Optional<java.io.Serializable> serializableOptional38 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream39 = serializableOptional38.stream();
        java.io.Serializable serializable41 = serializableOptional38.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable42 = serializableOptional38.get();
        boolean boolean43 = serializableOptional38.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional45 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean47 = serializableOptional45.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable49 = serializableOptional45.orElse((java.io.Serializable) '#');
        java.lang.String str50 = serializableOptional45.toString();
        boolean boolean51 = serializableOptional45.isEmpty();
        boolean boolean52 = serializableOptional38.equals((java.lang.Object) serializableOptional45);
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        boolean boolean55 = serializableOptional45.equals((java.lang.Object) wildcardClass54);
        boolean boolean56 = serializableOptional1.equals((java.lang.Object) wildcardClass54);
        java.util.Optional<java.io.Serializable> serializableOptional58 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream59 = serializableOptional58.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional60 = java.util.Optional.ofNullable(serializableOptional58);
        boolean boolean61 = serializableOptional58.isPresent();
        boolean boolean62 = serializableOptional58.isPresent();
        java.io.Serializable serializable64 = serializableOptional58.orElse((java.io.Serializable) (byte) 100);
        java.io.Serializable serializable65 = serializableOptional58.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional67 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable68 = serializableOptional67.get();
        java.io.Serializable serializable69 = serializableOptional67.get();
        java.io.Serializable serializable70 = serializableOptional67.get();
        java.io.Serializable serializable72 = serializableOptional67.orElse((java.io.Serializable) 100L);
        boolean boolean73 = serializableOptional67.isPresent();
        boolean boolean74 = serializableOptional58.equals((java.lang.Object) serializableOptional67);
        boolean boolean75 = serializableOptional1.equals((java.lang.Object) boolean74);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertNotNull(strComparableOptional21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableOptional24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeOptional34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional38);
        org.junit.Assert.assertNotNull(serializableStream39);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(serializableOptional45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (byte) 1 + "'", serializable49, (byte) 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Optional[1]" + "'", str50, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableOptional58);
        org.junit.Assert.assertNotNull(serializableStream59);
        org.junit.Assert.assertNotNull(serializableOptionalOptional60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (byte) 1 + "'", serializable64, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (byte) 1 + "'", serializable65, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional67);
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (byte) 1 + "'", serializable68, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (byte) 1 + "'", serializable69, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (byte) 1 + "'", serializable70, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 1 + "'", serializable72, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional0 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass1 = autoCloseableOptional0.getClass();
        org.junit.Assert.assertNotNull(autoCloseableOptional0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) str15);
        java.io.Serializable serializable17 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable18 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream11 = serializableOptional10.stream();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable14 = serializableOptional10.get();
        boolean boolean15 = serializableOptional10.isPresent();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) serializableOptional10);
        boolean boolean17 = serializableOptional10.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableOptional19.stream();
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable27 = serializableOptional26.get();
        java.io.Serializable serializable28 = serializableOptional26.get();
        java.io.Serializable serializable29 = serializableOptional26.get();
        java.io.Serializable serializable31 = serializableOptional26.orElse((java.io.Serializable) 100L);
        boolean boolean32 = serializableOptional26.isPresent();
        boolean boolean33 = serializableOptional26.isPresent();
        java.io.Serializable serializable34 = serializableOptional26.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableOptional26.stream();
        boolean boolean36 = serializableOptional19.equals((java.lang.Object) serializableOptional26);
        boolean boolean37 = serializableOptional26.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable40 = serializableOptional39.get();
        java.io.Serializable serializable41 = serializableOptional39.get();
        java.io.Serializable serializable42 = serializableOptional39.get();
        boolean boolean43 = serializableOptional39.isEmpty();
        java.io.Serializable serializable44 = serializableOptional39.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream45 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream46 = serializableOptional39.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional39.stream();
        boolean boolean48 = serializableOptional26.equals((java.lang.Object) serializableStream47);
        boolean boolean49 = serializableOptional10.equals((java.lang.Object) serializableOptional26);
        java.lang.String str50 = serializableOptional26.toString();
        java.util.Optional<java.io.Serializable> serializableOptional52 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean53 = serializableOptional52.isPresent();
        java.io.Serializable serializable55 = serializableOptional52.orElse((java.io.Serializable) (byte) 10);
        boolean boolean56 = serializableOptional52.isPresent();
        boolean boolean57 = serializableOptional52.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional59 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream60 = serializableOptional59.stream();
        boolean boolean62 = serializableOptional59.equals((java.lang.Object) false);
        java.lang.String str63 = serializableOptional59.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream64 = serializableOptional59.stream();
        boolean boolean65 = serializableOptional52.equals((java.lang.Object) serializableOptional59);
        java.io.Serializable serializable66 = serializableOptional59.orElseThrow();
        boolean boolean67 = serializableOptional59.isEmpty();
        boolean boolean68 = serializableOptional26.equals((java.lang.Object) serializableOptional59);
        java.io.Serializable serializable69 = serializableOptional26.orElseThrow();
        java.util.Optional<java.lang.CharSequence> charSequenceOptional70 = java.util.Optional.empty();
        boolean boolean71 = serializableOptional26.equals((java.lang.Object) charSequenceOptional70);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertNotNull(serializableStream11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (byte) 1 + "'", serializable28, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (byte) 1 + "'", serializable42, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (byte) 1 + "'", serializable44, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream45);
        org.junit.Assert.assertNotNull(serializableStream46);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Optional[1]" + "'", str50, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (byte) 1 + "'", serializable55, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(serializableOptional59);
        org.junit.Assert.assertNotNull(serializableStream60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Optional[1]" + "'", str63, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (byte) 1 + "'", serializable66, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (byte) 1 + "'", serializable69, (byte) 1);
        org.junit.Assert.assertNotNull(charSequenceOptional70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional4 = java.util.Optional.of(serializableOptional1);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional7 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass6);
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) wildcardClass6);
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.get();
        java.io.Serializable serializable14 = serializableOptional11.get();
        boolean boolean15 = serializableOptional11.isEmpty();
        java.io.Serializable serializable16 = serializableOptional11.orElseThrow();
        boolean boolean18 = serializableOptional11.equals((java.lang.Object) 100.0d);
        boolean boolean19 = serializableOptional11.isPresent();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional20 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass21 = strComparableOptional20.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional22 = java.util.Optional.of((java.lang.reflect.AnnotatedElement) wildcardClass21);
        java.io.Serializable serializable23 = serializableOptional11.orElse((java.io.Serializable) wildcardClass21);
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional24 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass21);
        boolean boolean25 = serializableOptional1.equals((java.lang.Object) wildcardClass21);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableOptional20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(annotatedElementOptional22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(genericDeclarationOptional24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.io.Serializable serializable6 = serializableOptional1.get();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional9.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional11 = java.util.Optional.ofNullable(serializableOptional9);
        boolean boolean12 = serializableOptional9.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional14 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream15 = serializableOptional14.stream();
        boolean boolean16 = serializableOptional14.isEmpty();
        java.io.Serializable serializable17 = serializableOptional14.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean21 = serializableOptional19.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableOptional19.stream();
        java.io.Serializable serializable23 = serializableOptional19.get();
        java.lang.Class<?> wildcardClass24 = serializableOptional19.getClass();
        java.io.Serializable serializable25 = serializableOptional14.orElse((java.io.Serializable) wildcardClass24);
        boolean boolean26 = serializableOptional9.equals((java.lang.Object) wildcardClass24);
        java.util.Optional<java.io.Serializable> serializableOptional28 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional28.stream();
        java.io.Serializable serializable31 = serializableOptional28.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional28.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional33 = java.util.Optional.ofNullable(serializableStream32);
        java.lang.Class<?> wildcardClass34 = serializableStreamOptional33.getClass();
        java.io.Serializable serializable35 = serializableOptional9.orElse((java.io.Serializable) wildcardClass34);
        boolean boolean36 = serializableOptional9.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream37 = serializableOptional9.stream();
        java.lang.Class<?> wildcardClass38 = serializableStream37.getClass();
        java.io.Serializable serializable39 = serializableOptional1.orElse((java.io.Serializable) wildcardClass38);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertNotNull(serializableStream10);
        org.junit.Assert.assertNotNull(serializableOptionalOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(serializableOptional14);
        org.junit.Assert.assertNotNull(serializableStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (byte) 1 + "'", serializable23, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (byte) 1 + "'", serializable25, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableOptional28);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (byte) 1 + "'", serializable31, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertNotNull(serializableStreamOptional33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(serializableStream37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (byte) 1 + "'", serializable39, (byte) 1);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.io.Serializable serializable7 = serializableOptional1.get();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableStream10);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional8 = java.util.Optional.ofNullable(serializableStream7);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional9 = java.util.Optional.of((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream7);
        java.util.Optional<java.lang.AutoCloseable> autoCloseableOptional10 = java.util.Optional.of((java.lang.AutoCloseable) serializableStream7);
        java.lang.Class<?> wildcardClass11 = serializableStream7.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStreamOptional8);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional9);
        org.junit.Assert.assertNotNull(autoCloseableOptional10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isPresent();
        boolean boolean9 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable12 = serializableOptional11.get();
        java.io.Serializable serializable13 = serializableOptional11.orElseThrow();
        java.lang.Class<?> wildcardClass14 = serializable13.getClass();
        java.util.Optional<java.lang.constant.Constable> constableOptional15 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass14);
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass14);
        java.util.Optional<java.io.Serializable> serializableOptional17 = java.util.Optional.of((java.io.Serializable) wildcardClass14);
        boolean boolean18 = serializableOptional17.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(serializableOptionalOptional0);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.util.Optional<java.lang.constant.ConstantDesc> constantDescOptional1 = java.util.Optional.of((java.lang.constant.ConstantDesc) 10.0d);
        org.junit.Assert.assertNotNull(constantDescOptional1);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (-1L));
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional9.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional9.stream();
        java.io.Serializable serializable13 = serializableOptional9.get();
        boolean boolean14 = serializableOptional9.isPresent();
        boolean boolean15 = serializableOptional9.isEmpty();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) boolean15);
        boolean boolean17 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable17 = serializableOptional16.get();
        java.io.Serializable serializable18 = serializableOptional16.get();
        java.io.Serializable serializable19 = serializableOptional16.get();
        java.lang.String str20 = serializableOptional16.toString();
        boolean boolean21 = serializableOptional16.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional23 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean24 = serializableOptional23.isPresent();
        java.io.Serializable serializable26 = serializableOptional23.orElse((java.io.Serializable) (byte) 10);
        boolean boolean27 = serializableOptional23.isPresent();
        boolean boolean28 = serializableOptional23.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream29 = serializableOptional23.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream30 = serializableOptional23.stream();
        java.util.Optional<java.io.Serializable> serializableOptional32 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean34 = serializableOptional32.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass35 = serializableOptional32.getClass();
        java.io.Serializable serializable36 = serializableOptional23.orElse((java.io.Serializable) wildcardClass35);
        java.io.Serializable serializable37 = serializableOptional16.orElse((java.io.Serializable) wildcardClass35);
        java.util.Optional<java.io.Serializable> serializableOptional39 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream40 = serializableOptional39.stream();
        boolean boolean41 = serializableOptional39.isPresent();
        boolean boolean43 = serializableOptional39.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass44 = serializableOptional39.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional45 = java.util.Optional.of((java.io.Serializable) wildcardClass44);
        java.io.Serializable serializable46 = serializableOptional16.orElse((java.io.Serializable) wildcardClass44);
        boolean boolean47 = serializableOptional1.equals((java.lang.Object) serializableOptional16);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (byte) 1 + "'", serializable19, (byte) 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Optional[1]" + "'", str20, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(serializableOptional23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(serializableStream29);
        org.junit.Assert.assertNotNull(serializableStream30);
        org.junit.Assert.assertNotNull(serializableOptional32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional39);
        org.junit.Assert.assertNotNull(serializableStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(serializableOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.io.Serializable serializable8 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean21 = serializableOptional18.equals((java.lang.Object) false);
        java.lang.String str22 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) serializableOptional18);
        java.util.Optional<java.lang.Object> objOptional26 = java.util.Optional.ofNullable((java.lang.Object) (-1.0d));
        boolean boolean27 = serializableOptional8.equals((java.lang.Object) (-1.0d));
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objOptional26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.Class<?> wildcardClass10 = serializableOptional1.getClass();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean4 = serializableOptional1.equals((java.lang.Object) false);
        java.lang.String str5 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.io.Serializable serializable7 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable8 = null;
        java.io.Serializable serializable9 = serializableOptional1.orElse(serializable8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean13 = serializableOptional11.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable15 = serializableOptional11.orElse((java.io.Serializable) '#');
        java.lang.String str16 = serializableOptional11.toString();
        boolean boolean17 = serializableOptional11.isEmpty();
        java.lang.Class<?> wildcardClass18 = serializableOptional11.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional19 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass18);
        java.util.Optional<java.lang.reflect.Type> typeOptional20 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass18);
        java.io.Serializable serializable21 = serializableOptional1.orElse((java.io.Serializable) wildcardClass18);
        java.util.Optional<java.lang.Object> objOptional22 = java.util.Optional.ofNullable((java.lang.Object) wildcardClass18);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional[1]" + "'", str5, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional19);
        org.junit.Assert.assertNotNull(typeOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(objOptional22);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        boolean boolean7 = serializableOptional1.isPresent();
        java.lang.String str8 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional10 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional10.isPresent();
        java.io.Serializable serializable13 = serializableOptional10.orElse((java.io.Serializable) (byte) 10);
        boolean boolean14 = serializableOptional10.isPresent();
        boolean boolean15 = serializableOptional10.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream16 = serializableOptional10.stream();
        java.lang.Class<?> wildcardClass17 = serializableStream16.getClass();
        java.util.Optional<java.lang.reflect.Type> typeOptional18 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass17);
        boolean boolean19 = serializableOptional1.equals((java.lang.Object) typeOptional18);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(serializableStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeOptional18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.lang.String str4 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional6.stream();
        java.io.Serializable serializable8 = serializableOptional6.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional6.stream();
        java.io.Serializable serializable10 = null;
        java.io.Serializable serializable11 = serializableOptional6.orElse(serializable10);
        boolean boolean12 = serializableOptional6.isPresent();
        java.util.Optional<java.lang.Object> objOptional13 = java.util.Optional.ofNullable((java.lang.Object) serializableOptional6);
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional6);
        java.lang.String str15 = serializableOptional1.toString();
        boolean boolean16 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional[1]" + "'", str4, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objOptional13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional1.stream();
        boolean boolean9 = serializableOptional1.isPresent();
        java.io.Serializable serializable10 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional9 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor) wildcardClass8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeDescriptorOptional9);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (byte) 100);
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        boolean boolean9 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        boolean boolean6 = serializableOptional1.isPresent();
        java.lang.String str7 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        boolean boolean11 = serializableOptional8.equals((java.lang.Object) false);
        java.lang.String str12 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream13 = serializableOptional8.stream();
        boolean boolean14 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable15 = serializableOptional8.orElseThrow();
        boolean boolean16 = serializableOptional8.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream19 = serializableOptional18.stream();
        boolean boolean21 = serializableOptional18.equals((java.lang.Object) false);
        java.lang.String str22 = serializableOptional18.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional8.equals((java.lang.Object) serializableOptional18);
        boolean boolean25 = serializableOptional18.isEmpty();
        boolean boolean26 = serializableOptional18.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Optional[1]" + "'", str12, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertNotNull(serializableStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Optional[1]" + "'", str22, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional6.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional6.stream();
        java.io.Serializable serializable10 = serializableOptional6.orElseThrow();
        java.io.Serializable serializable11 = serializableOptional6.orElseThrow();
        java.lang.Class<?> wildcardClass12 = serializable11.getClass();
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass12);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        boolean boolean8 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.util.Optional<java.lang.String> strOptional10 = java.util.Optional.empty();
        boolean boolean11 = serializableOptional1.equals((java.lang.Object) strOptional10);
        java.io.Serializable serializable12 = serializableOptional1.get();
        java.lang.String str13 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(strOptional10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.lang.String str16 = serializableOptional8.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional8.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional18 = java.util.Optional.ofNullable(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(serializableOptionalOptional18);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElseThrow();
        boolean boolean7 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable10 = serializableOptional9.get();
        java.lang.String str11 = serializableOptional9.toString();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional12 = java.util.Optional.empty();
        java.lang.Class<?> wildcardClass13 = strComparableOptional12.getClass();
        java.io.Serializable serializable14 = serializableOptional9.orElse((java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = serializableOptional1.orElse(serializable14);
        java.io.Serializable serializable16 = serializableOptional1.get();
        java.io.Serializable serializable17 = serializableOptional1.get();
        java.util.Optional<java.io.Serializable> serializableOptional19 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream20 = serializableOptional19.stream();
        java.io.Serializable serializable21 = serializableOptional19.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional22 = java.util.Optional.of(serializableOptional19);
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional25 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass24);
        java.io.Serializable serializable26 = serializableOptional19.orElse((java.io.Serializable) wildcardClass24);
        java.io.Serializable serializable27 = serializableOptional19.get();
        boolean boolean28 = serializableOptional1.equals((java.lang.Object) serializableOptional19);
        java.util.Optional<java.io.Serializable> serializableOptional30 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean32 = serializableOptional30.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableOptional30.stream();
        java.io.Serializable serializable34 = serializableOptional30.get();
        java.lang.Class<?> wildcardClass35 = serializableOptional30.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional36 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass35);
        java.io.Serializable serializable37 = serializableOptional19.orElse((java.io.Serializable) wildcardClass35);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Optional[1]" + "'", str11, "Optional[1]");
        org.junit.Assert.assertNotNull(strComparableOptional12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional19);
        org.junit.Assert.assertNotNull(serializableStream20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (byte) 1 + "'", serializable21, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(genericDeclarationOptional25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (byte) 1 + "'", serializable27, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(serializableOptional30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional36);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (byte) 1 + "'", serializable37, (byte) 1);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream6 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable12 = serializableOptional8.get();
        boolean boolean13 = serializableOptional8.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass15 = serializableOptional8.getClass();
        java.io.Serializable serializable16 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableStream6);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean8 = serializableOptional6.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional6.stream();
        java.io.Serializable serializable10 = serializableOptional6.get();
        java.lang.Class<?> wildcardClass11 = serializableOptional6.getClass();
        java.io.Serializable serializable12 = serializableOptional1.orElse((java.io.Serializable) wildcardClass11);
        java.io.Serializable serializable13 = serializableOptional1.orElseThrow();
        java.lang.String str14 = serializableOptional1.toString();
        java.io.Serializable serializable15 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean5 = serializableOptional1.equals((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass6 = serializableOptional1.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) wildcardClass6);
        java.util.Optional<java.io.Serializable> serializableOptional9 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean11 = serializableOptional9.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional9.stream();
        java.io.Serializable serializable13 = serializableOptional9.get();
        boolean boolean14 = serializableOptional7.equals((java.lang.Object) serializableOptional9);
        java.util.Optional<java.io.Serializable> serializableOptional16 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean18 = serializableOptional16.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable20 = serializableOptional16.orElse((java.io.Serializable) '#');
        java.lang.String str21 = serializableOptional16.toString();
        boolean boolean22 = serializableOptional16.isEmpty();
        java.lang.Class<?> wildcardClass23 = serializableOptional16.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldOptional24 = java.util.Optional.ofNullable((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>) wildcardClass23);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional25 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass23);
        java.io.Serializable serializable26 = serializableOptional9.orElse((java.io.Serializable) wildcardClass23);
        boolean boolean27 = serializableOptional9.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream28 = serializableOptional9.stream();
        java.lang.String str29 = serializableOptional9.toString();
        java.util.Optional<java.io.Serializable> serializableOptional31 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean33 = serializableOptional31.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableOptional31.stream();
        java.io.Serializable serializable35 = serializableOptional31.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream36 = serializableOptional31.stream();
        java.util.Optional<java.io.Serializable> serializableOptional38 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable39 = serializableOptional38.get();
        java.io.Serializable serializable40 = serializableOptional38.get();
        java.io.Serializable serializable41 = serializableOptional38.get();
        java.io.Serializable serializable43 = serializableOptional38.orElse((java.io.Serializable) 100L);
        boolean boolean44 = serializableOptional38.isPresent();
        boolean boolean45 = serializableOptional38.isPresent();
        java.io.Serializable serializable46 = serializableOptional38.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableOptional38.stream();
        boolean boolean48 = serializableOptional31.equals((java.lang.Object) serializableOptional38);
        java.io.Serializable serializable49 = serializableOptional38.get();
        java.lang.Class<?> wildcardClass50 = serializable49.getClass();
        java.io.Serializable serializable51 = serializableOptional9.orElse(serializable49);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableOptional9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serializableOptional16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 1 + "'", serializable20, (byte) 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Optional[1]" + "'", str21, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldOptional24);
        org.junit.Assert.assertNotNull(typeDescriptorOptional25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (byte) 1 + "'", serializable26, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Optional[1]" + "'", str29, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (byte) 1 + "'", serializable35, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream36);
        org.junit.Assert.assertNotNull(serializableOptional38);
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (byte) 1 + "'", serializable39, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (byte) 1 + "'", serializable41, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (byte) 1 + "'", serializable46, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (byte) 1 + "'", serializable49, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (byte) 1 + "'", serializable51, (byte) 1);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.lang.String str8 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream10 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(serializableStream10);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.io.Serializable serializable6 = serializableOptional1.get();
        boolean boolean7 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.io.Serializable serializable6 = serializableOptional1.orElse((java.io.Serializable) 100L);
        boolean boolean7 = serializableOptional1.isPresent();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.lang.String str10 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 1 + "'", serializable6, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.io.Serializable serializable8 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.orElseThrow();
        boolean boolean5 = serializableOptional1.isPresent();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.io.Serializable serializable7 = serializableOptional1.get();
        java.lang.String str8 = serializableOptional1.toString();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.lang.String str3 = serializableOptional1.toString();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.lang.String str7 = serializableOptional1.toString();
        java.lang.Class<?> wildcardClass8 = serializableOptional1.getClass();
        java.util.Optional<java.lang.Class<?>> wildcardClassOptional9 = java.util.Optional.of(wildcardClass8);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Optional[1]" + "'", str7, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClassOptional9);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isEmpty();
        java.lang.String str3 = serializableOptional1.toString();
        boolean boolean4 = serializableOptional1.isEmpty();
        java.util.Optional<java.io.Serializable> serializableOptional6 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable7 = serializableOptional6.get();
        java.lang.String str8 = serializableOptional6.toString();
        java.lang.Class<?> wildcardClass9 = serializableOptional6.getClass();
        java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElementOptional10 = java.util.Optional.ofNullable((java.lang.reflect.AnnotatedElement) wildcardClass9);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) wildcardClass9);
        java.util.Optional<java.lang.constant.Constable> constableOptional12 = java.util.Optional.ofNullable((java.lang.constant.Constable) wildcardClass9);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass9);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Optional[1]" + "'", str3, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional[1]" + "'", str8, "Optional[1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(annotatedElementOptional10);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertNotNull(constableOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable2 = serializableOptional1.get();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.io.Serializable serializable4 = serializableOptional1.get();
        boolean boolean5 = serializableOptional1.isEmpty();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.io.Serializable serializable10 = serializableOptional8.get();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        java.io.Serializable serializable13 = serializableOptional8.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional8.stream();
        java.lang.Class<?> wildcardClass15 = serializableStream14.getClass();
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional16 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.util.Optional<java.lang.invoke.TypeDescriptor> typeDescriptorOptional17 = java.util.Optional.of((java.lang.invoke.TypeDescriptor) wildcardClass15);
        java.io.Serializable serializable18 = serializableOptional1.orElse((java.io.Serializable) wildcardClass15);
        boolean boolean19 = serializableOptional1.isEmpty();
        boolean boolean20 = serializableOptional1.isPresent();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 1 + "'", serializable2, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 1 + "'", serializable10, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeDescriptorOptional16);
        org.junit.Assert.assertNotNull(typeDescriptorOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (byte) 1 + "'", serializable18, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.lang.Object obj8 = null;
        boolean boolean9 = serializableOptional1.equals(obj8);
        java.util.Optional<java.io.Serializable> serializableOptional11 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean12 = serializableOptional11.isPresent();
        java.io.Serializable serializable14 = serializableOptional11.orElse((java.io.Serializable) (byte) 10);
        java.lang.String str15 = serializableOptional11.toString();
        boolean boolean16 = serializableOptional1.equals((java.lang.Object) str15);
        java.util.Optional<java.io.Serializable> serializableOptional18 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean20 = serializableOptional18.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableOptional18.stream();
        java.io.Serializable serializable22 = serializableOptional18.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableOptional18.stream();
        boolean boolean24 = serializableOptional1.equals((java.lang.Object) serializableStream23);
        java.util.Optional<java.io.Serializable> serializableOptional26 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableOptional26.stream();
        java.io.Serializable serializable29 = serializableOptional26.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable30 = serializableOptional26.get();
        boolean boolean31 = serializableOptional26.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream32 = serializableOptional26.stream();
        boolean boolean33 = serializableOptional26.isPresent();
        java.io.Serializable serializable34 = serializableOptional26.get();
        boolean boolean35 = serializableOptional1.equals((java.lang.Object) serializableOptional26);
        java.io.Serializable serializable36 = serializableOptional26.orElseThrow();
        java.util.Optional<java.io.Serializable> serializableOptional38 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean39 = serializableOptional38.isPresent();
        java.io.Serializable serializable40 = serializableOptional38.orElseThrow();
        java.lang.Class<?> wildcardClass41 = serializable40.getClass();
        java.util.Optional<java.io.Serializable> serializableOptional42 = java.util.Optional.of((java.io.Serializable) wildcardClass41);
        java.io.Serializable serializable43 = serializableOptional26.orElse((java.io.Serializable) wildcardClass41);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serializableOptional11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 1 + "'", serializable14, (byte) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableOptional18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (byte) 1 + "'", serializable22, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serializableOptional26);
        org.junit.Assert.assertNotNull(serializableStream27);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 1 + "'", serializable29, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (byte) 1 + "'", serializable30, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(serializableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 1 + "'", serializable34, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) 1 + "'", serializable36, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptional38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (byte) 1 + "'", serializable40, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(serializableOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 1 + "'", serializable43, (byte) 1);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        boolean boolean4 = serializableOptional1.isEmpty();
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableStream7);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.lang.Comparable<java.lang.String>> strComparableOptional5 = java.util.Optional.empty();
        boolean boolean6 = serializableOptional1.equals((java.lang.Object) strComparableOptional5);
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional8.stream();
        java.io.Serializable serializable11 = serializableOptional8.orElse((java.io.Serializable) (short) 100);
        java.util.stream.Stream<java.io.Serializable> serializableStream12 = serializableOptional8.stream();
        boolean boolean13 = serializableOptional1.equals((java.lang.Object) serializableStream12);
        java.util.stream.Stream<java.io.Serializable> serializableStream14 = serializableOptional1.stream();
        java.lang.String str15 = serializableOptional1.toString();
        java.lang.String str16 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream17 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.Stream<java.io.Serializable>> serializableStreamOptional18 = java.util.Optional.ofNullable(serializableStream17);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(strComparableOptional5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serializableStream14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Optional[1]" + "'", str15, "Optional[1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Optional[1]" + "'", str16, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream17);
        org.junit.Assert.assertNotNull(serializableStreamOptional18);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isEmpty();
        java.io.Serializable serializable4 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.lang.String str6 = serializableOptional1.toString();
        java.io.Serializable serializable8 = serializableOptional1.orElse((java.io.Serializable) 100);
        java.io.Serializable serializable9 = serializableOptional1.get();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean3 = serializableOptional1.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable5 = serializableOptional1.orElse((java.io.Serializable) '#');
        java.lang.String str6 = serializableOptional1.toString();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.io.Serializable serializable9 = serializableOptional8.get();
        java.lang.String str10 = serializableOptional8.toString();
        java.io.Serializable serializable11 = serializableOptional8.get();
        boolean boolean12 = serializableOptional8.isEmpty();
        boolean boolean13 = serializableOptional8.isEmpty();
        java.lang.String str14 = serializableOptional8.toString();
        java.io.Serializable serializable15 = serializableOptional8.get();
        java.lang.Class<?> wildcardClass16 = serializableOptional8.getClass();
        java.io.Serializable serializable17 = serializableOptional1.orElse((java.io.Serializable) wildcardClass16);
        java.util.stream.Stream<java.io.Serializable> serializableStream18 = serializableOptional1.stream();
        boolean boolean19 = serializableOptional1.isEmpty();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional[1]" + "'", str10, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 1 + "'", serializable11, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Optional[1]" + "'", str14, "Optional[1]");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 1 + "'", serializable15, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (short) 100);
        java.io.Serializable serializable5 = serializableOptional1.get();
        boolean boolean6 = serializableOptional1.isPresent();
        java.util.Optional<java.io.Serializable> serializableOptional8 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean10 = serializableOptional8.equals((java.lang.Object) 10.0f);
        java.io.Serializable serializable12 = serializableOptional8.orElse((java.io.Serializable) '#');
        java.lang.String str13 = serializableOptional8.toString();
        boolean boolean14 = serializableOptional8.isEmpty();
        boolean boolean15 = serializableOptional1.equals((java.lang.Object) serializableOptional8);
        java.io.Serializable serializable16 = serializableOptional1.get();
        java.io.Serializable serializable17 = serializableOptional1.orElseThrow();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(serializableOptional8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Optional[1]" + "'", str13, "Optional[1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (byte) 1 + "'", serializable16, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 1 + "'", serializable17, (byte) 1);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        java.io.Serializable serializable5 = serializableOptional1.get();
        java.lang.String str6 = serializableOptional1.toString();
        java.util.stream.Stream<java.io.Serializable> serializableStream7 = serializableOptional1.stream();
        java.io.Serializable serializable8 = serializableOptional1.orElseThrow();
        java.util.stream.Stream<java.io.Serializable> serializableStream9 = serializableOptional1.stream();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.util.Optional<java.lang.reflect.GenericDeclaration> genericDeclarationOptional12 = java.util.Optional.of((java.lang.reflect.GenericDeclaration) wildcardClass11);
        java.io.Serializable serializable13 = serializableOptional1.orElse((java.io.Serializable) wildcardClass11);
        java.util.Optional<java.lang.reflect.Type> typeOptional14 = java.util.Optional.ofNullable((java.lang.reflect.Type) wildcardClass11);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertEquals("'" + serializable5 + "' != '" + (byte) 1 + "'", serializable5, (byte) 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional[1]" + "'", str6, "Optional[1]");
        org.junit.Assert.assertNotNull(serializableStream7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 1 + "'", serializable8, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream9);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(genericDeclarationOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 1 + "'", serializable13, (byte) 1);
        org.junit.Assert.assertNotNull(typeOptional14);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        boolean boolean2 = serializableOptional1.isPresent();
        java.io.Serializable serializable4 = serializableOptional1.orElse((java.io.Serializable) (byte) 10);
        boolean boolean5 = serializableOptional1.isPresent();
        java.io.Serializable serializable7 = serializableOptional1.orElse((java.io.Serializable) (-1L));
        boolean boolean8 = serializableOptional1.isPresent();
        java.io.Serializable serializable9 = serializableOptional1.get();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional10 = java.util.Optional.of(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + serializable4 + "' != '" + (byte) 1 + "'", serializable4, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 1 + "'", serializable7, (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 1 + "'", serializable9, (byte) 1);
        org.junit.Assert.assertNotNull(serializableOptionalOptional10);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional3 = java.util.Optional.ofNullable(serializableOptional1);
        boolean boolean4 = serializableOptional1.isPresent();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        java.util.Optional<java.io.Serializable> serializableOptional7 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream8 = serializableOptional7.stream();
        java.util.Optional<java.util.Optional<java.io.Serializable>> serializableOptionalOptional9 = java.util.Optional.ofNullable(serializableOptional7);
        boolean boolean10 = serializableOptional7.isPresent();
        java.lang.Class<?> wildcardClass11 = serializableOptional7.getClass();
        java.io.Serializable serializable12 = serializableOptional1.orElse((java.io.Serializable) wildcardClass11);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertNotNull(serializableOptionalOptional3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(serializableStream5);
        org.junit.Assert.assertNotNull(serializableOptional7);
        org.junit.Assert.assertNotNull(serializableStream8);
        org.junit.Assert.assertNotNull(serializableOptionalOptional9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 1 + "'", serializable12, (byte) 1);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        java.io.Serializable serializable3 = serializableOptional1.get();
        java.util.stream.Stream<java.io.Serializable> serializableStream4 = serializableOptional1.stream();
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional5 = java.util.Optional.ofNullable((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream4);
        java.util.Optional<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamOptional6 = java.util.Optional.of((java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>) serializableStream4);
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertEquals("'" + serializable3 + "' != '" + (byte) 1 + "'", serializable3, (byte) 1);
        org.junit.Assert.assertNotNull(serializableStream4);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional5);
        org.junit.Assert.assertNotNull(serializableBaseStreamOptional6);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.util.Optional<java.io.Serializable> serializableOptional1 = java.util.Optional.of((java.io.Serializable) (byte) 1);
        java.util.stream.Stream<java.io.Serializable> serializableStream2 = serializableOptional1.stream();
        boolean boolean3 = serializableOptional1.isPresent();
        boolean boolean4 = serializableOptional1.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream5 = serializableOptional1.stream();
        org.junit.Assert.assertNotNull(serializableOptional1);
        org.junit.Assert.assertNotNull(serializableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableStream5);
    }
}

