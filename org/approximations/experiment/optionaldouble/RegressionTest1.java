package org.approximations.experiment.optionaldouble;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        double double2 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        double double5 = optionalDouble1.orElseThrow();
        double double6 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble15.equals((java.lang.Object) optionalDouble17);
        java.util.stream.DoubleStream doubleStream23 = optionalDouble15.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble15);
        double double25 = optionalDouble15.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) (-1L));
        java.lang.Object obj22 = null;
        boolean boolean23 = optionalDouble1.equals(obj22);
        java.util.function.DoubleConsumer doubleConsumer24 = null;
        java.lang.Runnable runnable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer24, runnable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        double double2 = optionalDouble1.getAsDouble();
        double double3 = optionalDouble1.orElseThrow();
        double double4 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        boolean boolean2 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble26 = java.util.OptionalDouble.of(0.0d);
        double double27 = optionalDouble26.getAsDouble();
        boolean boolean28 = optionalDouble26.isPresent();
        boolean boolean29 = optionalDouble4.equals((java.lang.Object) boolean28);
        java.lang.String str30 = optionalDouble4.toString();
        java.lang.Class<?> wildcardClass31 = optionalDouble4.getClass();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionalDouble26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OptionalDouble[100.0]" + "'", str30, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        boolean boolean18 = optionalDouble1.isPresent();
        java.lang.String str19 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OptionalDouble[100.0]" + "'", str19, "OptionalDouble[100.0]");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.of((double) 1);
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        java.lang.Object obj6 = null;
        boolean boolean7 = optionalDouble1.equals(obj6);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble1.stream();
        boolean boolean9 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer10 = null;
        java.lang.Runnable runnable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer10, runnable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.function.DoubleConsumer doubleConsumer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        boolean boolean25 = optionalDouble0.isEmpty();
        java.util.stream.DoubleStream doubleStream26 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer27 = null;
        optionalDouble0.ifPresent(doubleConsumer27);
        boolean boolean29 = optionalDouble0.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(1.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer4 = null;
        java.lang.Runnable runnable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer4, runnable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100);
        boolean boolean2 = optionalDouble1.isEmpty();
        double double3 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble5.orElseGet(doubleSupplier6);
        java.lang.String str8 = optionalDouble5.toString();
        double double10 = optionalDouble5.orElse((double) 100.0f);
        double double12 = optionalDouble5.orElse((double) (short) 10);
        double double13 = optionalDouble5.getAsDouble();
        java.lang.Class<?> wildcardClass14 = optionalDouble5.getClass();
        boolean boolean15 = optionalDouble1.equals((java.lang.Object) wildcardClass14);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[1.0]" + "'", str8, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        java.lang.Runnable runnable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer6, runnable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        double double4 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double4 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        double double10 = optionalDouble1.orElse((double) (short) 0);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        boolean boolean12 = optionalDouble1.isPresent();
        boolean boolean13 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer14 = null;
        java.lang.Runnable runnable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer14, runnable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.empty();
        boolean boolean9 = optionalDouble7.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble11.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier17 = null;
        double double18 = optionalDouble11.orElseGet(doubleSupplier17);
        java.util.OptionalDouble optionalDouble20 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble20.stream();
        boolean boolean22 = optionalDouble20.isEmpty();
        boolean boolean24 = optionalDouble20.equals((java.lang.Object) 0.0f);
        boolean boolean25 = optionalDouble20.isEmpty();
        boolean boolean26 = optionalDouble20.isEmpty();
        boolean boolean27 = optionalDouble11.equals((java.lang.Object) optionalDouble20);
        double double28 = optionalDouble11.orElseThrow();
        boolean boolean29 = optionalDouble11.isEmpty();
        java.util.stream.DoubleStream doubleStream30 = optionalDouble11.stream();
        boolean boolean31 = optionalDouble7.equals((java.lang.Object) optionalDouble11);
        boolean boolean32 = optionalDouble1.equals((java.lang.Object) boolean31);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble20);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean15 = optionalDouble12.isPresent();
        java.util.stream.DoubleStream doubleStream16 = optionalDouble12.stream();
        boolean boolean17 = optionalDouble12.isEmpty();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble12);
        double double19 = optionalDouble12.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1.0f);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) (byte) 100);
        double double6 = optionalDouble5.getAsDouble();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble5.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        boolean boolean9 = optionalDouble5.isEmpty();
        double double11 = optionalDouble5.orElse((double) (byte) 1);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        boolean boolean6 = optionalDouble1.isEmpty();
        double double7 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.lang.String str6 = optionalDouble1.toString();
        java.lang.Class<?> wildcardClass7 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '#');
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer2, runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble8.orElseGet(doubleSupplier9);
        java.lang.Class<?> wildcardClass11 = optionalDouble8.getClass();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) wildcardClass11);
        java.lang.Class<?> wildcardClass13 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble12.orElseGet(doubleSupplier18);
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream22 = optionalDouble21.stream();
        boolean boolean23 = optionalDouble21.isEmpty();
        boolean boolean25 = optionalDouble21.equals((java.lang.Object) 0.0f);
        boolean boolean26 = optionalDouble21.isEmpty();
        boolean boolean27 = optionalDouble21.isEmpty();
        boolean boolean28 = optionalDouble12.equals((java.lang.Object) optionalDouble21);
        double double29 = optionalDouble12.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier30 = null;
        double double31 = optionalDouble12.orElseGet(doubleSupplier30);
        double double33 = optionalDouble12.orElse((double) (-1));
        boolean boolean34 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleConsumer doubleConsumer35 = null;
        java.lang.Runnable runnable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer35, runnable36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        double double8 = optionalDouble1.getAsDouble();
        java.lang.Class<?> wildcardClass9 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble1.orElseGet(doubleSupplier12);
        java.util.function.DoubleConsumer doubleConsumer14 = null;
        java.lang.Runnable runnable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer14, runnable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        java.util.stream.DoubleStream doubleStream12 = optionalDouble10.stream();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double14 = optionalDouble10.orElseThrow();
        double double16 = optionalDouble10.orElse((double) 100);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.lang.String str6 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble9.equals((java.lang.Object) optionalDouble11);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble19.stream();
        boolean boolean21 = optionalDouble19.isEmpty();
        double double22 = optionalDouble19.getAsDouble();
        boolean boolean23 = optionalDouble19.isPresent();
        java.util.OptionalDouble optionalDouble25 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble25.stream();
        boolean boolean27 = optionalDouble25.isEmpty();
        boolean boolean29 = optionalDouble25.equals((java.lang.Object) 0.0f);
        boolean boolean30 = optionalDouble25.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier31 = null;
        double double32 = optionalDouble25.orElseGet(doubleSupplier31);
        java.util.OptionalDouble optionalDouble34 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream35 = optionalDouble34.stream();
        boolean boolean36 = optionalDouble34.isEmpty();
        boolean boolean38 = optionalDouble34.equals((java.lang.Object) 0.0f);
        boolean boolean39 = optionalDouble34.isEmpty();
        boolean boolean40 = optionalDouble34.isEmpty();
        boolean boolean41 = optionalDouble25.equals((java.lang.Object) optionalDouble34);
        double double42 = optionalDouble25.orElseThrow();
        boolean boolean43 = optionalDouble25.isEmpty();
        boolean boolean44 = optionalDouble19.equals((java.lang.Object) optionalDouble25);
        boolean boolean45 = optionalDouble1.equals((java.lang.Object) boolean44);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(optionalDouble25);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble34);
        org.junit.Assert.assertNotNull(doubleStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble1.orElseGet(doubleSupplier10);
        java.lang.String str12 = optionalDouble1.toString();
        java.lang.Class<?> wildcardClass13 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OptionalDouble[100.0]" + "'", str12, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble26 = java.util.OptionalDouble.of(0.0d);
        double double27 = optionalDouble26.getAsDouble();
        boolean boolean28 = optionalDouble26.isPresent();
        boolean boolean29 = optionalDouble4.equals((java.lang.Object) boolean28);
        java.util.OptionalDouble optionalDouble31 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream32 = optionalDouble31.stream();
        boolean boolean33 = optionalDouble31.isEmpty();
        boolean boolean34 = optionalDouble31.isPresent();
        double double35 = optionalDouble31.getAsDouble();
        java.lang.Object obj36 = null;
        boolean boolean37 = optionalDouble31.equals(obj36);
        java.util.stream.DoubleStream doubleStream38 = optionalDouble31.stream();
        boolean boolean39 = optionalDouble4.equals((java.lang.Object) doubleStream38);
        boolean boolean40 = optionalDouble4.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionalDouble26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(optionalDouble31);
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        java.lang.String str9 = optionalDouble4.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OptionalDouble[1.0]" + "'", str9, "OptionalDouble[1.0]");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double10 = optionalDouble1.orElse((double) ' ');
        boolean boolean11 = optionalDouble1.isPresent();
        boolean boolean12 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        java.lang.Class<?> wildcardClass6 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble5.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble9.orElseGet(doubleSupplier15);
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream19 = optionalDouble18.stream();
        boolean boolean20 = optionalDouble18.isEmpty();
        boolean boolean22 = optionalDouble18.equals((java.lang.Object) 0.0f);
        boolean boolean23 = optionalDouble18.isEmpty();
        boolean boolean24 = optionalDouble18.isEmpty();
        boolean boolean25 = optionalDouble9.equals((java.lang.Object) optionalDouble18);
        double double26 = optionalDouble9.orElseThrow();
        boolean boolean27 = optionalDouble9.isEmpty();
        java.util.stream.DoubleStream doubleStream28 = optionalDouble9.stream();
        boolean boolean29 = optionalDouble5.equals((java.lang.Object) optionalDouble9);
        boolean boolean30 = optionalDouble5.isEmpty();
        boolean boolean31 = optionalDouble5.isPresent();
        boolean boolean32 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.lang.String str33 = optionalDouble0.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = optionalDouble0.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OptionalDouble.empty" + "'", str33, "OptionalDouble.empty");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) -1);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double5 = optionalDouble1.orElse((double) (-1L));
        double double7 = optionalDouble1.orElse((double) (short) 0);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble9.orElseGet(doubleSupplier15);
        double double17 = optionalDouble9.orElseThrow();
        java.util.stream.DoubleStream doubleStream18 = optionalDouble9.stream();
        java.util.OptionalDouble optionalDouble20 = java.util.OptionalDouble.of((double) 100L);
        double double21 = optionalDouble20.orElseThrow();
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 1L);
        double double25 = optionalDouble23.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble23.stream();
        boolean boolean27 = optionalDouble20.equals((java.lang.Object) optionalDouble23);
        boolean boolean28 = optionalDouble9.equals((java.lang.Object) optionalDouble23);
        java.util.OptionalDouble optionalDouble30 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier31 = null;
        double double32 = optionalDouble30.orElseGet(doubleSupplier31);
        java.lang.String str33 = optionalDouble30.toString();
        double double35 = optionalDouble30.orElse((double) 100.0f);
        boolean boolean36 = optionalDouble23.equals((java.lang.Object) double35);
        double double38 = optionalDouble23.orElse((double) 10L);
        boolean boolean39 = optionalDouble1.equals((java.lang.Object) double38);
        java.util.stream.DoubleStream doubleStream40 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(optionalDouble20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(optionalDouble30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OptionalDouble[1.0]" + "'", str33, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleStream40);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        double double10 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double5 = optionalDouble1.orElse((double) (-1L));
        double double7 = optionalDouble1.orElse((double) (short) 0);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble9.orElseGet(doubleSupplier15);
        double double17 = optionalDouble9.orElseThrow();
        java.util.stream.DoubleStream doubleStream18 = optionalDouble9.stream();
        java.util.OptionalDouble optionalDouble20 = java.util.OptionalDouble.of((double) 100L);
        double double21 = optionalDouble20.orElseThrow();
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 1L);
        double double25 = optionalDouble23.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble23.stream();
        boolean boolean27 = optionalDouble20.equals((java.lang.Object) optionalDouble23);
        boolean boolean28 = optionalDouble9.equals((java.lang.Object) optionalDouble23);
        java.util.OptionalDouble optionalDouble30 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier31 = null;
        double double32 = optionalDouble30.orElseGet(doubleSupplier31);
        java.lang.String str33 = optionalDouble30.toString();
        double double35 = optionalDouble30.orElse((double) 100.0f);
        boolean boolean36 = optionalDouble23.equals((java.lang.Object) double35);
        double double38 = optionalDouble23.orElse((double) 10L);
        boolean boolean39 = optionalDouble1.equals((java.lang.Object) double38);
        double double40 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(optionalDouble20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(optionalDouble30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OptionalDouble[1.0]" + "'", str33, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble1.stream();
        double double9 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of(0.0d);
        double double13 = optionalDouble12.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble12.orElseGet(doubleSupplier14);
        boolean boolean16 = optionalDouble1.equals((java.lang.Object) doubleSupplier14);
        double double18 = optionalDouble1.orElse((double) (short) 100);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        boolean boolean4 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream17 = optionalDouble16.stream();
        boolean boolean18 = optionalDouble16.isEmpty();
        boolean boolean20 = optionalDouble16.equals((java.lang.Object) 0.0f);
        boolean boolean21 = optionalDouble16.isEmpty();
        boolean boolean22 = optionalDouble16.isEmpty();
        boolean boolean23 = optionalDouble7.equals((java.lang.Object) optionalDouble16);
        double double24 = optionalDouble7.orElseThrow();
        boolean boolean25 = optionalDouble7.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble7);
        double double27 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        boolean boolean6 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        boolean boolean16 = optionalDouble0.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer17 = null;
        java.lang.Runnable runnable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble0.ifPresentOrElse(doubleConsumer17, runnable18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.lang.Runnable.run()\" because \"emptyAction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        boolean boolean6 = optionalDouble1.isEmpty();
        java.lang.Object obj7 = null;
        boolean boolean8 = optionalDouble1.equals(obj7);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) ' ');
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of((double) (short) -1);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble8.stream();
        boolean boolean10 = optionalDouble8.isEmpty();
        boolean boolean11 = optionalDouble1.equals((java.lang.Object) boolean10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.lang.String str6 = optionalDouble1.toString();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        boolean boolean2 = optionalDouble1.isEmpty();
        double double3 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) (-1L));
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble1.orElseGet(doubleSupplier22);
        double double24 = optionalDouble1.orElseThrow();
        double double26 = optionalDouble1.orElse((double) (byte) -1);
        boolean boolean27 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        double double10 = optionalDouble1.getAsDouble();
        double double12 = optionalDouble1.orElse(10.0d);
        double double14 = optionalDouble1.orElse((double) (short) 10);
        boolean boolean15 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        boolean boolean6 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(10.0d);
        boolean boolean18 = optionalDouble5.equals((java.lang.Object) optionalDouble17);
        boolean boolean19 = optionalDouble17.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        java.lang.String str2 = optionalDouble1.toString();
        boolean boolean3 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[0.0]" + "'", str2, "OptionalDouble[0.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        boolean boolean4 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double2 = optionalDouble1.getAsDouble();
        double double4 = optionalDouble1.orElse((double) '#');
        boolean boolean5 = optionalDouble1.isEmpty();
        double double6 = optionalDouble1.orElseThrow();
        boolean boolean7 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass8 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        double double10 = optionalDouble1.getAsDouble();
        double double12 = optionalDouble1.orElse(10.0d);
        java.util.OptionalDouble optionalDouble14 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream15 = optionalDouble14.stream();
        boolean boolean16 = optionalDouble1.equals((java.lang.Object) optionalDouble14);
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream19 = optionalDouble18.stream();
        boolean boolean20 = optionalDouble18.isEmpty();
        double double22 = optionalDouble18.orElse((double) 1L);
        java.util.stream.DoubleStream doubleStream23 = optionalDouble18.stream();
        boolean boolean24 = optionalDouble1.equals((java.lang.Object) optionalDouble18);
        double double25 = optionalDouble18.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) 10);
        boolean boolean22 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        boolean boolean13 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        optionalDouble0.ifPresent(doubleConsumer2);
        boolean boolean4 = optionalDouble0.isPresent();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble0.stream();
        boolean boolean6 = optionalDouble0.isEmpty();
        java.lang.Class<?> wildcardClass7 = optionalDouble0.getClass();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        double double12 = optionalDouble1.orElse((double) 1L);
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        boolean boolean15 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier16 = null;
        double double17 = optionalDouble1.orElseGet(doubleSupplier16);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble1.isEmpty();
        double double25 = optionalDouble1.orElse(100.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) -1);
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer2, runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double2 = optionalDouble1.getAsDouble();
        double double4 = optionalDouble1.orElse((double) '#');
        boolean boolean5 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        boolean boolean4 = optionalDouble1.isPresent();
        boolean boolean5 = optionalDouble1.isPresent();
        java.lang.String str6 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[0.0]" + "'", str6, "OptionalDouble[0.0]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(100.0d);
        java.lang.String str2 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[100.0]" + "'", str2, "OptionalDouble[100.0]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) 1L);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble9.equals((java.lang.Object) optionalDouble11);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble19.stream();
        boolean boolean21 = optionalDouble19.isEmpty();
        boolean boolean23 = optionalDouble19.equals((java.lang.Object) 0.0f);
        boolean boolean24 = optionalDouble19.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble19.orElseGet(doubleSupplier25);
        double double27 = optionalDouble19.orElseThrow();
        java.util.stream.DoubleStream doubleStream28 = optionalDouble19.stream();
        java.util.OptionalDouble optionalDouble30 = java.util.OptionalDouble.of((double) 100L);
        double double31 = optionalDouble30.orElseThrow();
        java.util.OptionalDouble optionalDouble33 = java.util.OptionalDouble.of((double) 1L);
        double double35 = optionalDouble33.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream36 = optionalDouble33.stream();
        boolean boolean37 = optionalDouble30.equals((java.lang.Object) optionalDouble33);
        boolean boolean38 = optionalDouble19.equals((java.lang.Object) optionalDouble33);
        boolean boolean39 = optionalDouble11.equals((java.lang.Object) optionalDouble33);
        java.util.function.DoubleSupplier doubleSupplier40 = null;
        double double41 = optionalDouble11.orElseGet(doubleSupplier40);
        double double42 = optionalDouble11.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(optionalDouble30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        boolean boolean9 = optionalDouble4.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble26 = java.util.OptionalDouble.of(0.0d);
        double double27 = optionalDouble26.getAsDouble();
        boolean boolean28 = optionalDouble26.isPresent();
        boolean boolean29 = optionalDouble4.equals((java.lang.Object) boolean28);
        java.util.OptionalDouble optionalDouble31 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream32 = optionalDouble31.stream();
        boolean boolean33 = optionalDouble31.isEmpty();
        boolean boolean35 = optionalDouble31.equals((java.lang.Object) 0.0f);
        boolean boolean36 = optionalDouble31.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier37 = null;
        double double38 = optionalDouble31.orElseGet(doubleSupplier37);
        java.util.OptionalDouble optionalDouble40 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream41 = optionalDouble40.stream();
        boolean boolean42 = optionalDouble40.isEmpty();
        boolean boolean44 = optionalDouble40.equals((java.lang.Object) 0.0f);
        boolean boolean45 = optionalDouble40.isEmpty();
        boolean boolean46 = optionalDouble40.isEmpty();
        boolean boolean47 = optionalDouble31.equals((java.lang.Object) optionalDouble40);
        boolean boolean48 = optionalDouble4.equals((java.lang.Object) optionalDouble31);
        double double49 = optionalDouble31.orElseThrow();
        double double50 = optionalDouble31.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionalDouble26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(optionalDouble31);
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble40);
        org.junit.Assert.assertNotNull(doubleStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble5.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble18.orElseGet(doubleSupplier19);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble18.stream();
        java.util.stream.DoubleStream doubleStream22 = optionalDouble18.stream();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble18.orElseGet(doubleSupplier23);
        boolean boolean25 = optionalDouble6.equals((java.lang.Object) double24);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble6.stream();
        java.util.stream.DoubleStream doubleStream27 = optionalDouble6.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertNotNull(doubleStream27);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        boolean boolean7 = optionalDouble1.isPresent();
        java.lang.String str8 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[100.0]" + "'", str8, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream9);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        boolean boolean11 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        double double4 = optionalDouble0.orElse(10.0d);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.of(0.0d);
        double double7 = optionalDouble6.getAsDouble();
        boolean boolean8 = optionalDouble6.isPresent();
        boolean boolean9 = optionalDouble6.isPresent();
        java.lang.Class<?> wildcardClass10 = optionalDouble6.getClass();
        boolean boolean11 = optionalDouble0.equals((java.lang.Object) optionalDouble6);
        boolean boolean12 = optionalDouble0.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        double double21 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble1.orElseGet(doubleSupplier22);
        java.util.function.DoubleConsumer doubleConsumer24 = null;
        java.lang.Runnable runnable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer24, runnable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean11 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        double double7 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.lang.String str10 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OptionalDouble[100.0]" + "'", str10, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream11);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double10 = optionalDouble1.orElse((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        java.lang.String str13 = optionalDouble1.toString();
        boolean boolean14 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OptionalDouble[100.0]" + "'", str13, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass11 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((-1.0d));
        java.util.function.DoubleConsumer doubleConsumer10 = null;
        java.lang.Runnable runnable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer10, runnable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        java.util.stream.DoubleStream doubleStream12 = optionalDouble10.stream();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble1.orElseGet(doubleSupplier14);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        double double22 = optionalDouble1.orElse((double) (-1L));
        double double23 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble1.stream();
        double double22 = optionalDouble1.orElse(1.0d);
        java.util.OptionalDouble optionalDouble24 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean25 = optionalDouble24.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble24);
        java.util.stream.DoubleStream doubleStream27 = optionalDouble24.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleStream27);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble23.isEmpty();
        double double28 = optionalDouble23.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '#');
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str8 = optionalDouble7.toString();
        double double9 = optionalDouble7.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble7.stream();
        double double11 = optionalDouble7.orElseThrow();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) double11);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[10.0]" + "'", str8, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) (short) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.0d + "'", double5 == 32.0d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '4');
        boolean boolean2 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElse((double) 100.0f);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble1.stream();
        double double22 = optionalDouble1.orElse(1.0d);
        boolean boolean23 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        double double12 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream13 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream16 = optionalDouble15.stream();
        boolean boolean17 = optionalDouble15.isEmpty();
        double double18 = optionalDouble15.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble15.orElseGet(doubleSupplier19);
        double double21 = optionalDouble15.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble15.orElseGet(doubleSupplier22);
        java.lang.String str24 = optionalDouble15.toString();
        boolean boolean25 = optionalDouble1.equals((java.lang.Object) str24);
        java.lang.String str26 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OptionalDouble[100.0]" + "'", str24, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OptionalDouble[100.0]" + "'", str26, "OptionalDouble[100.0]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        double double20 = optionalDouble1.orElse((double) (-1));
        java.lang.String str21 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OptionalDouble[100.0]" + "'", str21, "OptionalDouble[100.0]");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.lang.String str2 = optionalDouble1.toString();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.empty();
        boolean boolean4 = optionalDouble3.isPresent();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) boolean4);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[100.0]" + "'", str2, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        double double7 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double11 = optionalDouble1.orElse(0.0d);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble1.stream();
        double double13 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        double double7 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) ' ');
        boolean boolean6 = optionalDouble1.isEmpty();
        double double7 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        double double10 = optionalDouble1.orElse((double) (short) 0);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        double double4 = optionalDouble0.orElse(10.0d);
        java.lang.String str5 = optionalDouble0.toString();
        java.lang.String str6 = optionalDouble0.toString();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble0.stream();
        boolean boolean8 = optionalDouble0.isPresent();
        boolean boolean9 = optionalDouble0.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble.empty" + "'", str6, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        boolean boolean7 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass8 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) "");
        java.lang.String str7 = optionalDouble1.toString();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isPresent();
        java.util.function.DoubleSupplier doubleSupplier17 = null;
        double double18 = optionalDouble10.orElseGet(doubleSupplier17);
        boolean boolean19 = optionalDouble1.equals((java.lang.Object) doubleSupplier17);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble[10.0]" + "'", str7, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(1.0d);
        boolean boolean10 = optionalDouble1.equals((java.lang.Object) optionalDouble9);
        double double11 = optionalDouble9.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble1.orElseGet(doubleSupplier10);
        java.lang.String str12 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OptionalDouble[100.0]" + "'", str12, "OptionalDouble[100.0]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double3 = optionalDouble1.orElse((double) (-1));
        double double4 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        java.lang.Runnable runnable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer9, runnable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1.0f));
        boolean boolean2 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) (-1L));
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble1.orElseGet(doubleSupplier22);
        double double24 = optionalDouble1.orElseThrow();
        boolean boolean25 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble27 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream28 = optionalDouble27.stream();
        boolean boolean29 = optionalDouble27.isEmpty();
        double double30 = optionalDouble27.orElseThrow();
        java.lang.String str31 = optionalDouble27.toString();
        java.util.stream.DoubleStream doubleStream32 = optionalDouble27.stream();
        boolean boolean33 = optionalDouble1.equals((java.lang.Object) doubleStream32);
        java.util.function.DoubleSupplier doubleSupplier34 = null;
        double double35 = optionalDouble1.orElseGet(doubleSupplier34);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionalDouble27);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OptionalDouble[100.0]" + "'", str31, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble23.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer28 = null;
        java.lang.Runnable runnable29 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble23.ifPresentOrElse(doubleConsumer28, runnable29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.getAsDouble();
        boolean boolean14 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) (byte) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        boolean boolean9 = optionalDouble5.equals((java.lang.Object) 0.0f);
        boolean boolean10 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble5.orElseGet(doubleSupplier11);
        java.util.OptionalDouble optionalDouble14 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream15 = optionalDouble14.stream();
        boolean boolean16 = optionalDouble14.isEmpty();
        boolean boolean18 = optionalDouble14.equals((java.lang.Object) 0.0f);
        boolean boolean19 = optionalDouble14.isEmpty();
        boolean boolean20 = optionalDouble14.isEmpty();
        boolean boolean21 = optionalDouble5.equals((java.lang.Object) optionalDouble14);
        double double22 = optionalDouble5.orElseThrow();
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.empty();
        java.lang.Class<?> wildcardClass24 = optionalDouble23.getClass();
        boolean boolean25 = optionalDouble5.equals((java.lang.Object) optionalDouble23);
        boolean boolean26 = optionalDouble3.equals((java.lang.Object) optionalDouble5);
        boolean boolean27 = optionalDouble3.isPresent();
        boolean boolean28 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '4');
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        boolean boolean5 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble8.stream();
        boolean boolean10 = optionalDouble8.isEmpty();
        boolean boolean11 = optionalDouble8.isPresent();
        double double12 = optionalDouble8.getAsDouble();
        double double13 = optionalDouble8.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble8.orElseGet(doubleSupplier14);
        boolean boolean16 = optionalDouble8.isEmpty();
        double double17 = optionalDouble8.getAsDouble();
        double double19 = optionalDouble8.orElse(10.0d);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) double19);
        java.util.function.DoubleConsumer doubleConsumer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        double double6 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        double double10 = optionalDouble1.orElse((double) (short) 0);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass12 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.orElseThrow();
        java.lang.String str6 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[0.0]" + "'", str6, "OptionalDouble[0.0]");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        boolean boolean20 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        boolean boolean5 = optionalDouble0.isEmpty();
        double double7 = optionalDouble0.orElse(52.0d);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble0.stream();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        boolean boolean13 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble15.stream();
        double double22 = optionalDouble15.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble15.ifPresent(doubleConsumer23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        double double10 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.lang.String str6 = optionalDouble1.toString();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        double double13 = optionalDouble10.getAsDouble();
        boolean boolean14 = optionalDouble10.isPresent();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble10.orElseGet(doubleSupplier15);
        boolean boolean17 = optionalDouble10.isPresent();
        boolean boolean19 = optionalDouble10.equals((java.lang.Object) 0);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble10.stream();
        boolean boolean21 = optionalDouble1.equals((java.lang.Object) doubleStream20);
        java.util.function.DoubleConsumer doubleConsumer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) doubleStream11);
        double double13 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((-1.0d));
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        java.lang.String str4 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[-1.0]" + "'", str4, "OptionalDouble[-1.0]");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isEmpty();
        double double3 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble3.isEmpty();
        boolean boolean11 = optionalDouble3.equals((java.lang.Object) '4');
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        boolean boolean15 = optionalDouble1.isEmpty();
        boolean boolean16 = optionalDouble1.isEmpty();
        boolean boolean17 = optionalDouble1.isEmpty();
        double double18 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        double double22 = optionalDouble15.orElse((double) (short) -1);
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble15.orElseGet(doubleSupplier23);
        java.lang.String str25 = optionalDouble15.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OptionalDouble[1.0]" + "'", str25, "OptionalDouble[1.0]");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.lang.String str10 = optionalDouble1.toString();
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OptionalDouble[100.0]" + "'", str10, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream14 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream15 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(doubleStream15);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) boolean12);
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble1.orElseGet(doubleSupplier14);
        java.lang.Class<?> wildcardClass16 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble15.equals((java.lang.Object) optionalDouble17);
        java.util.stream.DoubleStream doubleStream23 = optionalDouble15.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble15);
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble15.orElseGet(doubleSupplier25);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        optionalDouble0.ifPresent(doubleConsumer2);
        double double5 = optionalDouble0.orElse((double) 0L);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble6.stream();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble6.stream();
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        optionalDouble6.ifPresent(doubleConsumer9);
        boolean boolean11 = optionalDouble0.equals((java.lang.Object) optionalDouble6);
        boolean boolean12 = optionalDouble6.isPresent();
        boolean boolean13 = optionalDouble6.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) doubleStream11);
        boolean boolean13 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double6 = optionalDouble1.orElse((-1.0d));
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 1.0f);
        boolean boolean10 = optionalDouble1.equals((java.lang.Object) optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble8.orElseGet(doubleSupplier9);
        java.lang.Class<?> wildcardClass11 = optionalDouble8.getClass();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) wildcardClass11);
        double double13 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble1.orElseGet(doubleSupplier14);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer7, runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        double double2 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        double double5 = optionalDouble1.orElseThrow();
        double double6 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1.0f);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        double double7 = optionalDouble4.getAsDouble();
        boolean boolean8 = optionalDouble4.isPresent();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble4.orElseGet(doubleSupplier9);
        boolean boolean12 = optionalDouble4.equals((java.lang.Object) "OptionalDouble[-1.0]");
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) "OptionalDouble[-1.0]");
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 100);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        boolean boolean2 = optionalDouble1.isEmpty();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        boolean boolean9 = optionalDouble5.equals((java.lang.Object) 0.0f);
        boolean boolean10 = optionalDouble5.isEmpty();
        boolean boolean11 = optionalDouble5.isPresent();
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble0.equals((java.lang.Object) doubleSupplier12);
        java.util.function.DoubleConsumer doubleConsumer15 = null;
        optionalDouble0.ifPresent(doubleConsumer15);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double2 = optionalDouble1.getAsDouble();
        double double4 = optionalDouble1.orElse((double) '#');
        boolean boolean5 = optionalDouble1.isEmpty();
        double double6 = optionalDouble1.orElseThrow();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        double double11 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        double double21 = optionalDouble1.getAsDouble();
        double double22 = optionalDouble1.orElseThrow();
        java.lang.String str23 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OptionalDouble[100.0]" + "'", str23, "OptionalDouble[100.0]");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 0.0f);
        double double2 = optionalDouble1.orElseThrow();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double4 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        boolean boolean18 = optionalDouble1.isPresent();
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) (-1));
        boolean boolean21 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble9.equals((java.lang.Object) optionalDouble11);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble19.stream();
        boolean boolean21 = optionalDouble19.isEmpty();
        boolean boolean23 = optionalDouble19.equals((java.lang.Object) 0.0f);
        boolean boolean24 = optionalDouble19.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble19.orElseGet(doubleSupplier25);
        double double27 = optionalDouble19.orElseThrow();
        java.util.stream.DoubleStream doubleStream28 = optionalDouble19.stream();
        java.util.OptionalDouble optionalDouble30 = java.util.OptionalDouble.of((double) 100L);
        double double31 = optionalDouble30.orElseThrow();
        java.util.OptionalDouble optionalDouble33 = java.util.OptionalDouble.of((double) 1L);
        double double35 = optionalDouble33.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream36 = optionalDouble33.stream();
        boolean boolean37 = optionalDouble30.equals((java.lang.Object) optionalDouble33);
        boolean boolean38 = optionalDouble19.equals((java.lang.Object) optionalDouble33);
        boolean boolean39 = optionalDouble11.equals((java.lang.Object) optionalDouble33);
        double double40 = optionalDouble11.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(optionalDouble30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) (-1L));
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble1.orElseGet(doubleSupplier22);
        double double25 = optionalDouble1.orElse((double) '4');
        boolean boolean26 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double2 = optionalDouble1.getAsDouble();
        double double4 = optionalDouble1.orElse((double) '#');
        boolean boolean5 = optionalDouble1.isEmpty();
        double double6 = optionalDouble1.orElseThrow();
        boolean boolean7 = optionalDouble1.isPresent();
        double double8 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.lang.String str2 = optionalDouble1.toString();
        boolean boolean3 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[1.0]" + "'", str2, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 0L);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse(32.0d);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        boolean boolean3 = optionalDouble1.isPresent();
        java.lang.String str4 = optionalDouble1.toString();
        java.lang.String str5 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[100.0]" + "'", str4, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        boolean boolean10 = optionalDouble4.isEmpty();
        boolean boolean12 = optionalDouble4.equals((java.lang.Object) '4');
        double double13 = optionalDouble4.getAsDouble();
        double double14 = optionalDouble4.getAsDouble();
        boolean boolean15 = optionalDouble4.isPresent();
        java.lang.String str16 = optionalDouble4.toString();
        java.util.stream.DoubleStream doubleStream17 = optionalDouble4.stream();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        java.util.function.DoubleConsumer doubleConsumer19 = null;
        java.lang.Runnable runnable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer19, runnable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble[100.0]" + "'", str16, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isEmpty();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElseThrow();
        double double11 = optionalDouble1.orElse((double) 0);
        double double13 = optionalDouble1.orElse(0.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        double double2 = optionalDouble1.getAsDouble();
        double double3 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        double double6 = optionalDouble5.orElseThrow();
        double double7 = optionalDouble5.orElseThrow();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble5.stream();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) doubleStream8);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) "");
        double double8 = optionalDouble1.orElse((double) 10.0f);
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        java.lang.Runnable runnable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer9, runnable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer20 = null;
        java.lang.Runnable runnable21 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer20, runnable21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        boolean boolean8 = optionalDouble1.isPresent();
        boolean boolean9 = optionalDouble1.isPresent();
        double double10 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        boolean boolean7 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        boolean boolean15 = optionalDouble9.isEmpty();
        double double17 = optionalDouble9.orElse((double) 100.0f);
        double double18 = optionalDouble9.orElseThrow();
        java.util.stream.DoubleStream doubleStream19 = optionalDouble9.stream();
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) doubleStream19);
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        java.util.function.DoubleConsumer doubleConsumer23 = null;
        java.lang.Runnable runnable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer23, runnable24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        double double2 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer7, runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        double double4 = optionalDouble0.orElse(10.0d);
        java.lang.String str5 = optionalDouble0.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble0.stream();
        java.lang.String str7 = optionalDouble0.toString();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble.empty" + "'", str7, "OptionalDouble.empty");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        java.util.function.DoubleConsumer doubleConsumer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble10.orElseGet(doubleSupplier11);
        double double14 = optionalDouble10.orElse((double) 'a');
        java.lang.String str15 = optionalDouble10.toString();
        boolean boolean16 = optionalDouble10.isPresent();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        boolean boolean18 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OptionalDouble[1.0]" + "'", str15, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        optionalDouble0.ifPresent(doubleConsumer2);
        double double5 = optionalDouble0.orElse((double) 0L);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble6.stream();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble6.stream();
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        optionalDouble6.ifPresent(doubleConsumer9);
        boolean boolean11 = optionalDouble0.equals((java.lang.Object) optionalDouble6);
        double double13 = optionalDouble6.orElse((double) 10L);
        java.util.function.DoubleConsumer doubleConsumer14 = null;
        java.lang.Runnable runnable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble6.ifPresentOrElse(doubleConsumer14, runnable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.lang.Runnable.run()\" because \"emptyAction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        optionalDouble0.ifPresent(doubleConsumer2);
        double double5 = optionalDouble0.orElse((double) 0L);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = optionalDouble0.orElseGet(doubleSupplier6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleSupplier.getAsDouble()\" because \"supplier\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble3.isEmpty();
        boolean boolean11 = optionalDouble3.equals((java.lang.Object) '4');
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        double double15 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(0.0d);
        double double18 = optionalDouble17.getAsDouble();
        boolean boolean19 = optionalDouble17.isPresent();
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) boolean19);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        boolean boolean18 = optionalDouble12.isEmpty();
        boolean boolean19 = optionalDouble3.equals((java.lang.Object) optionalDouble12);
        double double20 = optionalDouble3.orElseThrow();
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.empty();
        java.lang.Class<?> wildcardClass22 = optionalDouble21.getClass();
        boolean boolean23 = optionalDouble3.equals((java.lang.Object) optionalDouble21);
        boolean boolean24 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        boolean boolean25 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass26 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double6 = optionalDouble1.orElse((double) (short) 100);
        double double7 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream17 = optionalDouble16.stream();
        boolean boolean18 = optionalDouble16.isEmpty();
        boolean boolean20 = optionalDouble16.equals((java.lang.Object) 0.0f);
        boolean boolean21 = optionalDouble16.isEmpty();
        boolean boolean22 = optionalDouble16.isEmpty();
        boolean boolean23 = optionalDouble7.equals((java.lang.Object) optionalDouble16);
        double double24 = optionalDouble7.orElseThrow();
        boolean boolean25 = optionalDouble7.isEmpty();
        double double27 = optionalDouble7.orElse((double) (-1L));
        java.lang.Object obj28 = null;
        boolean boolean29 = optionalDouble7.equals(obj28);
        java.util.OptionalDouble optionalDouble31 = java.util.OptionalDouble.of((double) 100L);
        double double32 = optionalDouble31.getAsDouble();
        boolean boolean34 = optionalDouble31.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier35 = null;
        double double36 = optionalDouble31.orElseGet(doubleSupplier35);
        boolean boolean37 = optionalDouble31.isPresent();
        double double38 = optionalDouble31.getAsDouble();
        boolean boolean39 = optionalDouble7.equals((java.lang.Object) optionalDouble31);
        double double40 = optionalDouble31.getAsDouble();
        boolean boolean41 = optionalDouble1.equals((java.lang.Object) double40);
        java.lang.Class<?> wildcardClass42 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(optionalDouble31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble1.orElseGet(doubleSupplier12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream14);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        java.lang.Class<?> wildcardClass7 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isEmpty();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        java.lang.Class<?> wildcardClass16 = optionalDouble10.getClass();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isPresent();
        double double8 = optionalDouble1.orElse((double) 0L);
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        boolean boolean18 = optionalDouble12.isEmpty();
        boolean boolean19 = optionalDouble3.equals((java.lang.Object) optionalDouble12);
        double double20 = optionalDouble3.orElseThrow();
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.empty();
        java.lang.Class<?> wildcardClass22 = optionalDouble21.getClass();
        boolean boolean23 = optionalDouble3.equals((java.lang.Object) optionalDouble21);
        boolean boolean24 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.function.DoubleConsumer doubleConsumer25 = null;
        java.lang.Runnable runnable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer25, runnable26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        double double6 = optionalDouble1.orElseThrow();
        boolean boolean7 = optionalDouble1.isEmpty();
        java.lang.String str8 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[10.0]" + "'", str8, "OptionalDouble[10.0]");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        boolean boolean18 = optionalDouble12.isEmpty();
        boolean boolean19 = optionalDouble3.equals((java.lang.Object) optionalDouble12);
        double double20 = optionalDouble3.orElseThrow();
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.empty();
        java.lang.Class<?> wildcardClass22 = optionalDouble21.getClass();
        boolean boolean23 = optionalDouble3.equals((java.lang.Object) optionalDouble21);
        boolean boolean24 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.function.DoubleConsumer doubleConsumer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(10.0d);
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer2, runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean5 = optionalDouble4.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        double double15 = optionalDouble7.orElseThrow();
        boolean boolean16 = optionalDouble4.equals((java.lang.Object) optionalDouble7);
        boolean boolean17 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.function.DoubleConsumer doubleConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble4.ifPresent(doubleConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.lang.String str3 = optionalDouble0.toString();
        java.util.function.DoubleConsumer doubleConsumer4 = null;
        optionalDouble0.ifPresent(doubleConsumer4);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = optionalDouble0.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble.empty" + "'", str3, "OptionalDouble.empty");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble3.isEmpty();
        boolean boolean11 = optionalDouble3.equals((java.lang.Object) '4');
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        boolean boolean15 = optionalDouble1.isEmpty();
        boolean boolean16 = optionalDouble1.isEmpty();
        boolean boolean17 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 0L);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble19.stream();
        double double21 = optionalDouble19.getAsDouble();
        boolean boolean22 = optionalDouble1.equals((java.lang.Object) double21);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean5 = optionalDouble4.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        double double15 = optionalDouble7.orElseThrow();
        boolean boolean16 = optionalDouble4.equals((java.lang.Object) optionalDouble7);
        boolean boolean17 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        double double18 = optionalDouble4.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElse((double) (short) 100);
        boolean boolean9 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        boolean boolean14 = optionalDouble0.isPresent();
        double double16 = optionalDouble0.orElse((double) 100);
        java.lang.String str17 = optionalDouble0.toString();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble.empty" + "'", str17, "OptionalDouble.empty");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean15 = optionalDouble12.isPresent();
        java.util.stream.DoubleStream doubleStream16 = optionalDouble12.stream();
        boolean boolean17 = optionalDouble12.isEmpty();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble12);
        java.util.function.DoubleConsumer doubleConsumer19 = null;
        java.lang.Runnable runnable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble12.ifPresentOrElse(doubleConsumer19, runnable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double2 = optionalDouble1.getAsDouble();
        double double4 = optionalDouble1.orElse((double) '#');
        boolean boolean5 = optionalDouble1.isEmpty();
        double double6 = optionalDouble1.orElseThrow();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        double double10 = optionalDouble1.orElseThrow();
        java.lang.Class<?> wildcardClass11 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.lang.String str10 = optionalDouble1.toString();
        double double11 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OptionalDouble[100.0]" + "'", str10, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double11 = optionalDouble1.orElse(0.0d);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble1.stream();
        double double13 = optionalDouble1.getAsDouble();
        java.lang.String str14 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalDouble[100.0]" + "'", str14, "OptionalDouble[100.0]");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double6 = optionalDouble1.orElse((-1.0d));
        boolean boolean7 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.lang.String str4 = optionalDouble1.toString();
        double double6 = optionalDouble1.orElse((double) 100.0f);
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble8.stream();
        boolean boolean10 = optionalDouble8.isEmpty();
        boolean boolean12 = optionalDouble8.equals((java.lang.Object) 0.0f);
        boolean boolean13 = optionalDouble8.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble8.orElseGet(doubleSupplier14);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble17.isEmpty();
        boolean boolean23 = optionalDouble17.isEmpty();
        boolean boolean24 = optionalDouble8.equals((java.lang.Object) optionalDouble17);
        double double25 = optionalDouble8.orElseThrow();
        boolean boolean26 = optionalDouble8.isEmpty();
        double double27 = optionalDouble8.getAsDouble();
        double double28 = optionalDouble8.getAsDouble();
        double double29 = optionalDouble8.getAsDouble();
        java.util.OptionalDouble optionalDouble31 = java.util.OptionalDouble.of((double) (byte) 1);
        java.util.stream.DoubleStream doubleStream32 = optionalDouble31.stream();
        boolean boolean33 = optionalDouble8.equals((java.lang.Object) optionalDouble31);
        double double35 = optionalDouble8.orElse((double) (byte) 0);
        boolean boolean36 = optionalDouble1.equals((java.lang.Object) double35);
        java.util.stream.DoubleStream doubleStream37 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[1.0]" + "'", str4, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble31);
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleStream37);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.getAsDouble();
        java.lang.String str4 = optionalDouble1.toString();
        boolean boolean5 = optionalDouble1.isPresent();
        java.lang.String str6 = optionalDouble1.toString();
        java.lang.String str7 = optionalDouble1.toString();
        java.lang.String str8 = optionalDouble1.toString();
        boolean boolean9 = optionalDouble1.isEmpty();
        java.lang.Class<?> wildcardClass10 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[10.0]" + "'", str4, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[10.0]" + "'", str6, "OptionalDouble[10.0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble[10.0]" + "'", str7, "OptionalDouble[10.0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[10.0]" + "'", str8, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble18.orElseGet(doubleSupplier19);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble18.stream();
        java.util.stream.DoubleStream doubleStream22 = optionalDouble18.stream();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble18.orElseGet(doubleSupplier23);
        boolean boolean25 = optionalDouble6.equals((java.lang.Object) double24);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = optionalDouble6.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble26 = java.util.OptionalDouble.of(0.0d);
        double double27 = optionalDouble26.getAsDouble();
        boolean boolean28 = optionalDouble26.isPresent();
        boolean boolean29 = optionalDouble4.equals((java.lang.Object) boolean28);
        double double30 = optionalDouble4.getAsDouble();
        java.lang.Class<?> wildcardClass31 = optionalDouble4.getClass();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionalDouble26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble1.orElseGet(doubleSupplier19);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble1.stream();
        double double23 = optionalDouble1.orElse((double) (byte) -1);
        java.lang.String str24 = optionalDouble1.toString();
        double double25 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OptionalDouble[100.0]" + "'", str24, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(1.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.orElseThrow();
        java.lang.String str4 = optionalDouble1.toString();
        double double5 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[1.0]" + "'", str4, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1));
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElseThrow();
        java.lang.String str5 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass9 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream14 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass15 = doubleStream14.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElseThrow();
        double double10 = optionalDouble1.orElse(0.0d);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass12 = doubleStream11.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        optionalDouble0.ifPresent(doubleConsumer2);
        double double5 = optionalDouble0.orElse((double) 0L);
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        optionalDouble0.ifPresent(doubleConsumer6);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double6 = optionalDouble1.orElse(0.0d);
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double3 = optionalDouble1.orElse((double) (-1));
        double double4 = optionalDouble1.getAsDouble();
        double double5 = optionalDouble1.orElseThrow();
        double double7 = optionalDouble1.orElse(10.0d);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        double double13 = optionalDouble9.orElse((double) 'a');
        java.lang.String str14 = optionalDouble9.toString();
        double double16 = optionalDouble9.orElse((double) 1);
        java.lang.String str17 = optionalDouble9.toString();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble9);
        boolean boolean19 = optionalDouble1.isPresent();
        java.lang.String str20 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalDouble[1.0]" + "'", str14, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble[1.0]" + "'", str17, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OptionalDouble[10.0]" + "'", str20, "OptionalDouble[10.0]");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        boolean boolean5 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean8 = optionalDouble7.isPresent();
        boolean boolean9 = optionalDouble0.equals((java.lang.Object) optionalDouble7);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.lang.String str4 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[100.0]" + "'", str4, "OptionalDouble[100.0]");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        double double12 = optionalDouble4.orElseThrow();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double15 = optionalDouble1.orElse((double) 0L);
        double double16 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier17 = null;
        double double18 = optionalDouble1.orElseGet(doubleSupplier17);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.stream.DoubleStream doubleStream22 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream22);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        double double10 = optionalDouble1.getAsDouble();
        double double12 = optionalDouble1.orElse((-1.0d));
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean17 = optionalDouble16.isPresent();
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble19.stream();
        boolean boolean21 = optionalDouble19.isEmpty();
        boolean boolean23 = optionalDouble19.equals((java.lang.Object) 0.0f);
        boolean boolean24 = optionalDouble19.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble19.orElseGet(doubleSupplier25);
        double double27 = optionalDouble19.orElseThrow();
        boolean boolean28 = optionalDouble16.equals((java.lang.Object) optionalDouble19);
        double double30 = optionalDouble16.orElse((double) 0L);
        double double31 = optionalDouble16.getAsDouble();
        boolean boolean32 = optionalDouble1.equals((java.lang.Object) optionalDouble16);
        java.util.function.DoubleConsumer doubleConsumer33 = null;
        java.lang.Runnable runnable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble16.ifPresentOrElse(doubleConsumer33, runnable34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.orElseThrow();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer5 = null;
        java.lang.Runnable runnable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer5, runnable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(1.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.orElseThrow();
        double double4 = optionalDouble1.getAsDouble();
        double double5 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble1.orElseGet(doubleSupplier22);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        double double6 = optionalDouble1.getAsDouble();
        double double7 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        java.lang.Runnable runnable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer8, runnable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) -1);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer3, runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble3.isEmpty();
        boolean boolean11 = optionalDouble3.equals((java.lang.Object) '4');
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        boolean boolean15 = optionalDouble1.isEmpty();
        double double17 = optionalDouble1.orElse(0.0d);
        java.util.function.DoubleConsumer doubleConsumer18 = null;
        java.lang.Runnable runnable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer18, runnable19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        double double7 = optionalDouble1.orElse((double) (-1));
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass9 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 1);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble15.stream();
        java.util.function.DoubleConsumer doubleConsumer22 = null;
        java.lang.Runnable runnable23 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble15.ifPresentOrElse(doubleConsumer22, runnable23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleStream21);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        boolean boolean2 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        double double6 = optionalDouble1.orElse((double) ' ');
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        double double2 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        boolean boolean4 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        double double6 = optionalDouble0.orElse((double) (-1L));
        boolean boolean7 = optionalDouble0.isEmpty();
        java.lang.Class<?> wildcardClass8 = optionalDouble0.getClass();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double9 = optionalDouble4.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble1.stream();
        double double22 = optionalDouble1.orElse(1.0d);
        java.util.OptionalDouble optionalDouble24 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean25 = optionalDouble24.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble24);
        java.util.function.DoubleConsumer doubleConsumer27 = null;
        java.lang.Runnable runnable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble24.ifPresentOrElse(doubleConsumer27, runnable28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        double double9 = optionalDouble1.orElse(32.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        boolean boolean20 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        double double7 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 0.0f);
        double double2 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        java.lang.String str5 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[0.0]" + "'", str5, "OptionalDouble[0.0]");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        double double6 = optionalDouble0.orElse((double) (-1L));
        boolean boolean7 = optionalDouble0.isEmpty();
        java.lang.Object obj8 = null;
        boolean boolean9 = optionalDouble0.equals(obj8);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = optionalDouble0.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        double double20 = optionalDouble1.orElse((double) (byte) 100);
        double double21 = optionalDouble1.getAsDouble();
        java.lang.String str22 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OptionalDouble[100.0]" + "'", str22, "OptionalDouble[100.0]");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        double double11 = optionalDouble10.getAsDouble();
        boolean boolean13 = optionalDouble10.equals((java.lang.Object) (-1));
        boolean boolean14 = optionalDouble7.equals((java.lang.Object) boolean13);
        boolean boolean15 = optionalDouble1.equals((java.lang.Object) boolean13);
        java.util.function.DoubleConsumer doubleConsumer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) '4');
        double double10 = optionalDouble1.getAsDouble();
        double double11 = optionalDouble1.getAsDouble();
        double double12 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        double double15 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream17 = optionalDouble16.stream();
        boolean boolean18 = optionalDouble16.isEmpty();
        boolean boolean20 = optionalDouble16.equals((java.lang.Object) 0.0f);
        boolean boolean21 = optionalDouble16.isEmpty();
        boolean boolean22 = optionalDouble16.isEmpty();
        boolean boolean23 = optionalDouble7.equals((java.lang.Object) optionalDouble16);
        double double24 = optionalDouble7.orElseThrow();
        boolean boolean25 = optionalDouble7.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble7);
        java.util.function.DoubleConsumer doubleConsumer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble7.ifPresent(doubleConsumer27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        boolean boolean22 = optionalDouble1.isEmpty();
        boolean boolean23 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        java.lang.String str5 = optionalDouble0.toString();
        boolean boolean6 = optionalDouble0.isPresent();
        java.lang.String str7 = optionalDouble0.toString();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble.empty" + "'", str7, "OptionalDouble.empty");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.lang.String str17 = optionalDouble6.toString();
        double double19 = optionalDouble6.orElse((double) 1.0f);
        boolean boolean20 = optionalDouble6.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble.empty" + "'", str17, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        double double2 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        boolean boolean25 = optionalDouble0.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer26 = null;
        optionalDouble0.ifPresent(doubleConsumer26);
        boolean boolean28 = optionalDouble0.isPresent();
        java.util.function.DoubleConsumer doubleConsumer29 = null;
        optionalDouble0.ifPresent(doubleConsumer29);
        java.util.function.DoubleSupplier doubleSupplier31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = optionalDouble0.orElseGet(doubleSupplier31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleSupplier.getAsDouble()\" because \"supplier\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        boolean boolean10 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double5 = optionalDouble1.orElse((double) (-1L));
        double double7 = optionalDouble1.orElse((double) (short) 0);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) (-1));
        boolean boolean10 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        double double26 = optionalDouble4.orElse(52.0d);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        boolean boolean6 = optionalDouble1.isPresent();
        boolean boolean7 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        double double9 = optionalDouble1.orElseThrow();
        boolean boolean10 = optionalDouble1.isPresent();
        boolean boolean11 = optionalDouble1.isEmpty();
        double double12 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        boolean boolean21 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble18.orElseGet(doubleSupplier19);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble18.stream();
        java.util.stream.DoubleStream doubleStream22 = optionalDouble18.stream();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble18.orElseGet(doubleSupplier23);
        boolean boolean25 = optionalDouble6.equals((java.lang.Object) double24);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble6.stream();
        java.lang.String str27 = optionalDouble6.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OptionalDouble.empty" + "'", str27, "OptionalDouble.empty");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double4 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.empty();
        boolean boolean9 = optionalDouble7.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble11.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier17 = null;
        double double18 = optionalDouble11.orElseGet(doubleSupplier17);
        java.util.OptionalDouble optionalDouble20 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble20.stream();
        boolean boolean22 = optionalDouble20.isEmpty();
        boolean boolean24 = optionalDouble20.equals((java.lang.Object) 0.0f);
        boolean boolean25 = optionalDouble20.isEmpty();
        boolean boolean26 = optionalDouble20.isEmpty();
        boolean boolean27 = optionalDouble11.equals((java.lang.Object) optionalDouble20);
        double double28 = optionalDouble11.orElseThrow();
        boolean boolean29 = optionalDouble11.isEmpty();
        java.util.stream.DoubleStream doubleStream30 = optionalDouble11.stream();
        boolean boolean31 = optionalDouble7.equals((java.lang.Object) optionalDouble11);
        boolean boolean32 = optionalDouble7.isEmpty();
        java.util.stream.DoubleStream doubleStream33 = optionalDouble7.stream();
        boolean boolean34 = optionalDouble1.equals((java.lang.Object) doubleStream33);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble20);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isPresent();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = optionalDouble10.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        double double3 = optionalDouble1.orElse((double) 0L);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        boolean boolean9 = optionalDouble5.equals((java.lang.Object) 0.0f);
        boolean boolean10 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble5.orElseGet(doubleSupplier11);
        double double13 = optionalDouble5.orElseThrow();
        java.util.stream.DoubleStream doubleStream14 = optionalDouble5.stream();
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) 100L);
        double double17 = optionalDouble16.orElseThrow();
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 1L);
        double double21 = optionalDouble19.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream22 = optionalDouble19.stream();
        boolean boolean23 = optionalDouble16.equals((java.lang.Object) optionalDouble19);
        boolean boolean24 = optionalDouble5.equals((java.lang.Object) optionalDouble19);
        java.util.stream.DoubleStream doubleStream25 = optionalDouble19.stream();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) doubleStream25);
        java.util.OptionalDouble optionalDouble28 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier29 = null;
        double double30 = optionalDouble28.orElseGet(doubleSupplier29);
        double double32 = optionalDouble28.orElse((double) 'a');
        java.lang.Class<?> wildcardClass33 = optionalDouble28.getClass();
        boolean boolean34 = optionalDouble1.equals((java.lang.Object) optionalDouble28);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(optionalDouble28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        double double12 = optionalDouble4.orElseThrow();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double15 = optionalDouble1.orElse((double) 0L);
        boolean boolean16 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer17 = null;
        java.lang.Runnable runnable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer17, runnable18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble18.orElseGet(doubleSupplier19);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble18.stream();
        java.util.stream.DoubleStream doubleStream22 = optionalDouble18.stream();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble18.orElseGet(doubleSupplier23);
        boolean boolean25 = optionalDouble6.equals((java.lang.Object) double24);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble6.stream();
        java.lang.Class<?> wildcardClass27 = doubleStream26.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double11 = optionalDouble1.orElse(0.0d);
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.orElseThrow();
        double double14 = optionalDouble1.getAsDouble();
        java.lang.String str15 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OptionalDouble[100.0]" + "'", str15, "OptionalDouble[100.0]");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble23.isEmpty();
        double double29 = optionalDouble23.orElse((double) (short) 0);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        boolean boolean25 = optionalDouble0.isEmpty();
        boolean boolean26 = optionalDouble0.isPresent();
        boolean boolean27 = optionalDouble0.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        boolean boolean13 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer14 = null;
        java.lang.Runnable runnable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer14, runnable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.lang.String str2 = optionalDouble1.toString();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.empty();
        boolean boolean4 = optionalDouble3.isPresent();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) boolean4);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[100.0]" + "'", str2, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble9.equals((java.lang.Object) optionalDouble11);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        boolean boolean18 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream19 = optionalDouble1.stream();
        boolean boolean20 = optionalDouble1.isPresent();
        double double21 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        boolean boolean4 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double3 = optionalDouble1.orElse((double) (-1));
        double double4 = optionalDouble1.getAsDouble();
        double double5 = optionalDouble1.orElseThrow();
        double double7 = optionalDouble1.orElse(10.0d);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        double double13 = optionalDouble9.orElse((double) 'a');
        java.lang.String str14 = optionalDouble9.toString();
        double double16 = optionalDouble9.orElse((double) 1);
        java.lang.String str17 = optionalDouble9.toString();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble9);
        java.util.stream.DoubleStream doubleStream19 = optionalDouble9.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalDouble[1.0]" + "'", str14, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble[1.0]" + "'", str17, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleStream19);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        java.lang.String str2 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer3, runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[0.0]" + "'", str2, "OptionalDouble[0.0]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) (-1L));
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble1.orElseGet(doubleSupplier22);
        double double24 = optionalDouble1.orElseThrow();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) "OptionalDouble.empty");
        java.util.OptionalDouble optionalDouble28 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream29 = optionalDouble28.stream();
        boolean boolean30 = optionalDouble28.isEmpty();
        boolean boolean32 = optionalDouble28.equals((java.lang.Object) 0.0f);
        boolean boolean33 = optionalDouble28.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier34 = null;
        double double35 = optionalDouble28.orElseGet(doubleSupplier34);
        java.util.OptionalDouble optionalDouble37 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream38 = optionalDouble37.stream();
        boolean boolean39 = optionalDouble37.isEmpty();
        boolean boolean41 = optionalDouble37.equals((java.lang.Object) 0.0f);
        boolean boolean42 = optionalDouble37.isEmpty();
        boolean boolean43 = optionalDouble37.isEmpty();
        boolean boolean44 = optionalDouble28.equals((java.lang.Object) optionalDouble37);
        double double45 = optionalDouble28.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier46 = null;
        double double47 = optionalDouble28.orElseGet(doubleSupplier46);
        java.util.stream.DoubleStream doubleStream48 = optionalDouble28.stream();
        double double50 = optionalDouble28.orElse((double) (byte) -1);
        boolean boolean51 = optionalDouble1.equals((java.lang.Object) double50);
        java.lang.String str52 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(optionalDouble28);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble37);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OptionalDouble[100.0]" + "'", str52, "OptionalDouble[100.0]");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble1.orElseGet(doubleSupplier12);
        double double14 = optionalDouble1.getAsDouble();
        double double15 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer16 = null;
        java.lang.Runnable runnable17 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer16, runnable17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '4');
        double double2 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        double double4 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.lang.Object obj6 = null;
        boolean boolean7 = optionalDouble1.equals(obj6);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.lang.String str3 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[100.0]" + "'", str3, "OptionalDouble[100.0]");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) -1);
        double double2 = optionalDouble1.orElseThrow();
        double double4 = optionalDouble1.orElse((double) '#');
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        java.lang.String str2 = optionalDouble1.toString();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[0.0]" + "'", str2, "OptionalDouble[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double11 = optionalDouble1.orElse(0.0d);
        boolean boolean12 = optionalDouble1.isPresent();
        double double14 = optionalDouble1.orElse((double) (short) 100);
        double double15 = optionalDouble1.getAsDouble();
        boolean boolean16 = optionalDouble1.isEmpty();
        double double18 = optionalDouble1.orElse((double) (byte) 1);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(52.0d);
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer2, runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isEmpty();
        java.lang.String str13 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OptionalDouble[100.0]" + "'", str13, "OptionalDouble[100.0]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream9);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double11 = optionalDouble1.orElse(0.0d);
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.orElseThrow();
        double double14 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer15 = null;
        java.lang.Runnable runnable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer15, runnable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble3.orElseGet(doubleSupplier14);
        boolean boolean16 = optionalDouble3.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        double double16 = optionalDouble5.getAsDouble();
        boolean boolean17 = optionalDouble5.isEmpty();
        java.lang.String str18 = optionalDouble5.toString();
        java.util.OptionalDouble optionalDouble20 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str21 = optionalDouble20.toString();
        double double22 = optionalDouble20.getAsDouble();
        java.lang.String str23 = optionalDouble20.toString();
        boolean boolean24 = optionalDouble20.isPresent();
        double double25 = optionalDouble20.orElseThrow();
        double double27 = optionalDouble20.orElse((double) 10);
        boolean boolean28 = optionalDouble5.equals((java.lang.Object) 10);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OptionalDouble[100.0]" + "'", str18, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(optionalDouble20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OptionalDouble[10.0]" + "'", str21, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OptionalDouble[10.0]" + "'", str23, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier19 = null;
        double double20 = optionalDouble18.orElseGet(doubleSupplier19);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble18.stream();
        java.util.stream.DoubleStream doubleStream22 = optionalDouble18.stream();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble18.orElseGet(doubleSupplier23);
        boolean boolean25 = optionalDouble6.equals((java.lang.Object) double24);
        boolean boolean26 = optionalDouble6.isPresent();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = optionalDouble6.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        double double5 = optionalDouble1.orElseThrow();
        double double6 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(10.0d);
        java.lang.String str2 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer3, runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(1.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.lang.Class<?> wildcardClass4 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble12.orElseGet(doubleSupplier18);
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream22 = optionalDouble21.stream();
        boolean boolean23 = optionalDouble21.isEmpty();
        boolean boolean25 = optionalDouble21.equals((java.lang.Object) 0.0f);
        boolean boolean26 = optionalDouble21.isEmpty();
        boolean boolean27 = optionalDouble21.isEmpty();
        boolean boolean28 = optionalDouble12.equals((java.lang.Object) optionalDouble21);
        double double29 = optionalDouble12.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier30 = null;
        double double31 = optionalDouble12.orElseGet(doubleSupplier30);
        double double33 = optionalDouble12.orElse((double) (-1));
        boolean boolean34 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.OptionalDouble optionalDouble36 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream37 = optionalDouble36.stream();
        boolean boolean38 = optionalDouble36.isEmpty();
        boolean boolean40 = optionalDouble36.equals((java.lang.Object) 0.0f);
        boolean boolean41 = optionalDouble36.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier42 = null;
        double double43 = optionalDouble36.orElseGet(doubleSupplier42);
        double double44 = optionalDouble36.orElseThrow();
        double double45 = optionalDouble36.getAsDouble();
        java.util.stream.DoubleStream doubleStream46 = optionalDouble36.stream();
        boolean boolean47 = optionalDouble1.equals((java.lang.Object) optionalDouble36);
        double double49 = optionalDouble36.orElse((double) (short) 0);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(optionalDouble36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        boolean boolean4 = optionalDouble1.isEmpty();
        java.lang.String str5 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[1.0]" + "'", str5, "OptionalDouble[1.0]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double4 = optionalDouble1.orElse(35.0d);
        boolean boolean5 = optionalDouble1.isPresent();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer7, runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double4 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElse((double) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 0);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble15.equals((java.lang.Object) optionalDouble17);
        java.util.stream.DoubleStream doubleStream23 = optionalDouble15.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble15);
        java.util.stream.DoubleStream doubleStream25 = optionalDouble0.stream();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleStream25);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) (byte) 10);
        double double6 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble8.stream();
        boolean boolean10 = optionalDouble8.isEmpty();
        boolean boolean11 = optionalDouble8.isPresent();
        double double12 = optionalDouble8.getAsDouble();
        double double13 = optionalDouble8.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble8.orElseGet(doubleSupplier14);
        boolean boolean16 = optionalDouble8.isEmpty();
        double double17 = optionalDouble8.getAsDouble();
        double double19 = optionalDouble8.orElse(10.0d);
        double double21 = optionalDouble8.orElse((double) (short) 10);
        boolean boolean22 = optionalDouble1.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        java.lang.String str11 = optionalDouble1.toString();
        boolean boolean12 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OptionalDouble[100.0]" + "'", str11, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        double double22 = optionalDouble15.orElse((double) (short) -1);
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble15.orElseGet(doubleSupplier23);
        boolean boolean25 = optionalDouble15.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        double double10 = optionalDouble1.getAsDouble();
        java.lang.Class<?> wildcardClass11 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean11 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer12 = null;
        java.lang.Runnable runnable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer12, runnable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) -1);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer4 = null;
        java.lang.Runnable runnable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer4, runnable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        double double7 = optionalDouble1.getAsDouble();
        double double9 = optionalDouble1.orElse((double) (short) 100);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble1.orElseGet(doubleSupplier10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        double double12 = optionalDouble4.orElseThrow();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double15 = optionalDouble1.orElse((double) 0L);
        java.lang.String str16 = optionalDouble1.toString();
        java.lang.String str17 = optionalDouble1.toString();
        boolean boolean18 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble[100.0]" + "'", str16, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble[100.0]" + "'", str17, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 1);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble4.stream();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble4.isPresent();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) boolean8);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble10.orElseGet(doubleSupplier11);
        java.lang.String str13 = optionalDouble10.toString();
        double double15 = optionalDouble10.orElse((double) 100.0f);
        boolean boolean16 = optionalDouble1.equals((java.lang.Object) double15);
        double double17 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OptionalDouble[1.0]" + "'", str13, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean13 = optionalDouble10.isPresent();
        double double14 = optionalDouble10.getAsDouble();
        double double15 = optionalDouble10.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier16 = null;
        double double17 = optionalDouble10.orElseGet(doubleSupplier16);
        boolean boolean18 = optionalDouble10.isEmpty();
        double double19 = optionalDouble10.getAsDouble();
        boolean boolean20 = optionalDouble3.equals((java.lang.Object) double19);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) doubleStream11);
        java.util.function.DoubleConsumer doubleConsumer13 = null;
        java.lang.Runnable runnable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer13, runnable14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        double double7 = optionalDouble1.getAsDouble();
        double double9 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble11.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier17 = null;
        double double18 = optionalDouble11.orElseGet(doubleSupplier17);
        java.util.OptionalDouble optionalDouble20 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble20.stream();
        boolean boolean22 = optionalDouble20.isEmpty();
        boolean boolean24 = optionalDouble20.equals((java.lang.Object) 0.0f);
        boolean boolean25 = optionalDouble20.isEmpty();
        boolean boolean26 = optionalDouble20.isEmpty();
        boolean boolean27 = optionalDouble11.equals((java.lang.Object) optionalDouble20);
        double double28 = optionalDouble11.orElseThrow();
        boolean boolean29 = optionalDouble11.isEmpty();
        java.util.stream.DoubleStream doubleStream30 = optionalDouble11.stream();
        java.lang.Class<?> wildcardClass31 = doubleStream30.getClass();
        boolean boolean32 = optionalDouble1.equals((java.lang.Object) wildcardClass31);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble20);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        double double4 = optionalDouble0.orElse(10.0d);
        java.lang.String str5 = optionalDouble0.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = optionalDouble0.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.orElseThrow();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double10 = optionalDouble1.orElse((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        double double13 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.lang.String str6 = optionalDouble1.toString();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble11.isEmpty();
        boolean boolean17 = optionalDouble11.isEmpty();
        double double19 = optionalDouble11.orElse((double) 100.0f);
        double double20 = optionalDouble11.orElseThrow();
        java.util.stream.DoubleStream doubleStream21 = optionalDouble11.stream();
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean27 = optionalDouble23.equals((java.lang.Object) 0.0f);
        boolean boolean28 = optionalDouble23.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier29 = null;
        double double30 = optionalDouble23.orElseGet(doubleSupplier29);
        java.util.OptionalDouble optionalDouble32 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream33 = optionalDouble32.stream();
        boolean boolean34 = optionalDouble32.isEmpty();
        boolean boolean36 = optionalDouble32.equals((java.lang.Object) 0.0f);
        boolean boolean37 = optionalDouble32.isEmpty();
        boolean boolean38 = optionalDouble32.isEmpty();
        boolean boolean39 = optionalDouble23.equals((java.lang.Object) optionalDouble32);
        double double40 = optionalDouble23.orElseThrow();
        boolean boolean41 = optionalDouble23.isEmpty();
        double double42 = optionalDouble23.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier43 = null;
        double double44 = optionalDouble23.orElseGet(doubleSupplier43);
        boolean boolean45 = optionalDouble11.equals((java.lang.Object) double44);
        boolean boolean46 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        java.util.function.DoubleSupplier doubleSupplier47 = null;
        double double48 = optionalDouble11.orElseGet(doubleSupplier47);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble32);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        boolean boolean7 = optionalDouble1.isPresent();
        java.lang.String str8 = optionalDouble1.toString();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble10.orElseGet(doubleSupplier11);
        double double14 = optionalDouble10.orElse((double) 'a');
        java.lang.String str15 = optionalDouble10.toString();
        boolean boolean16 = optionalDouble10.isPresent();
        double double17 = optionalDouble10.getAsDouble();
        boolean boolean18 = optionalDouble10.isEmpty();
        java.lang.String str19 = optionalDouble10.toString();
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        boolean boolean21 = optionalDouble10.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[100.0]" + "'", str8, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OptionalDouble[1.0]" + "'", str15, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OptionalDouble[1.0]" + "'", str19, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        boolean boolean10 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '4');
        double double2 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        double double4 = optionalDouble1.orElseThrow();
        java.lang.Object obj5 = null;
        boolean boolean6 = optionalDouble1.equals(obj5);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        double double4 = optionalDouble3.getAsDouble();
        boolean boolean6 = optionalDouble3.equals((java.lang.Object) (-1));
        boolean boolean7 = optionalDouble0.equals((java.lang.Object) boolean6);
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        optionalDouble0.ifPresent(doubleConsumer8);
        boolean boolean10 = optionalDouble0.isEmpty();
        boolean boolean11 = optionalDouble0.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = optionalDouble0.orElseGet(doubleSupplier12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleSupplier.getAsDouble()\" because \"supplier\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isEmpty();
        java.lang.String str8 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[10.0]" + "'", str8, "OptionalDouble[10.0]");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) -1);
        double double2 = optionalDouble1.orElseThrow();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        double double8 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.orElse((double) 1.0f);
        double double11 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        java.lang.Runnable runnable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer6, runnable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        boolean boolean2 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElse((double) (short) 100);
        java.lang.String str5 = optionalDouble1.toString();
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[0.0]" + "'", str5, "OptionalDouble[0.0]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean5 = optionalDouble4.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        double double15 = optionalDouble7.orElseThrow();
        boolean boolean16 = optionalDouble4.equals((java.lang.Object) optionalDouble7);
        boolean boolean17 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        boolean boolean18 = optionalDouble0.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        java.util.stream.DoubleStream doubleStream13 = optionalDouble11.stream();
        java.lang.String str14 = optionalDouble11.toString();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble11.orElseGet(doubleSupplier15);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) double16);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalDouble[10.0]" + "'", str14, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.lang.String str3 = optionalDouble0.toString();
        boolean boolean4 = optionalDouble0.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble.empty" + "'", str3, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass5 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        java.lang.Object obj6 = null;
        boolean boolean7 = optionalDouble1.equals(obj6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double10 = optionalDouble1.orElse((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        java.lang.String str13 = optionalDouble1.toString();
        boolean boolean14 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer15 = null;
        java.lang.Runnable runnable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer15, runnable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OptionalDouble[100.0]" + "'", str13, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean11 = optionalDouble1.isEmpty();
        boolean boolean12 = optionalDouble1.isPresent();
        double double13 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double3 = optionalDouble1.orElse((double) (-1));
        double double4 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        double double10 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        java.util.function.DoubleConsumer doubleConsumer12 = null;
        java.lang.Runnable runnable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer12, runnable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(10.0d);
        boolean boolean18 = optionalDouble5.equals((java.lang.Object) optionalDouble17);
        double double20 = optionalDouble5.orElse((double) 0L);
        boolean boolean21 = optionalDouble5.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double10 = optionalDouble1.orElse((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier11 = null;
        double double12 = optionalDouble1.orElseGet(doubleSupplier11);
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.empty();
        boolean boolean17 = optionalDouble15.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble19 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble19.stream();
        boolean boolean21 = optionalDouble19.isEmpty();
        boolean boolean23 = optionalDouble19.equals((java.lang.Object) 0.0f);
        boolean boolean24 = optionalDouble19.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble19.orElseGet(doubleSupplier25);
        java.util.OptionalDouble optionalDouble28 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream29 = optionalDouble28.stream();
        boolean boolean30 = optionalDouble28.isEmpty();
        boolean boolean32 = optionalDouble28.equals((java.lang.Object) 0.0f);
        boolean boolean33 = optionalDouble28.isEmpty();
        boolean boolean34 = optionalDouble28.isEmpty();
        boolean boolean35 = optionalDouble19.equals((java.lang.Object) optionalDouble28);
        double double36 = optionalDouble19.orElseThrow();
        boolean boolean37 = optionalDouble19.isEmpty();
        java.util.stream.DoubleStream doubleStream38 = optionalDouble19.stream();
        boolean boolean39 = optionalDouble15.equals((java.lang.Object) optionalDouble19);
        java.util.OptionalDouble optionalDouble41 = java.util.OptionalDouble.of(0.0d);
        double double42 = optionalDouble41.getAsDouble();
        boolean boolean43 = optionalDouble41.isPresent();
        boolean boolean44 = optionalDouble19.equals((java.lang.Object) boolean43);
        java.util.OptionalDouble optionalDouble46 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream47 = optionalDouble46.stream();
        boolean boolean48 = optionalDouble46.isEmpty();
        boolean boolean50 = optionalDouble46.equals((java.lang.Object) 0.0f);
        boolean boolean51 = optionalDouble46.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier52 = null;
        double double53 = optionalDouble46.orElseGet(doubleSupplier52);
        java.util.OptionalDouble optionalDouble55 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream56 = optionalDouble55.stream();
        boolean boolean57 = optionalDouble55.isEmpty();
        boolean boolean59 = optionalDouble55.equals((java.lang.Object) 0.0f);
        boolean boolean60 = optionalDouble55.isEmpty();
        boolean boolean61 = optionalDouble55.isEmpty();
        boolean boolean62 = optionalDouble46.equals((java.lang.Object) optionalDouble55);
        boolean boolean63 = optionalDouble19.equals((java.lang.Object) optionalDouble46);
        boolean boolean64 = optionalDouble1.equals((java.lang.Object) optionalDouble46);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble28);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(optionalDouble41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(optionalDouble46);
        org.junit.Assert.assertNotNull(doubleStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble55);
        org.junit.Assert.assertNotNull(doubleStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        double double10 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        double double10 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        java.util.function.DoubleConsumer doubleConsumer13 = null;
        optionalDouble11.ifPresent(doubleConsumer13);
        double double16 = optionalDouble11.orElse((double) 0L);
        boolean boolean17 = optionalDouble11.isEmpty();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = optionalDouble11.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        double double16 = optionalDouble5.getAsDouble();
        boolean boolean17 = optionalDouble5.isEmpty();
        double double19 = optionalDouble5.orElse((-1.0d));
        java.util.stream.DoubleStream doubleStream20 = optionalDouble5.stream();
        java.util.OptionalDouble optionalDouble22 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream23 = optionalDouble22.stream();
        java.util.stream.DoubleStream doubleStream24 = optionalDouble22.stream();
        boolean boolean25 = optionalDouble22.isEmpty();
        boolean boolean26 = optionalDouble5.equals((java.lang.Object) boolean25);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertNotNull(optionalDouble22);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble8.stream();
        boolean boolean10 = optionalDouble8.isEmpty();
        boolean boolean12 = optionalDouble8.equals((java.lang.Object) 0.0f);
        boolean boolean13 = optionalDouble8.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble8.orElseGet(doubleSupplier14);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble17.isEmpty();
        boolean boolean23 = optionalDouble17.isEmpty();
        boolean boolean24 = optionalDouble8.equals((java.lang.Object) optionalDouble17);
        double double25 = optionalDouble8.orElseThrow();
        boolean boolean26 = optionalDouble8.isEmpty();
        java.util.stream.DoubleStream doubleStream27 = optionalDouble8.stream();
        java.util.function.DoubleSupplier doubleSupplier28 = null;
        double double29 = optionalDouble8.orElseGet(doubleSupplier28);
        boolean boolean30 = optionalDouble8.isEmpty();
        boolean boolean31 = optionalDouble1.equals((java.lang.Object) boolean30);
        java.lang.String str32 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OptionalDouble[100.0]" + "'", str32, "OptionalDouble[100.0]");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.stream.DoubleStream doubleStream21 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleStream21);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.lang.Class<?> wildcardClass6 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        double double11 = optionalDouble1.getAsDouble();
        java.lang.String str12 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OptionalDouble[100.0]" + "'", str12, "OptionalDouble[100.0]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble1.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        double double14 = optionalDouble13.orElseThrow();
        double double16 = optionalDouble13.orElse((double) (short) 10);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) double16);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        java.lang.Class<?> wildcardClass23 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        java.lang.String str3 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble6.stream();
        boolean boolean8 = optionalDouble6.isEmpty();
        boolean boolean10 = optionalDouble6.equals((java.lang.Object) 0.0f);
        boolean boolean11 = optionalDouble6.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble6.orElseGet(doubleSupplier12);
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream16 = optionalDouble15.stream();
        boolean boolean17 = optionalDouble15.isEmpty();
        boolean boolean19 = optionalDouble15.equals((java.lang.Object) 0.0f);
        boolean boolean20 = optionalDouble15.isEmpty();
        boolean boolean21 = optionalDouble15.isEmpty();
        boolean boolean22 = optionalDouble6.equals((java.lang.Object) optionalDouble15);
        double double23 = optionalDouble6.orElseThrow();
        boolean boolean24 = optionalDouble6.isEmpty();
        double double25 = optionalDouble6.getAsDouble();
        double double26 = optionalDouble6.getAsDouble();
        double double27 = optionalDouble6.orElseThrow();
        double double28 = optionalDouble6.getAsDouble();
        boolean boolean29 = optionalDouble1.equals((java.lang.Object) double28);
        double double31 = optionalDouble1.orElse((double) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[0.0]" + "'", str3, "OptionalDouble[0.0]");
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double5 = optionalDouble1.orElse((double) (-1L));
        double double7 = optionalDouble1.orElse((double) (short) 0);
        boolean boolean8 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) boolean12);
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble1.orElseGet(doubleSupplier14);
        double double17 = optionalDouble1.orElse(1.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        double double5 = optionalDouble0.orElse((double) (byte) 0);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10.0f);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean6 = optionalDouble3.isPresent();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble3.stream();
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) boolean8);
        double double11 = optionalDouble1.orElse((double) (short) 100);
        boolean boolean12 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.lang.String str4 = optionalDouble1.toString();
        double double6 = optionalDouble1.orElse((double) 100.0f);
        double double8 = optionalDouble1.orElse((double) (short) 10);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) (short) 0);
        double double11 = optionalDouble10.getAsDouble();
        double double12 = optionalDouble10.orElseThrow();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) double12);
        boolean boolean14 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[1.0]" + "'", str4, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double3 = optionalDouble1.orElse((double) (-1));
        double double4 = optionalDouble1.getAsDouble();
        double double5 = optionalDouble1.orElseThrow();
        double double7 = optionalDouble1.orElse(10.0d);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        double double13 = optionalDouble9.orElse((double) 'a');
        java.lang.String str14 = optionalDouble9.toString();
        double double16 = optionalDouble9.orElse((double) 1);
        java.lang.String str17 = optionalDouble9.toString();
        boolean boolean18 = optionalDouble1.equals((java.lang.Object) optionalDouble9);
        boolean boolean19 = optionalDouble1.isPresent();
        java.lang.String str20 = optionalDouble1.toString();
        double double21 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalDouble[1.0]" + "'", str14, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble[1.0]" + "'", str17, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OptionalDouble[10.0]" + "'", str20, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) "OptionalDouble.empty");
        double double14 = optionalDouble1.orElse(35.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        double double21 = optionalDouble1.getAsDouble();
        double double22 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble1.orElseGet(doubleSupplier23);
        java.util.stream.DoubleStream doubleStream25 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream25);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        boolean boolean15 = optionalDouble9.isEmpty();
        double double17 = optionalDouble9.orElse((double) 100.0f);
        double double18 = optionalDouble9.orElseThrow();
        java.util.stream.DoubleStream doubleStream19 = optionalDouble9.stream();
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) doubleStream19);
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        double double24 = optionalDouble1.orElse((double) (short) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double21 = optionalDouble1.orElse((double) (-1L));
        double double22 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.lang.String str25 = optionalDouble4.toString();
        double double26 = optionalDouble4.getAsDouble();
        double double28 = optionalDouble4.orElse((double) 1L);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OptionalDouble[100.0]" + "'", str25, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble15.equals((java.lang.Object) optionalDouble17);
        java.util.stream.DoubleStream doubleStream23 = optionalDouble15.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble15);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = optionalDouble0.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        boolean boolean6 = optionalDouble1.isPresent();
        java.lang.String str7 = optionalDouble1.toString();
        double double9 = optionalDouble1.orElse((double) 'a');
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble[100.0]" + "'", str7, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1.0f);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) (byte) 100);
        double double6 = optionalDouble5.getAsDouble();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble5.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        boolean boolean9 = optionalDouble5.isEmpty();
        double double10 = optionalDouble5.orElseThrow();
        double double12 = optionalDouble5.orElse((double) '#');
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double19 = optionalDouble10.orElse((double) (byte) 0);
        double double20 = optionalDouble10.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble10.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble10.isEmpty();
        java.util.OptionalDouble optionalDouble25 = java.util.OptionalDouble.of((double) (byte) 0);
        boolean boolean26 = optionalDouble25.isEmpty();
        java.util.OptionalDouble optionalDouble28 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier29 = null;
        double double30 = optionalDouble28.orElseGet(doubleSupplier29);
        double double32 = optionalDouble28.orElse((double) 'a');
        boolean boolean33 = optionalDouble25.equals((java.lang.Object) double32);
        boolean boolean34 = optionalDouble10.equals((java.lang.Object) optionalDouble25);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(optionalDouble25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(optionalDouble28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.lang.String str6 = optionalDouble1.toString();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        double double13 = optionalDouble10.getAsDouble();
        boolean boolean14 = optionalDouble10.isPresent();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble10.orElseGet(doubleSupplier15);
        boolean boolean17 = optionalDouble10.isPresent();
        boolean boolean19 = optionalDouble10.equals((java.lang.Object) 0);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble10.stream();
        boolean boolean21 = optionalDouble1.equals((java.lang.Object) doubleStream20);
        java.util.stream.DoubleStream doubleStream22 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleStream22);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass4 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.OptionalDouble optionalDouble2 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream3 = optionalDouble2.stream();
        boolean boolean4 = optionalDouble2.isEmpty();
        boolean boolean5 = optionalDouble2.isEmpty();
        boolean boolean6 = optionalDouble2.isPresent();
        boolean boolean7 = optionalDouble0.equals((java.lang.Object) optionalDouble2);
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        optionalDouble0.ifPresent(doubleConsumer8);
        boolean boolean10 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble12.orElseGet(doubleSupplier13);
        java.util.stream.DoubleStream doubleStream15 = optionalDouble12.stream();
        double double16 = optionalDouble12.orElseThrow();
        java.util.stream.DoubleStream doubleStream17 = optionalDouble12.stream();
        boolean boolean18 = optionalDouble0.equals((java.lang.Object) optionalDouble12);
        double double20 = optionalDouble0.orElse((double) (-1.0f));
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.lang.String str17 = optionalDouble6.toString();
        double double19 = optionalDouble6.orElse((double) 1.0f);
        java.util.stream.DoubleStream doubleStream20 = optionalDouble6.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble.empty" + "'", str17, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream20);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble11.isEmpty();
        boolean boolean17 = optionalDouble11.isEmpty();
        boolean boolean19 = optionalDouble11.equals((java.lang.Object) '4');
        double double20 = optionalDouble11.getAsDouble();
        double double21 = optionalDouble11.getAsDouble();
        boolean boolean22 = optionalDouble11.isPresent();
        java.lang.String str23 = optionalDouble11.toString();
        boolean boolean24 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble11.orElseGet(doubleSupplier25);
        java.util.OptionalDouble optionalDouble28 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream29 = optionalDouble28.stream();
        boolean boolean30 = optionalDouble28.isEmpty();
        boolean boolean32 = optionalDouble28.equals((java.lang.Object) 0.0f);
        boolean boolean33 = optionalDouble28.isEmpty();
        boolean boolean34 = optionalDouble28.isEmpty();
        boolean boolean36 = optionalDouble28.equals((java.lang.Object) '4');
        java.util.stream.DoubleStream doubleStream37 = optionalDouble28.stream();
        boolean boolean38 = optionalDouble11.equals((java.lang.Object) optionalDouble28);
        double double40 = optionalDouble28.orElse((double) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OptionalDouble[100.0]" + "'", str23, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble28);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble9.equals((java.lang.Object) optionalDouble11);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream19 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(doubleStream19);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean5 = optionalDouble4.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        double double15 = optionalDouble7.orElseThrow();
        boolean boolean16 = optionalDouble4.equals((java.lang.Object) optionalDouble7);
        boolean boolean17 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        double double18 = optionalDouble4.orElseThrow();
        java.util.stream.DoubleStream doubleStream19 = optionalDouble4.stream();
        double double20 = optionalDouble4.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (byte) 100);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 1);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        boolean boolean25 = optionalDouble0.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer26 = null;
        optionalDouble0.ifPresent(doubleConsumer26);
        java.lang.Class<?> wildcardClass28 = optionalDouble0.getClass();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean12 = optionalDouble10.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble14 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream15 = optionalDouble14.stream();
        boolean boolean16 = optionalDouble14.isEmpty();
        boolean boolean18 = optionalDouble14.equals((java.lang.Object) 0.0f);
        boolean boolean19 = optionalDouble14.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier20 = null;
        double double21 = optionalDouble14.orElseGet(doubleSupplier20);
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean27 = optionalDouble23.equals((java.lang.Object) 0.0f);
        boolean boolean28 = optionalDouble23.isEmpty();
        boolean boolean29 = optionalDouble23.isEmpty();
        boolean boolean30 = optionalDouble14.equals((java.lang.Object) optionalDouble23);
        double double31 = optionalDouble14.orElseThrow();
        boolean boolean32 = optionalDouble14.isEmpty();
        java.util.stream.DoubleStream doubleStream33 = optionalDouble14.stream();
        boolean boolean34 = optionalDouble10.equals((java.lang.Object) optionalDouble14);
        boolean boolean35 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(optionalDouble14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        boolean boolean6 = optionalDouble1.isEmpty();
        double double7 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        double double10 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        double double12 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        boolean boolean8 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        double double10 = optionalDouble1.getAsDouble();
        double double11 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        double double10 = optionalDouble1.orElse((double) (short) 0);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        double double12 = optionalDouble1.getAsDouble();
        boolean boolean13 = optionalDouble1.isEmpty();
        double double14 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        double double8 = optionalDouble1.getAsDouble();
        boolean boolean9 = optionalDouble1.isEmpty();
        java.lang.String str10 = optionalDouble1.toString();
        double double11 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OptionalDouble[1.0]" + "'", str10, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double4 = optionalDouble1.orElse(1.0d);
        java.util.function.DoubleConsumer doubleConsumer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        double double21 = optionalDouble1.getAsDouble();
        double double22 = optionalDouble1.getAsDouble();
        boolean boolean23 = optionalDouble1.isEmpty();
        boolean boolean24 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer25 = null;
        java.lang.Runnable runnable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer25, runnable26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        double double12 = optionalDouble4.orElseThrow();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double15 = optionalDouble1.orElse((double) 0L);
        java.lang.String str16 = optionalDouble1.toString();
        boolean boolean17 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble[100.0]" + "'", str16, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double19 = optionalDouble10.orElse((double) (byte) 0);
        double double20 = optionalDouble10.orElseThrow();
        boolean boolean21 = optionalDouble10.isPresent();
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        double double24 = optionalDouble23.getAsDouble();
        boolean boolean26 = optionalDouble23.equals((java.lang.Object) (-1));
        java.lang.String str27 = optionalDouble23.toString();
        double double28 = optionalDouble23.getAsDouble();
        boolean boolean29 = optionalDouble23.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier30 = null;
        double double31 = optionalDouble23.orElseGet(doubleSupplier30);
        boolean boolean32 = optionalDouble23.isEmpty();
        double double33 = optionalDouble23.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier34 = null;
        double double35 = optionalDouble23.orElseGet(doubleSupplier34);
        boolean boolean36 = optionalDouble10.equals((java.lang.Object) optionalDouble23);
        double double37 = optionalDouble10.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OptionalDouble[100.0]" + "'", str27, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble12.orElseGet(doubleSupplier18);
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream22 = optionalDouble21.stream();
        boolean boolean23 = optionalDouble21.isEmpty();
        boolean boolean25 = optionalDouble21.equals((java.lang.Object) 0.0f);
        boolean boolean26 = optionalDouble21.isEmpty();
        boolean boolean27 = optionalDouble21.isEmpty();
        boolean boolean28 = optionalDouble12.equals((java.lang.Object) optionalDouble21);
        double double29 = optionalDouble12.orElseThrow();
        boolean boolean30 = optionalDouble12.isEmpty();
        java.util.stream.DoubleStream doubleStream31 = optionalDouble12.stream();
        java.lang.Class<?> wildcardClass32 = doubleStream31.getClass();
        boolean boolean33 = optionalDouble1.equals((java.lang.Object) wildcardClass32);
        java.util.function.DoubleSupplier doubleSupplier34 = null;
        double double35 = optionalDouble1.orElseGet(doubleSupplier34);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleStream31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        double double6 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.of((double) 1);
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        java.lang.String str3 = optionalDouble1.toString();
        boolean boolean4 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[0.0]" + "'", str3, "OptionalDouble[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        double double12 = optionalDouble1.orElse((double) 1L);
        java.util.OptionalDouble optionalDouble14 = java.util.OptionalDouble.of((double) (byte) 100);
        double double15 = optionalDouble14.getAsDouble();
        java.lang.String str16 = optionalDouble14.toString();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble14);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble[100.0]" + "'", str16, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean3 = optionalDouble1.isPresent();
        java.lang.String str4 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[0.0]" + "'", str4, "OptionalDouble[0.0]");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        double double11 = optionalDouble10.getAsDouble();
        boolean boolean13 = optionalDouble10.equals((java.lang.Object) (-1));
        boolean boolean14 = optionalDouble7.equals((java.lang.Object) boolean13);
        boolean boolean15 = optionalDouble1.equals((java.lang.Object) boolean13);
        boolean boolean16 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        double double6 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        boolean boolean9 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble12.stream();
        boolean boolean14 = optionalDouble12.isEmpty();
        boolean boolean16 = optionalDouble12.equals((java.lang.Object) 0.0f);
        boolean boolean17 = optionalDouble12.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble12.orElseGet(doubleSupplier18);
        java.util.OptionalDouble optionalDouble21 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream22 = optionalDouble21.stream();
        boolean boolean23 = optionalDouble21.isEmpty();
        boolean boolean25 = optionalDouble21.equals((java.lang.Object) 0.0f);
        boolean boolean26 = optionalDouble21.isEmpty();
        boolean boolean27 = optionalDouble21.isEmpty();
        boolean boolean28 = optionalDouble12.equals((java.lang.Object) optionalDouble21);
        double double29 = optionalDouble12.orElseThrow();
        boolean boolean30 = optionalDouble12.isEmpty();
        java.util.stream.DoubleStream doubleStream31 = optionalDouble12.stream();
        java.lang.Class<?> wildcardClass32 = doubleStream31.getClass();
        boolean boolean33 = optionalDouble1.equals((java.lang.Object) wildcardClass32);
        java.lang.String str34 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleStream31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OptionalDouble[100.0]" + "'", str34, "OptionalDouble[100.0]");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        double double8 = optionalDouble1.orElse((double) 1);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double6 = optionalDouble1.orElse(0.0d);
        double double7 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        java.lang.Runnable runnable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer8, runnable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isEmpty();
        double double11 = optionalDouble1.getAsDouble();
        double double12 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(1.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.orElseThrow();
        java.lang.String str4 = optionalDouble1.toString();
        java.lang.Class<?> wildcardClass5 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[1.0]" + "'", str4, "OptionalDouble[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) ' ');
        java.lang.Class<?> wildcardClass2 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1.0f));
        boolean boolean2 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        boolean boolean4 = optionalDouble0.isPresent();
        double double6 = optionalDouble0.orElse((double) (-1));
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 1L);
        double double6 = optionalDouble4.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble4.stream();
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double10 = optionalDouble1.orElse((double) ' ');
        boolean boolean11 = optionalDouble1.isPresent();
        java.lang.String str12 = optionalDouble1.toString();
        double double14 = optionalDouble1.orElse(52.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OptionalDouble[100.0]" + "'", str12, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble23.isPresent();
        double double28 = optionalDouble23.getAsDouble();
        double double29 = optionalDouble23.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.getAsDouble();
        java.lang.String str4 = optionalDouble1.toString();
        boolean boolean5 = optionalDouble1.isPresent();
        java.lang.String str6 = optionalDouble1.toString();
        java.lang.String str7 = optionalDouble1.toString();
        double double8 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble9.stream();
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean14 = optionalDouble13.isPresent();
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream17 = optionalDouble16.stream();
        boolean boolean18 = optionalDouble16.isEmpty();
        boolean boolean20 = optionalDouble16.equals((java.lang.Object) 0.0f);
        boolean boolean21 = optionalDouble16.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier22 = null;
        double double23 = optionalDouble16.orElseGet(doubleSupplier22);
        double double24 = optionalDouble16.orElseThrow();
        boolean boolean25 = optionalDouble13.equals((java.lang.Object) optionalDouble16);
        boolean boolean26 = optionalDouble9.equals((java.lang.Object) optionalDouble13);
        boolean boolean27 = optionalDouble9.isPresent();
        boolean boolean28 = optionalDouble1.equals((java.lang.Object) boolean27);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[10.0]" + "'", str4, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[10.0]" + "'", str6, "OptionalDouble[10.0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble[10.0]" + "'", str7, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        boolean boolean4 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble7.orElseGet(doubleSupplier8);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble7.stream();
        double double11 = optionalDouble7.orElseThrow();
        java.util.stream.DoubleStream doubleStream12 = optionalDouble7.stream();
        double double13 = optionalDouble7.orElseThrow();
        boolean boolean14 = optionalDouble1.equals((java.lang.Object) optionalDouble7);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        java.lang.String str6 = optionalDouble1.toString();
        double double7 = optionalDouble1.getAsDouble();
        boolean boolean8 = optionalDouble1.isEmpty();
        double double10 = optionalDouble1.orElse((-1.0d));
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[100.0]" + "'", str6, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        java.lang.String str3 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.getAsDouble();
        boolean boolean6 = optionalDouble1.isPresent();
        double double7 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[0.0]" + "'", str3, "OptionalDouble[0.0]");
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) '4');
        boolean boolean2 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass3 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble23.isPresent();
        boolean boolean28 = optionalDouble23.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElseThrow();
        double double10 = optionalDouble1.orElse(0.0d);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream12 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(doubleStream12);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        double double4 = optionalDouble3.getAsDouble();
        boolean boolean6 = optionalDouble3.equals((java.lang.Object) (-1));
        boolean boolean7 = optionalDouble0.equals((java.lang.Object) boolean6);
        java.lang.String str8 = optionalDouble0.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = optionalDouble0.orElseThrow();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble.empty" + "'", str8, "OptionalDouble.empty");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        boolean boolean22 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble1.orElseGet(doubleSupplier23);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double19 = optionalDouble10.orElse((double) (byte) 0);
        double double20 = optionalDouble10.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble10.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble10.isEmpty();
        double double24 = optionalDouble10.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.lang.String str3 = optionalDouble0.toString();
        java.util.function.DoubleConsumer doubleConsumer4 = null;
        optionalDouble0.ifPresent(doubleConsumer4);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble0.stream();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = optionalDouble0.orElseGet(doubleSupplier7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleSupplier.getAsDouble()\" because \"supplier\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble.empty" + "'", str3, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        double double12 = optionalDouble4.orElseThrow();
        boolean boolean13 = optionalDouble1.equals((java.lang.Object) optionalDouble4);
        double double15 = optionalDouble1.orElse((double) 0L);
        double double16 = optionalDouble1.getAsDouble();
        double double17 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) '4');
        double double10 = optionalDouble1.getAsDouble();
        double double11 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream12 = optionalDouble1.stream();
        double double13 = optionalDouble1.getAsDouble();
        boolean boolean14 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 0.0f);
        double double2 = optionalDouble1.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble6.orElseGet(doubleSupplier7);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble6.stream();
        double double10 = optionalDouble6.orElseThrow();
        double double11 = optionalDouble6.orElseThrow();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.lang.Class<?> wildcardClass13 = optionalDouble6.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(10.0d);
        boolean boolean18 = optionalDouble5.equals((java.lang.Object) optionalDouble17);
        double double20 = optionalDouble5.orElse((double) 0L);
        double double21 = optionalDouble5.orElseThrow();
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean27 = optionalDouble23.equals((java.lang.Object) 0.0f);
        boolean boolean28 = optionalDouble23.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier29 = null;
        double double30 = optionalDouble23.orElseGet(doubleSupplier29);
        java.util.OptionalDouble optionalDouble32 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream33 = optionalDouble32.stream();
        boolean boolean34 = optionalDouble32.isEmpty();
        boolean boolean36 = optionalDouble32.equals((java.lang.Object) 0.0f);
        boolean boolean37 = optionalDouble32.isEmpty();
        boolean boolean38 = optionalDouble32.isEmpty();
        boolean boolean39 = optionalDouble23.equals((java.lang.Object) optionalDouble32);
        double double40 = optionalDouble23.orElseThrow();
        boolean boolean41 = optionalDouble23.isEmpty();
        double double43 = optionalDouble23.orElse((double) (-1L));
        java.util.function.DoubleSupplier doubleSupplier44 = null;
        double double45 = optionalDouble23.orElseGet(doubleSupplier44);
        double double46 = optionalDouble23.orElseThrow();
        boolean boolean47 = optionalDouble23.isEmpty();
        boolean boolean48 = optionalDouble5.equals((java.lang.Object) boolean47);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble32);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1.0f));
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse(0.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        java.util.OptionalDouble optionalDouble22 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier23 = null;
        double double24 = optionalDouble22.orElseGet(doubleSupplier23);
        java.lang.String str25 = optionalDouble22.toString();
        double double27 = optionalDouble22.orElse((double) 100.0f);
        boolean boolean28 = optionalDouble15.equals((java.lang.Object) double27);
        java.util.stream.DoubleStream doubleStream29 = optionalDouble15.stream();
        boolean boolean31 = optionalDouble15.equals((java.lang.Object) '#');
        java.util.function.DoubleSupplier doubleSupplier32 = null;
        double double33 = optionalDouble15.orElseGet(doubleSupplier32);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(optionalDouble22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OptionalDouble[1.0]" + "'", str25, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = optionalDouble0.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.getAsDouble();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer3, runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElse((double) (short) 10);
        double double10 = optionalDouble1.orElse((double) (short) 0);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        double double12 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) '4');
        double double10 = optionalDouble1.getAsDouble();
        double double11 = optionalDouble1.getAsDouble();
        boolean boolean12 = optionalDouble1.isPresent();
        double double14 = optionalDouble1.orElse((double) 100.0f);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        java.lang.String str2 = optionalDouble1.toString();
        double double3 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double6 = optionalDouble1.orElse((double) (byte) 100);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.isPresent();
        double double6 = optionalDouble1.getAsDouble();
        double double7 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        double double6 = optionalDouble0.orElse((double) (-1L));
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        optionalDouble0.ifPresent(doubleConsumer7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        double double11 = optionalDouble10.getAsDouble();
        boolean boolean13 = optionalDouble10.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble10.orElseGet(doubleSupplier14);
        double double16 = optionalDouble10.getAsDouble();
        boolean boolean17 = optionalDouble0.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble10.orElseGet(doubleSupplier18);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean5 = optionalDouble4.isPresent();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        boolean boolean11 = optionalDouble7.equals((java.lang.Object) 0.0f);
        boolean boolean12 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble7.orElseGet(doubleSupplier13);
        double double15 = optionalDouble7.orElseThrow();
        boolean boolean16 = optionalDouble4.equals((java.lang.Object) optionalDouble7);
        boolean boolean17 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.function.DoubleConsumer doubleConsumer18 = null;
        optionalDouble0.ifPresent(doubleConsumer18);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(10.0d);
        boolean boolean18 = optionalDouble5.equals((java.lang.Object) optionalDouble17);
        double double20 = optionalDouble5.orElse((double) 0L);
        java.lang.String str21 = optionalDouble5.toString();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OptionalDouble[100.0]" + "'", str21, "OptionalDouble[100.0]");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double19 = optionalDouble10.orElse(10.0d);
        java.lang.String str20 = optionalDouble10.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OptionalDouble[100.0]" + "'", str20, "OptionalDouble[100.0]");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double10 = optionalDouble1.orElseThrow();
        java.lang.Class<?> wildcardClass11 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        boolean boolean5 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.function.DoubleConsumer doubleConsumer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble5.ifPresent(doubleConsumer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble1.stream();
        boolean boolean4 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer7, runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        double double8 = optionalDouble1.orElse((double) (byte) 0);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        double double11 = optionalDouble10.getAsDouble();
        boolean boolean13 = optionalDouble10.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass14 = optionalDouble10.getClass();
        boolean boolean15 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double6 = optionalDouble1.orElse((-1.0d));
        boolean boolean7 = optionalDouble1.isPresent();
        java.lang.String str8 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[100.0]" + "'", str8, "OptionalDouble[100.0]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(10.0d);
        boolean boolean18 = optionalDouble5.equals((java.lang.Object) optionalDouble17);
        java.util.stream.DoubleStream doubleStream19 = optionalDouble5.stream();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble5.stream();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertNotNull(doubleStream20);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        java.lang.String str5 = optionalDouble0.toString();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 1L);
        java.lang.String str8 = optionalDouble7.toString();
        boolean boolean9 = optionalDouble0.equals((java.lang.Object) optionalDouble7);
        double double11 = optionalDouble7.orElse((double) (short) 100);
        java.util.function.DoubleConsumer doubleConsumer12 = null;
        java.lang.Runnable runnable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble7.ifPresentOrElse(doubleConsumer12, runnable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[1.0]" + "'", str8, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.orElseThrow();
        boolean boolean3 = optionalDouble1.isPresent();
        java.lang.String str4 = optionalDouble1.toString();
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[100.0]" + "'", str4, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        java.lang.Runnable runnable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer6, runnable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble26 = java.util.OptionalDouble.of(0.0d);
        double double27 = optionalDouble26.getAsDouble();
        boolean boolean28 = optionalDouble26.isPresent();
        boolean boolean29 = optionalDouble4.equals((java.lang.Object) boolean28);
        java.util.OptionalDouble optionalDouble31 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream32 = optionalDouble31.stream();
        boolean boolean33 = optionalDouble31.isEmpty();
        boolean boolean35 = optionalDouble31.equals((java.lang.Object) 0.0f);
        boolean boolean36 = optionalDouble31.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier37 = null;
        double double38 = optionalDouble31.orElseGet(doubleSupplier37);
        java.util.OptionalDouble optionalDouble40 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream41 = optionalDouble40.stream();
        boolean boolean42 = optionalDouble40.isEmpty();
        boolean boolean44 = optionalDouble40.equals((java.lang.Object) 0.0f);
        boolean boolean45 = optionalDouble40.isEmpty();
        boolean boolean46 = optionalDouble40.isEmpty();
        boolean boolean47 = optionalDouble31.equals((java.lang.Object) optionalDouble40);
        boolean boolean48 = optionalDouble4.equals((java.lang.Object) optionalDouble31);
        java.util.function.DoubleConsumer doubleConsumer49 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble31.ifPresent(doubleConsumer49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionalDouble26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(optionalDouble31);
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble40);
        org.junit.Assert.assertNotNull(doubleStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.lang.String str4 = optionalDouble1.toString();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        double double8 = optionalDouble1.orElse((double) 10);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[1.0]" + "'", str4, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        double double2 = optionalDouble1.getAsDouble();
        double double4 = optionalDouble1.orElse((double) '#');
        boolean boolean5 = optionalDouble1.isEmpty();
        double double6 = optionalDouble1.orElseThrow();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        java.lang.Runnable runnable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer8, runnable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        boolean boolean2 = optionalDouble0.isPresent();
        double double4 = optionalDouble0.orElse(10.0d);
        java.lang.String str5 = optionalDouble0.toString();
        boolean boolean6 = optionalDouble0.isPresent();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = optionalDouble0.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble1.equals((java.lang.Object) optionalDouble6);
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble9.orElseGet(doubleSupplier10);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble9.stream();
        boolean boolean13 = optionalDouble6.equals((java.lang.Object) doubleStream12);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble6.stream();
        boolean boolean15 = optionalDouble6.isEmpty();
        java.lang.String str16 = optionalDouble6.toString();
        java.lang.String str17 = optionalDouble6.toString();
        double double19 = optionalDouble6.orElse((double) 1.0f);
        java.util.function.DoubleConsumer doubleConsumer20 = null;
        optionalDouble6.ifPresent(doubleConsumer20);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OptionalDouble.empty" + "'", str17, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double5 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElse((double) (short) 100);
        double double9 = optionalDouble1.getAsDouble();
        double double10 = optionalDouble1.getAsDouble();
        boolean boolean11 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        boolean boolean25 = optionalDouble0.isEmpty();
        java.util.stream.DoubleStream doubleStream26 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer27 = null;
        optionalDouble0.ifPresent(doubleConsumer27);
        boolean boolean29 = optionalDouble0.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean1 = optionalDouble0.isPresent();
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble3.orElseGet(doubleSupplier9);
        double double11 = optionalDouble3.orElseThrow();
        double double12 = optionalDouble3.getAsDouble();
        boolean boolean13 = optionalDouble0.equals((java.lang.Object) optionalDouble3);
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = optionalDouble0.orElseGet(doubleSupplier14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleSupplier.getAsDouble()\" because \"supplier\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.orElseThrow();
        java.lang.String str3 = optionalDouble1.toString();
        boolean boolean4 = optionalDouble1.isPresent();
        java.lang.Class<?> wildcardClass5 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[1.0]" + "'", str3, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        boolean boolean2 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElse((double) (short) 1);
        java.lang.String str5 = optionalDouble1.toString();
        double double7 = optionalDouble1.orElse((double) (-1L));
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[0.0]" + "'", str5, "OptionalDouble[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        boolean boolean6 = optionalDouble1.isEmpty();
        double double7 = optionalDouble1.getAsDouble();
        double double8 = optionalDouble1.orElseThrow();
        boolean boolean9 = optionalDouble1.isEmpty();
        boolean boolean11 = optionalDouble1.equals((java.lang.Object) 10);
        boolean boolean12 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        double double6 = optionalDouble0.orElse((double) (-1L));
        boolean boolean7 = optionalDouble0.isPresent();
        java.util.function.DoubleConsumer doubleConsumer8 = null;
        java.lang.Runnable runnable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble0.ifPresentOrElse(doubleConsumer8, runnable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.lang.Runnable.run()\" because \"emptyAction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) ' ');
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        double double5 = optionalDouble1.orElseGet(doubleSupplier4);
        double double6 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.0d + "'", double5 == 32.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 32.0d + "'", double6 == 32.0d);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(1.0d);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        double double3 = optionalDouble1.orElseThrow();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.lang.String str4 = optionalDouble0.toString();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble.empty" + "'", str4, "OptionalDouble.empty");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        double double9 = optionalDouble1.orElse((double) 100.0f);
        double double11 = optionalDouble1.orElse(0.0d);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble1.stream();
        boolean boolean13 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble1.orElseGet(doubleSupplier14);
        java.util.function.DoubleConsumer doubleConsumer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10.0f);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean6 = optionalDouble3.isPresent();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble3.stream();
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) boolean8);
        double double11 = optionalDouble1.orElse((double) (short) 100);
        boolean boolean12 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble14 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble14.orElseGet(doubleSupplier15);
        double double18 = optionalDouble14.orElse((double) 'a');
        java.lang.String str19 = optionalDouble14.toString();
        boolean boolean20 = optionalDouble14.isPresent();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble14.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble1.equals((java.lang.Object) optionalDouble14);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(optionalDouble14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OptionalDouble[1.0]" + "'", str19, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (short) 1);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        double double6 = optionalDouble3.getAsDouble();
        boolean boolean7 = optionalDouble3.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble3.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble3.isPresent();
        boolean boolean12 = optionalDouble3.equals((java.lang.Object) 0);
        java.util.stream.DoubleStream doubleStream13 = optionalDouble3.stream();
        boolean boolean14 = optionalDouble1.equals((java.lang.Object) doubleStream13);
        double double15 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        boolean boolean2 = optionalDouble1.isPresent();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double5 = optionalDouble1.orElse((double) (-1L));
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble1.stream();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble1.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier24 = null;
        double double25 = optionalDouble1.orElseGet(doubleSupplier24);
        double double27 = optionalDouble1.orElse((double) ' ');
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.lang.String str4 = optionalDouble1.toString();
        double double6 = optionalDouble1.orElse((double) 100.0f);
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.lang.Class<?> wildcardClass9 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble[1.0]" + "'", str4, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble8.orElseGet(doubleSupplier9);
        java.lang.Class<?> wildcardClass11 = optionalDouble8.getClass();
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) wildcardClass11);
        double double13 = optionalDouble1.getAsDouble();
        java.lang.Class<?> wildcardClass14 = optionalDouble1.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        boolean boolean2 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble1.orElseGet(doubleSupplier3);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        boolean boolean5 = optionalDouble0.isPresent();
        double double7 = optionalDouble0.orElse((double) 100);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1L));
        boolean boolean2 = optionalDouble1.isEmpty();
        java.lang.String str3 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[-1.0]" + "'", str3, "OptionalDouble[-1.0]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1));
        double double3 = optionalDouble1.orElse((double) 1L);
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) (short) 1);
        java.util.function.DoubleConsumer doubleConsumer6 = null;
        java.lang.Runnable runnable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer6, runnable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        double double8 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream9 = optionalDouble1.stream();
        boolean boolean10 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream11 = optionalDouble1.stream();
        java.lang.Class<?> wildcardClass12 = doubleStream11.getClass();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        boolean boolean5 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier6 = null;
        double double7 = optionalDouble1.orElseGet(doubleSupplier6);
        boolean boolean8 = optionalDouble1.isPresent();
        boolean boolean9 = optionalDouble1.isPresent();
        double double10 = optionalDouble1.orElseThrow();
        double double11 = optionalDouble1.orElseThrow();
        double double12 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresentOrElse(doubleConsumer3, runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of(10.0d);
        boolean boolean18 = optionalDouble5.equals((java.lang.Object) optionalDouble17);
        double double20 = optionalDouble17.orElse((double) 0L);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        double double7 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        java.lang.String str10 = optionalDouble1.toString();
        java.lang.String str11 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OptionalDouble[100.0]" + "'", str10, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OptionalDouble[100.0]" + "'", str11, "OptionalDouble[100.0]");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        double double5 = optionalDouble1.getAsDouble();
        java.lang.Object obj6 = null;
        boolean boolean7 = optionalDouble1.equals(obj6);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble1.stream();
        boolean boolean9 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble1.orElseGet(doubleSupplier10);
        double double13 = optionalDouble1.orElse(32.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        java.lang.String str5 = optionalDouble0.toString();
        boolean boolean6 = optionalDouble0.isPresent();
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble0.ifPresentOrElse(doubleConsumer7, runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.lang.Runnable.run()\" because \"emptyAction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble.empty" + "'", str5, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.lang.String str16 = optionalDouble0.toString();
        boolean boolean17 = optionalDouble0.isEmpty();
        boolean boolean18 = optionalDouble0.isEmpty();
        java.lang.String str19 = optionalDouble0.toString();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble.empty" + "'", str16, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OptionalDouble.empty" + "'", str19, "OptionalDouble.empty");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble5.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble9.orElseGet(doubleSupplier15);
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream19 = optionalDouble18.stream();
        boolean boolean20 = optionalDouble18.isEmpty();
        boolean boolean22 = optionalDouble18.equals((java.lang.Object) 0.0f);
        boolean boolean23 = optionalDouble18.isEmpty();
        boolean boolean24 = optionalDouble18.isEmpty();
        boolean boolean25 = optionalDouble9.equals((java.lang.Object) optionalDouble18);
        double double26 = optionalDouble9.orElseThrow();
        boolean boolean27 = optionalDouble9.isEmpty();
        java.util.stream.DoubleStream doubleStream28 = optionalDouble9.stream();
        boolean boolean29 = optionalDouble5.equals((java.lang.Object) optionalDouble9);
        boolean boolean30 = optionalDouble5.isEmpty();
        boolean boolean31 = optionalDouble5.isPresent();
        boolean boolean32 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.lang.String str33 = optionalDouble0.toString();
        java.util.stream.DoubleStream doubleStream34 = optionalDouble0.stream();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OptionalDouble.empty" + "'", str33, "OptionalDouble.empty");
        org.junit.Assert.assertNotNull(doubleStream34);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble7 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream8 = optionalDouble7.stream();
        boolean boolean9 = optionalDouble7.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble7.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.empty();
        boolean boolean13 = optionalDouble7.equals((java.lang.Object) optionalDouble12);
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble7.orElseGet(doubleSupplier14);
        boolean boolean16 = optionalDouble7.isEmpty();
        boolean boolean17 = optionalDouble7.isEmpty();
        boolean boolean18 = optionalDouble7.isPresent();
        double double19 = optionalDouble7.getAsDouble();
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble7);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer2 = null;
        optionalDouble0.ifPresent(doubleConsumer2);
        double double5 = optionalDouble0.orElse((double) 0L);
        java.util.OptionalDouble optionalDouble6 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream7 = optionalDouble6.stream();
        java.util.stream.DoubleStream doubleStream8 = optionalDouble6.stream();
        java.util.function.DoubleConsumer doubleConsumer9 = null;
        optionalDouble6.ifPresent(doubleConsumer9);
        boolean boolean11 = optionalDouble0.equals((java.lang.Object) optionalDouble6);
        double double13 = optionalDouble6.orElse((double) 10L);
        boolean boolean14 = optionalDouble6.isEmpty();
        boolean boolean15 = optionalDouble6.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.function.DoubleConsumer doubleConsumer3 = null;
        optionalDouble0.ifPresent(doubleConsumer3);
        double double6 = optionalDouble0.orElse((double) (-1L));
        boolean boolean7 = optionalDouble0.isEmpty();
        java.lang.Object obj8 = null;
        boolean boolean9 = optionalDouble0.equals(obj8);
        double double11 = optionalDouble0.orElse(32.0d);
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 32.0d + "'", double11 == 32.0d);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        boolean boolean2 = optionalDouble0.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble4 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream5 = optionalDouble4.stream();
        boolean boolean6 = optionalDouble4.isEmpty();
        boolean boolean8 = optionalDouble4.equals((java.lang.Object) 0.0f);
        boolean boolean9 = optionalDouble4.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier10 = null;
        double double11 = optionalDouble4.orElseGet(doubleSupplier10);
        java.util.OptionalDouble optionalDouble13 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream14 = optionalDouble13.stream();
        boolean boolean15 = optionalDouble13.isEmpty();
        boolean boolean17 = optionalDouble13.equals((java.lang.Object) 0.0f);
        boolean boolean18 = optionalDouble13.isEmpty();
        boolean boolean19 = optionalDouble13.isEmpty();
        boolean boolean20 = optionalDouble4.equals((java.lang.Object) optionalDouble13);
        double double21 = optionalDouble4.orElseThrow();
        boolean boolean22 = optionalDouble4.isEmpty();
        java.util.stream.DoubleStream doubleStream23 = optionalDouble4.stream();
        boolean boolean24 = optionalDouble0.equals((java.lang.Object) optionalDouble4);
        java.util.OptionalDouble optionalDouble26 = java.util.OptionalDouble.of(0.0d);
        double double27 = optionalDouble26.getAsDouble();
        boolean boolean28 = optionalDouble26.isPresent();
        boolean boolean29 = optionalDouble4.equals((java.lang.Object) boolean28);
        java.lang.Class<?> wildcardClass30 = optionalDouble4.getClass();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(optionalDouble26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        boolean boolean4 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isPresent();
        double double8 = optionalDouble1.orElse((double) 0L);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        double double19 = optionalDouble1.getAsDouble();
        java.util.stream.DoubleStream doubleStream20 = optionalDouble1.stream();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream20);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 0);
        boolean boolean2 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElse((double) (short) 1);
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        double double6 = optionalDouble1.orElseGet(doubleSupplier5);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        double double9 = optionalDouble1.orElseThrow();
        java.util.stream.DoubleStream doubleStream10 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble12 = java.util.OptionalDouble.of((double) 100L);
        double double13 = optionalDouble12.orElseThrow();
        java.util.OptionalDouble optionalDouble15 = java.util.OptionalDouble.of((double) 1L);
        double double17 = optionalDouble15.orElse((double) (short) 100);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble15.stream();
        boolean boolean19 = optionalDouble12.equals((java.lang.Object) optionalDouble15);
        boolean boolean20 = optionalDouble1.equals((java.lang.Object) optionalDouble15);
        double double22 = optionalDouble1.orElse((double) (-1L));
        java.util.stream.DoubleStream doubleStream23 = optionalDouble1.stream();
        boolean boolean24 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.lang.String str16 = optionalDouble5.toString();
        boolean boolean17 = optionalDouble5.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OptionalDouble[100.0]" + "'", str16, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.function.DoubleSupplier doubleSupplier9 = null;
        double double10 = optionalDouble1.orElseGet(doubleSupplier9);
        double double12 = optionalDouble1.orElse(1.0d);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        java.util.stream.DoubleStream doubleStream5 = optionalDouble1.stream();
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble1.ifPresent(doubleConsumer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double2 = optionalDouble1.orElseThrow();
        java.lang.String str3 = optionalDouble1.toString();
        boolean boolean4 = optionalDouble1.isPresent();
        java.lang.String str5 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalDouble[1.0]" + "'", str3, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[1.0]" + "'", str5, "OptionalDouble[1.0]");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble23.isPresent();
        java.util.function.DoubleSupplier doubleSupplier28 = null;
        double double29 = optionalDouble23.orElseGet(doubleSupplier28);
        java.util.function.DoubleConsumer doubleConsumer30 = null;
        java.lang.Runnable runnable31 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble23.ifPresentOrElse(doubleConsumer30, runnable31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.function.DoubleConsumer.accept(double)\" because \"action\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble1.orElseGet(doubleSupplier18);
        double double21 = optionalDouble1.orElse((double) '4');
        java.util.OptionalDouble optionalDouble23 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream24 = optionalDouble23.stream();
        boolean boolean25 = optionalDouble23.isEmpty();
        boolean boolean26 = optionalDouble1.equals((java.lang.Object) optionalDouble23);
        boolean boolean27 = optionalDouble1.isPresent();
        boolean boolean28 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        double double5 = optionalDouble1.orElse((double) 'a');
        java.lang.String str6 = optionalDouble1.toString();
        boolean boolean7 = optionalDouble1.isPresent();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble1.orElseGet(doubleSupplier8);
        boolean boolean10 = optionalDouble1.isPresent();
        double double11 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[1.0]" + "'", str6, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean4 = optionalDouble1.isPresent();
        boolean boolean5 = optionalDouble1.isPresent();
        boolean boolean6 = optionalDouble1.isPresent();
        java.util.OptionalDouble optionalDouble8 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream9 = optionalDouble8.stream();
        boolean boolean10 = optionalDouble8.isEmpty();
        boolean boolean12 = optionalDouble8.equals((java.lang.Object) 0.0f);
        boolean boolean13 = optionalDouble8.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier14 = null;
        double double15 = optionalDouble8.orElseGet(doubleSupplier14);
        java.util.OptionalDouble optionalDouble17 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream18 = optionalDouble17.stream();
        boolean boolean19 = optionalDouble17.isEmpty();
        boolean boolean21 = optionalDouble17.equals((java.lang.Object) 0.0f);
        boolean boolean22 = optionalDouble17.isEmpty();
        boolean boolean23 = optionalDouble17.isEmpty();
        boolean boolean24 = optionalDouble8.equals((java.lang.Object) optionalDouble17);
        java.util.function.DoubleSupplier doubleSupplier25 = null;
        double double26 = optionalDouble8.orElseGet(doubleSupplier25);
        double double28 = optionalDouble8.orElse((double) '4');
        boolean boolean29 = optionalDouble8.isEmpty();
        boolean boolean30 = optionalDouble1.equals((java.lang.Object) boolean29);
        double double31 = optionalDouble1.getAsDouble();
        boolean boolean32 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        double double21 = optionalDouble1.getAsDouble();
        double double22 = optionalDouble1.orElseThrow();
        double double23 = optionalDouble1.getAsDouble();
        java.lang.String str24 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OptionalDouble[100.0]" + "'", str24, "OptionalDouble[100.0]");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1);
        java.util.OptionalDouble optionalDouble3 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble3.stream();
        boolean boolean5 = optionalDouble3.isEmpty();
        boolean boolean7 = optionalDouble3.equals((java.lang.Object) 0.0f);
        boolean boolean8 = optionalDouble3.isEmpty();
        boolean boolean9 = optionalDouble3.isEmpty();
        boolean boolean11 = optionalDouble3.equals((java.lang.Object) '4');
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) '4');
        java.util.function.DoubleSupplier doubleSupplier13 = null;
        double double14 = optionalDouble1.orElseGet(doubleSupplier13);
        java.lang.String str15 = optionalDouble1.toString();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OptionalDouble[1.0]" + "'", str15, "OptionalDouble[1.0]");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double19 = optionalDouble10.orElse((double) (byte) 0);
        double double20 = optionalDouble10.orElseThrow();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble10.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble10.isEmpty();
        boolean boolean24 = optionalDouble10.isPresent();
        boolean boolean25 = optionalDouble10.isEmpty();
        boolean boolean26 = optionalDouble10.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 10);
        boolean boolean2 = optionalDouble1.isEmpty();
        boolean boolean3 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        double double4 = optionalDouble1.orElseThrow();
        java.lang.String str5 = optionalDouble1.toString();
        java.util.stream.DoubleStream doubleStream6 = optionalDouble1.stream();
        java.lang.String str7 = optionalDouble1.toString();
        boolean boolean8 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OptionalDouble[100.0]" + "'", str7, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream3 = optionalDouble0.stream();
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream6 = optionalDouble5.stream();
        boolean boolean7 = optionalDouble5.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier8 = null;
        double double9 = optionalDouble5.orElseGet(doubleSupplier8);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.empty();
        boolean boolean11 = optionalDouble5.equals((java.lang.Object) optionalDouble10);
        java.util.function.DoubleSupplier doubleSupplier12 = null;
        double double13 = optionalDouble5.orElseGet(doubleSupplier12);
        boolean boolean14 = optionalDouble5.isEmpty();
        boolean boolean15 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        double double16 = optionalDouble5.getAsDouble();
        boolean boolean17 = optionalDouble5.isEmpty();
        java.lang.String str18 = optionalDouble5.toString();
        java.lang.String str19 = optionalDouble5.toString();
        double double20 = optionalDouble5.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OptionalDouble[100.0]" + "'", str18, "OptionalDouble[100.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OptionalDouble[100.0]" + "'", str19, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        boolean boolean7 = optionalDouble1.isEmpty();
        boolean boolean9 = optionalDouble1.equals((java.lang.Object) '4');
        double double10 = optionalDouble1.getAsDouble();
        double double11 = optionalDouble1.getAsDouble();
        double double12 = optionalDouble1.orElseThrow();
        java.util.OptionalDouble optionalDouble14 = java.util.OptionalDouble.of((double) (short) 1);
        java.util.OptionalDouble optionalDouble16 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream17 = optionalDouble16.stream();
        boolean boolean18 = optionalDouble16.isEmpty();
        double double19 = optionalDouble16.getAsDouble();
        boolean boolean20 = optionalDouble16.isPresent();
        java.util.function.DoubleSupplier doubleSupplier21 = null;
        double double22 = optionalDouble16.orElseGet(doubleSupplier21);
        boolean boolean23 = optionalDouble16.isPresent();
        boolean boolean25 = optionalDouble16.equals((java.lang.Object) 0);
        java.util.stream.DoubleStream doubleStream26 = optionalDouble16.stream();
        boolean boolean27 = optionalDouble14.equals((java.lang.Object) doubleStream26);
        boolean boolean28 = optionalDouble1.equals((java.lang.Object) optionalDouble14);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble14);
        org.junit.Assert.assertNotNull(optionalDouble16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        double double3 = optionalDouble1.orElseGet(doubleSupplier2);
        java.util.stream.DoubleStream doubleStream4 = optionalDouble1.stream();
        double double6 = optionalDouble1.orElse(0.0d);
        double double7 = optionalDouble1.getAsDouble();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 1L);
        double double11 = optionalDouble9.orElse((double) (short) 100);
        boolean boolean12 = optionalDouble1.equals((java.lang.Object) optionalDouble9);
        double double13 = optionalDouble9.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        java.util.stream.DoubleStream doubleStream1 = optionalDouble0.stream();
        java.util.stream.DoubleStream doubleStream2 = optionalDouble0.stream();
        double double4 = optionalDouble0.orElse((double) 100.0f);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.empty();
        boolean boolean7 = optionalDouble5.equals((java.lang.Object) '#');
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream10 = optionalDouble9.stream();
        boolean boolean11 = optionalDouble9.isEmpty();
        boolean boolean13 = optionalDouble9.equals((java.lang.Object) 0.0f);
        boolean boolean14 = optionalDouble9.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier15 = null;
        double double16 = optionalDouble9.orElseGet(doubleSupplier15);
        java.util.OptionalDouble optionalDouble18 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream19 = optionalDouble18.stream();
        boolean boolean20 = optionalDouble18.isEmpty();
        boolean boolean22 = optionalDouble18.equals((java.lang.Object) 0.0f);
        boolean boolean23 = optionalDouble18.isEmpty();
        boolean boolean24 = optionalDouble18.isEmpty();
        boolean boolean25 = optionalDouble9.equals((java.lang.Object) optionalDouble18);
        double double26 = optionalDouble9.orElseThrow();
        boolean boolean27 = optionalDouble9.isEmpty();
        java.util.stream.DoubleStream doubleStream28 = optionalDouble9.stream();
        boolean boolean29 = optionalDouble5.equals((java.lang.Object) optionalDouble9);
        boolean boolean30 = optionalDouble5.isEmpty();
        boolean boolean31 = optionalDouble5.isPresent();
        boolean boolean32 = optionalDouble0.equals((java.lang.Object) optionalDouble5);
        java.lang.String str33 = optionalDouble0.toString();
        java.util.function.DoubleConsumer doubleConsumer34 = null;
        java.lang.Runnable runnable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            optionalDouble0.ifPresentOrElse(doubleConsumer34, runnable35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.lang.Runnable.run()\" because \"emptyAction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDouble0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OptionalDouble.empty" + "'", str33, "OptionalDouble.empty");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream2 = optionalDouble1.stream();
        boolean boolean3 = optionalDouble1.isEmpty();
        boolean boolean5 = optionalDouble1.equals((java.lang.Object) 0.0f);
        boolean boolean6 = optionalDouble1.isEmpty();
        java.util.function.DoubleSupplier doubleSupplier7 = null;
        double double8 = optionalDouble1.orElseGet(doubleSupplier7);
        java.util.OptionalDouble optionalDouble10 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream11 = optionalDouble10.stream();
        boolean boolean12 = optionalDouble10.isEmpty();
        boolean boolean14 = optionalDouble10.equals((java.lang.Object) 0.0f);
        boolean boolean15 = optionalDouble10.isEmpty();
        boolean boolean16 = optionalDouble10.isEmpty();
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble10);
        double double18 = optionalDouble1.orElseThrow();
        boolean boolean19 = optionalDouble1.isEmpty();
        double double20 = optionalDouble1.getAsDouble();
        double double21 = optionalDouble1.getAsDouble();
        double double22 = optionalDouble1.orElseThrow();
        double double23 = optionalDouble1.getAsDouble();
        double double24 = optionalDouble1.orElseThrow();
        boolean boolean25 = optionalDouble1.isEmpty();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(optionalDouble10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 100L);
        double double2 = optionalDouble1.getAsDouble();
        boolean boolean4 = optionalDouble1.equals((java.lang.Object) (-1));
        java.lang.String str5 = optionalDouble1.toString();
        double double6 = optionalDouble1.getAsDouble();
        boolean boolean7 = optionalDouble1.isPresent();
        double double9 = optionalDouble1.orElse((double) (short) 0);
        boolean boolean10 = optionalDouble1.isPresent();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalDouble[100.0]" + "'", str5, "OptionalDouble[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 1L);
        double double3 = optionalDouble1.orElse((double) (short) 100);
        java.util.OptionalDouble optionalDouble5 = java.util.OptionalDouble.of((double) 1L);
        boolean boolean6 = optionalDouble1.equals((java.lang.Object) optionalDouble5);
        java.util.stream.DoubleStream doubleStream7 = optionalDouble1.stream();
        java.util.OptionalDouble optionalDouble9 = java.util.OptionalDouble.of((double) 100L);
        java.util.OptionalDouble optionalDouble11 = java.util.OptionalDouble.of((double) 100L);
        java.util.stream.DoubleStream doubleStream12 = optionalDouble11.stream();
        boolean boolean13 = optionalDouble11.isEmpty();
        boolean boolean15 = optionalDouble11.equals((java.lang.Object) 0.0f);
        boolean boolean16 = optionalDouble9.equals((java.lang.Object) optionalDouble11);
        boolean boolean17 = optionalDouble1.equals((java.lang.Object) optionalDouble11);
        boolean boolean18 = optionalDouble1.isEmpty();
        java.util.stream.DoubleStream doubleStream19 = optionalDouble1.stream();
        boolean boolean20 = optionalDouble1.isPresent();
        java.lang.String str21 = optionalDouble1.toString();
        boolean boolean22 = optionalDouble1.isEmpty();
        double double23 = optionalDouble1.orElseThrow();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(optionalDouble5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble9);
        org.junit.Assert.assertNotNull(optionalDouble11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OptionalDouble[1.0]" + "'", str21, "OptionalDouble[1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }
}

